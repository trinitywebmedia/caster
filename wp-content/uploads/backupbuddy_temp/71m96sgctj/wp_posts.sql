CREATE TABLE `wp_posts` (  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',  `menu_order` int(11) NOT NULL DEFAULT '0',  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',  `comment_count` bigint(20) NOT NULL DEFAULT '0',  PRIMARY KEY (`ID`),  KEY `post_name` (`post_name`(191)),  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),  KEY `post_parent` (`post_parent`),  KEY `post_author` (`post_author`)) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
SET FOREIGN_KEY_CHECKS = 0;
SET UNIQUE_CHECKS = 0;
INSERT INTO `wp_posts` VALUES('6', '2', '2018-04-10 10:15:51', '0000-00-00 00:00:00', '', 'Home', '', 'draft', 'closed', 'closed', '', '', '', '', '2018-04-10 10:15:51', '0000-00-00 00:00:00', '', '0', 'http://casterarticles.wpengine.com/?p=6', '1', 'nav_menu_item', '', '0');
INSERT INTO `wp_posts` VALUES('8', '2', '2018-04-10 10:16:21', '2018-04-10 10:16:21', '', 'favicon', '', 'inherit', 'open', 'closed', '', 'favicon', '', '', '2018-04-10 10:16:21', '2018-04-10 10:16:21', '', '0', 'http://casterarticles.wpengine.com/wp-content/uploads/2018/04/favicon.png', '0', 'attachment', 'image/png', '0');
INSERT INTO `wp_posts` VALUES('9', '2', '2018-04-10 10:16:28', '2018-04-10 10:16:28', 'http://casterarticles.wpengine.com/wp-content/uploads/2018/04/cropped-favicon.png', 'cropped-favicon.png', '', 'inherit', 'open', 'closed', '', 'cropped-favicon-png', '', '', '2018-04-10 10:16:28', '2018-04-10 10:16:28', '', '0', 'http://casterarticles.wpengine.com/wp-content/uploads/2018/04/cropped-favicon.png', '0', 'attachment', 'image/png', '0');
INSERT INTO `wp_posts` VALUES('14', '2', '2018-04-10 10:18:48', '2018-04-10 10:18:48', '', 'Courses', '', 'publish', 'closed', 'closed', '', 'courses', '', '', '2018-04-10 08:30:32', '2018-04-10 13:30:32', '', '0', 'http://casterarticles.wpengine.com/?p=14', '2', 'nav_menu_item', '', '0');
INSERT INTO `wp_posts` VALUES('15', '2', '2018-04-10 10:18:48', '2018-04-10 10:18:48', '', 'Contact', '', 'publish', 'closed', 'closed', '', 'contact', '', '', '2018-04-10 08:30:32', '2018-04-10 13:30:32', '', '0', 'http://casterarticles.wpengine.com/?p=15', '4', 'nav_menu_item', '', '0');
INSERT INTO `wp_posts` VALUES('16', '2', '2018-04-10 10:21:01', '2018-04-10 10:21:01', '', 'Caster.IO', '', 'inherit', 'open', 'closed', '', 'casterio', '', '', '2018-04-10 10:21:07', '2018-04-10 10:21:07', '', '0', 'http://casterarticles.wpengine.com/wp-content/uploads/2018/04/casterio.png', '0', 'attachment', 'image/png', '0');
INSERT INTO `wp_posts` VALUES('18', '2', '2018-04-10 10:22:27', '2018-04-10 10:22:27', '', 'Articles', '', 'publish', 'closed', 'closed', '', 'articles', '', '', '2018-04-10 08:30:32', '2018-04-10 13:30:32', '', '0', 'http://casterarticles.wpengine.com/?p=18', '1', 'nav_menu_item', '', '0');
INSERT INTO `wp_posts` VALUES('20', '2', '2018-04-10 08:22:40', '2018-04-10 13:22:40', '<p>Do you have a passion for writing about technical topics that surround Android, iOS, API\'s and Blockchain and more? Do you want to be part of a team of international industry leaders?</p>\n\n<p>Caster.IO is the destination for professional app developers to hone their skills and we\'re now expanding our offering from videos to articles and we\'re looking for folks just like you.</p>\n\n<h4>Current Open Positions</h4>\n\n<ul>\n<li><strong>Tutorial/Article Writer</strong> - Your job will be to hand craft the best articles in your domain area. These articles will include technical tutorials, how-to articles and pieces that help connect the dots for the rest of the technical world. </li>\n<li><strong>Video Producer</strong> - Your job will be to create high quality video tutorials and courses that are available on Caster.IO.</li>\n<li><strong>Technical Editor</strong> - Your job will be to review new articles for technical accuracy and technical flow.</li>\n</ul>\n\n<p>If any of these positions pique your interest, keep reading below for the benefits and how to apply.</p>\n\n<h3>Benefits</h3>\n\n<p>There are tons of reasons to join the Caster.IO team. Lets hop right into it -</p>\n\n<ul>\n<li><strong>Exposure</strong>: You\'ll be writing articles for a world-wide audience of developers, entrepreneurs and industry professionals. We promote each of our articles through our social channels as well as through our ever growing email list. You\'ll have a platform to communicate your vision in which you can stand on the should of giants. Becoming visible in the community is a major driver in the progression of your career and professional advancement. </li>\n<li><strong>Learn How to Write Better</strong> - During the writing process your article will go through a three-step process to refine and hone your article so that it\'s the best it can be. Our team consists of professional editors, best-selling authors and has decades of blogging and article experience. Step one is the tech edit - this is where your article will be verified for technical accuracy. Once updated and complete it will move onto a grammatical review and finally it will move into a final edit where all the i\'s are dotted and t\'s are crossed before its shipped.</li>\n<li><strong>Professional Writing Experience</strong> - After navigating the waters of the article writing process a few times and shipping your articles to tens of thousands of developer eyeballs you\'ll have professional experience that you can share on your resume, LinkedIn profile and more. This makes you a more lucrative and valuable resource to your company and any future employers. </li>\n<li><strong>Mastery</strong> - Writing articles requires that you know your stuff. During your research for your article you\'ll learn more about the subject matter than you can imagine - making you a subject matter expert on the topic.</li>\n<li><strong>More Opportunity</strong> - Being part of the team offers many benefits, such as - freelancing opportunities, access to our team via our internal slack group, professional training from existing pros, book writing opportunities and much more. </li>\n<li><strong>Access to Caster.IO</strong> - As a member of the team you\'ll have access to all of Caster.IO\'s content for free. </li>\n<li><strong>Make $$$</strong> - AHH YES... that\'s right. You\'ll get paid for each article that is shipped on the site. At the beginning of each month we pay our team members for each article shipped. </li>\n</ul>\n\n<h3>Areas of Expertise</h3>\n\n<p>We have various areas of expertise that you can write for. When applying, please select which areas of expertise you\'re interested in.</p>\n\n<p>The applicants which demonstrate the strongest capabilities will be asked to submit a demo article which will showcase their talents as a writer, editor or video producer.</p>\n\n<ul>\n<li><strong>Android</strong>: Tutorials and articles on all things Android. From the SDK to how-to articles on the platform, this is your place. Tutorials can be written in Java or Kotlin.</li>\n<li><strong>Kotlin</strong>: Tutorials and topics on all things Kotlin related. If your topic is purely Kotlin without focus on any other area (such as Android), this is for you. Examples - Kotlin language tutorials, server side dev with Kotlin, co-routines, etc.</li>\n<li><strong>iOS</strong>: All articles relating to iOS development that are written in either Obj-C and/or Swift.</li>\n<li><strong>React Native</strong>: Articles that surround anything related to React Native, written in JavaScript.</li>\n<li><strong>Flutter</strong>: This is for you if you\'re someone who is writing a lot about Flutter. Articles are written in Dart.</li>\n<li><strong>Blockchain</strong>: Is the blockchain your thing? Ethereum? Bitcoin? Neo? Solidity? Etc? This is where all blockchain articles will live.</li>\n<li><strong>General Articles</strong>: Where everything else goes. Could be topics related to software, engineering, management/etc.</li>\n</ul>\n\n<h3>Your Role, Explained</h3>\n\n<p>Each role has its own specific set of duties and requirements - below you\'ll find more info on what they are.</p>\n\n<h4>Tutorial/Article Writer</h4>\n\n<p>In this role your main duty will be to write articles for Caster.IO. You will work with a technical editor, grammatical editor and final review editor(s) to publish content that is very technical in nature. Most articles will be either tutorials, how-to articles, deep-dives into technology or tips and tricks to implement a given tool or library, SDK, platform, etc.</p>\n\n<p>You will research, write, obtain necessary images and diagrams and code necessary to ship your article. During the process you will inevitably learn a massive amount about the subject matter in which you are working within - and this is a good thing!</p>\n\n<p>You will be paid for each article you ship. 💸</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You consider yourself an advanced developer</li>\n<li>You should be comfortable deconstructing complex topics into an easy to understand text based format for easy digestion of the reader. </li>\n<li>You should be comfortable learning a new technology on your own in order to explain it in detail. </li>\n<li>You should be self-directed and should be able to solve technical issues yourself. While you will be part of a a great team, the team is also very busy solving problems themselves.You should research everything possible and go to all lengths to solve any of your own issues. </li>\n<li>You should be able to take direction and run with it with minimal to no supervision.</li>\n<li>You should be a great writer and you should be fluent in the English language. </li>\n<li>You are expected to write on tutorial once every two months (you can write more if you\'d like though).</li>\n</ul>\n\n<h4>Video Producer</h4>\n\n<p>In this role you will be producing video content for Caster.IO. You can see samples <a href=\"https://caster.io/courses\">here</a>. You will be teaching a course on a technical implementation of any given programming language, SDK, etc. Courses are varied in length but are best taught in a series of lessons that teach one thing per lesson. You will receive deep training into how to produce videos that are engaging, succinct and to the point. <strong>Video courses are much more lucrative than writing articles</strong> but they do take substantially more effort and time to create.</p>\n\n<p>⚡️Our video producers get paid every month - a true passive income. Once the course is complete, the course continues to generate revenue for the life of the course. You get paid every month for this. ⚡️</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You are an advanced/senior level developer </li>\n<li>You are self directed - once you have your topic and your deadline you will need to meet those deadlines with minimal supervision. </li>\n<li>You are comfortable explaining and deconstructing content into a digestable format. </li>\n<li>You are expected to ship at least two courses in the first year, negotiable after that.</li>\n</ul>\n\n<p>Preferred, but not Required:</p>\n\n<ul>\n<li>You speak at conferences, meet-ups or user group meeting(s) </li>\n<li>You have written articles before (for Caster.IO, yourself or for any other publisher)</li>\n</ul>\n\n<h4>Technical Editor</h4>\n\n<p>In this role you\'ll be responsible for ensuring that the technical articles are top notch and high quality. You\'ll be the one finding the inconsistencies in the articles, the hard to follow portions and most importantly the bugs in the articles. Without your help, the tutorials would be inaccurate and not reliable - you\'re vital to the success of the team.</p>\n\n<p>In this position you\'ll learn more than you can imagine as you be be diving into each article to learn it and validate that it does what it claims it will do. You\'ll also be listed as part of our team on our team page. You\'re a key contributor to the entire process of the article. You will be paid for each article that you tech-edit.</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You are extremely detail oriented</li>\n<li>You keep on top of technology trends by reading a lot of technical books, blogs, articles and watch videos to keep up to date. </li>\n<li>You are fluent in English</li>\n<li>You have great communication skills </li>\n<li>You will be editing one to two articles a month</li>\n</ul>\n\n<h3>How to Apply</h3>\n\n<p>To apply, fill out the form below. Be detailed in the responses that you have and provide as much suitable experience as possible.</p>\n\n<p>Once submitted we will reach out to you within the next 3-5 days regarding the status of your application. If we move to the next step, we will move to the next step of the article process - a demo article to verify your abilities as a writer.</p>\n\n<p>[gravityform id=\"1\" title=\"false\" description=\"false\"]</p>\n', 'Write for Us', '', 'publish', 'closed', 'closed', '', 'write-for-us', '', '', '2018-04-10 11:12:28', '2018-04-10 16:12:28', '', '0', 'http://casterarticles.wpengine.com/?page_id=20', '0', 'page', '', '0');
INSERT INTO `wp_posts` VALUES('21', '2', '2018-04-10 11:11:44', '2018-04-10 16:11:44', '<p>Do you have a passion for writing about technical topics that surround Android, iOS, API\'s and Blockchain and more? Do you want to be part of a team of international industry leaders?</p>\n\n<p>Caster.IO is the destination for professional app developers to hone their skills and we\'re now expanding our offering from videos to articles and we\'re looking for folks just like you.</p>\n\n<h4>Current Open Positions</h4>\n\n<ul>\n<li><strong>Tutorial/Article Writer</strong> - Your job will be to hand craft the best articles in your domain area. These articles will include technical tutorials, how-to articles and pieces that help connect the dots for the rest of the technical world. </li>\n<li><strong>Video Producer</strong> - Your job will be to create high quality video tutorials and courses that are available on Caster.IO.</li>\n<li><strong>Technical Editor</strong> - Your job will be to review new articles for technical accuracy and technical flow.</li>\n</ul>\n\n<p>If any of these positions pique your interest, keep reading below for the benefits and how to apply.</p>\n\n<h3>Benefits</h3>\n\n<p>There are tons of reasons to join the Caster.IO team. Lets hop right into it -</p>\n\n<ul>\n<li><strong>Exposure</strong>: You\'ll be writing articles for a world-wide audience of developers, entrepreneurs and industry professionals. We promote each of our articles through our social channels as well as through our ever growing email list. You\'ll have a platform to communicate your vision in which you can stand on the should of giants. Becoming visible in the community is a major driver in the progression of your career and professional advancement. </li>\n<li><strong>Learn How to Write Better</strong> - During the writing process your article will go through a three-step process to refine and hone your article so that it\'s the best it can be. Our team consists of professional editors, best-selling authors and has decades of blogging and article experience. Step one is the tech edit - this is where your article will be verified for technical accuracy. Once updated and complete it will move onto a grammatical review and finally it will move into a final edit where all the i\'s are dotted and t\'s are crossed before its shipped.</li>\n<li><strong>Professional Writing Experience</strong> - After navigating the waters of the article writing process a few times and shipping your articles to tens of thousands of developer eyeballs you\'ll have professional experience that you can share on your resume, LinkedIn profile and more. This makes you a more lucrative and valuable resource to your company and any future employers. </li>\n<li><strong>Mastery</strong> - Writing articles requires that you know your stuff. During your research for your article you\'ll learn more about the subject matter than you can imagine - making you a subject matter expert on the topic.</li>\n<li><strong>More Opportunity</strong> - Being part of the team offers many benefits, such as - freelancing opportunities, access to our team via our internal slack group, professional training from existing pros, book writing opportunities and much more. </li>\n<li><strong>Access to Caster.IO</strong> - As a member of the team you\'ll have access to all of Caster.IO\'s content for free. </li>\n<li><strong>Make $$$</strong> - AHH YES... that\'s right. You\'ll get paid for each article that is shipped on the site. At the beginning of each month we pay our team members for each article shipped. </li>\n</ul>\n\n<h3>Areas of Expertise</h3>\n\n<p>We have various areas of expertise that you can write for. When applying, please select which areas of expertise you\'re interested in.</p>\n\n<p>The applicants which demonstrate the strongest capabilities will be asked to submit a demo article which will showcase their talents as a writer, editor or video producer.</p>\n\n<ul>\n<li><strong>Android</strong>: Tutorials and articles on all things Android. From the SDK to how-to articles on the platform, this is your place. Tutorials can be written in Java or Kotlin.</li>\n<li><strong>Kotlin</strong>: Tutorials and topics on all things Kotlin related. If your topic is purely Kotlin without focus on any other area (such as Android), this is for you. Examples - Kotlin language tutorials, server side dev with Kotlin, co-routines, etc.</li>\n<li><strong>iOS</strong>: All articles relating to iOS development that are written in either Obj-C and/or Swift.</li>\n<li><strong>React Native</strong>: Articles that surround anything related to React Native, written in JavaScript.</li>\n<li><strong>Flutter</strong>: This is for you if you\'re someone who is writing a lot about Flutter. Articles are written in Dart.</li>\n<li><strong>Blockchain</strong>: Is the blockchain your thing? Ethereum? Bitcoin? Neo? Solidity? Etc? This is where all blockchain articles will live.</li>\n<li><strong>General Articles</strong>: Where everything else goes. Could be topics related to software, engineering, management/etc.</li>\n</ul>\n\n<h3>Your Role, Explained</h3>\n\n<p>Each role has its own specific set of duties and requirements - below you\'ll find more info on what they are.</p>\n\n<h4>Tutorial/Article Writer</h4>\n\n<p>In this role your main duty will be to write articles for Caster.IO. You will work with a technical editor, grammatical editor and final review editor(s) to publish content that is very technical in nature. Most articles will be either tutorials, how-to articles, deep-dives into technology or tips and tricks to implement a given tool or library, SDK, platform, etc.</p>\n\n<p>You will research, write, obtain necessary images and diagrams and code necessary to ship your article. During the process you will inevitably learn a massive amount about the subject matter in which you are working within - and this is a good thing!</p>\n\n<p>You will be paid for each article you ship. 💸</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You consider yourself an advanced developer</li>\n<li>You should be comfortable deconstructing complex topics into an easy to understand text based format for easy digestion of the reader. </li>\n<li>You should be comfortable learning a new technology on your own in order to explain it in detail. </li>\n<li>You should be self-directed and should be able to solve technical issues yourself. While you will be part of a a great team, the team is also very busy solving problems themselves.You should research everything possible and go to all lengths to solve any of your own issues. </li>\n<li>You should be able to take direction and run with it with minimal to no supervision.</li>\n<li>You should be a great writer and you should be fluent in the English language. </li>\n<li>You are expected to write on tutorial once every two months (you can write more if you\'d like though).</li>\n</ul>\n\n<h4>Video Producer</h4>\n\n<p>In this role you will be producing video content for Caster.IO. You can see samples <a href=\"https://caster.io/courses\">here</a>. You will be teaching a course on a technical implementation of any given programming language, SDK, etc. Courses are varied in length but are best taught in a series of lessons that teach one thing per lesson. You will receive deep training into how to produce videos that are engaging, succinct and to the point. <strong>Video courses are much more lucrative than writing articles</strong> but they do take substantially more effort and time to create.</p>\n\n<p>⚡️Our video producers get paid every month - a true passive income. Once the course is complete, the course continues to generate revenue for the life of the course. You get paid every month for this. ⚡️</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You are an advanced/senior level developer </li>\n<li>You are self directed - once you have your topic and your deadline you will need to meet those deadlines with minimal supervision. </li>\n<li>You are comfortable explaining and deconstructing content into a digestable format. </li>\n<li>You are expected to ship at least two courses in the first year, negotiable after that.</li>\n</ul>\n\n<p>Preferred, but not Required:</p>\n\n<ul>\n<li>You speak at conferences, meet-ups or user group meeting(s) </li>\n<li>You have written articles before (for Caster.IO, yourself or for any other publisher)</li>\n</ul>\n\n<h4>Technical Editor</h4>\n\n<p>In this role you\'ll be responsible for ensuring that the technical articles are top notch and high quality. You\'ll be the one finding the inconsistencies in the articles, the hard to follow portions and most importantly the bugs in the articles. Without your help, the tutorials would be inaccurate and not reliable - you\'re vital to the success of the team.</p>\n\n<p>In this position you\'ll learn more than you can imagine as you be be diving into each article to learn it and validate that it does what it claims it will do. You\'ll also be listed as part of our team on our team page. You\'re a key contributor to the entire process of the article. You will be paid for each article that you tech-edit.</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>You are extremely detail oriented</li>\n<li>You keep on top of technology trends by reading a lot of technical books, blogs, articles and watch videos to keep up to date. </li>\n<li>You are fluent in English</li>\n<li>You have great communication skills </li>\n<li>You will be editing one to two articles a month</li>\n</ul>\n\n<h2>How to Apply</h2>\n\n<p>To apply, fill out the form below. Be detailed in the responses that you have and provide as much suitable experience as possible.</p>\n\n<p>Once submitted we will reach out to you within the next 3-5 days regarding the status of your application. If we move to the next step, we will move to the next step of the article process - a demo article to verify your abilities as a writer. \n[gravityform id=\"1\" title=\"false\" description=\"false\"]</p>\n', 'Write for Us', '', 'inherit', 'closed', 'closed', '', '20-autosave-v1', '', '', '2018-04-10 11:11:44', '2018-04-10 16:11:44', '', '20', 'http://articles.caster.io/uncategorized/20-autosave-v1/', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES('22', '2', '2018-04-10 08:30:32', '2018-04-10 13:30:32', ' ', '', '', 'publish', 'closed', 'closed', '', '22', '', '', '2018-04-10 08:30:32', '2018-04-10 13:30:32', '', '0', 'http://articles.caster.io/?p=22', '3', 'nav_menu_item', '', '0');
INSERT INTO `wp_posts` VALUES('25', '3', '2018-04-10 11:21:47', '2018-04-10 16:21:47', '<p>When writing an Ethereum Solidity contract you\'ll run across various times when you need to secure various method calls (<code>transactions</code>). For example, let\'s say your contract accepts payments via its <code>payable</code> method.</p>\n\n<p>Test 123.</p>\n\n<p>Foo bar.</p>\n\n<pre><code>pragma solidity ^0.4.18\n\ncontract SomethingImportant {\n\n}\n</code></pre>\n\n<p>This is some kotlin</p>\n\n<pre><code>val firstName: String? = null\nclass Foo {\n  init {\n    Timber.d(\"Hello\")\n  }\n}\n</code></pre>\n\n<h4>Hello There</h4>\n', 'Secure a Ethereum Solidity Smart Contract with a Modifier', '', 'publish', 'open', 'open', '', 'securing-a-solidity-smart-contract', '', '', '2018-04-10 13:18:30', '2018-04-10 18:18:30', '', '0', 'http://articles.caster.io/?p=25', '0', 'post', '', '0');
INSERT INTO `wp_posts` VALUES('26', '3', '2018-04-10 11:24:08', '2018-04-10 16:24:08', '', 'Securing Solidity Contracts', '', 'inherit', 'open', 'closed', '', 'jason-blackeye-198848-unsplash', '', '', '2018-04-10 11:24:29', '2018-04-10 16:24:29', '', '25', 'http://articles.caster.io/wp-content/uploads/2018/04/jason-blackeye-198848-unsplash.jpg', '0', 'attachment', 'image/jpeg', '0');
INSERT INTO `wp_posts` VALUES('27', '3', '2018-04-11 03:57:29', '2018-04-11 08:57:29', '<p>When writing an Ethereum Solidity contract you\'ll run across various times when you need to secure various method calls (<code>transactions</code>). For example, let\'s say your contract accepts payments via its <code>payable</code> method.</p>\n\n<p>Test 123.</p>\n\n<p>Foo bar.</p>\n\n<pre><code>pragma solidity ^0.4.18\n\ncontract MyImportantContract {\n  modifier \n}\n</code></pre>\n\n<p>This is some kotlin</p>\n\n<pre><code>val firstName: String? = null\nclass Foo {\n  init {\n    Timber.d(\"Hello\")\n  }\n}\n</code></pre>\n\n<h4>Hello There</h4>\n', 'Secure a Ethereum Solidity Smart Contract with a Modifier', '', 'inherit', 'closed', 'closed', '', '25-autosave-v1', '', '', '2018-04-11 03:57:29', '2018-04-11 08:57:29', '', '25', 'http://articles.caster.io/uncategorized/25-autosave-v1/', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES('28', '3', '2018-04-10 12:35:44', '2018-04-10 17:35:44', '<p>TBD TBD</p>\n', 'Build a Simple Ethereum Address Resolver', '', 'publish', 'open', 'open', '', 'build-a-simple-ethereum-address-resolver', '', '', '2018-04-10 12:35:44', '2018-04-10 17:35:44', '', '0', 'http://articles.caster.io/?p=28', '0', 'post', '', '0');
INSERT INTO `wp_posts` VALUES('29', '3', '2018-04-10 12:35:12', '2018-04-10 17:35:12', '', 'john-towner-125992-unsplash', '', 'inherit', 'open', 'closed', '', 'john-towner-125992-unsplash', '', '', '2018-04-10 12:35:36', '2018-04-10 17:35:36', '', '28', 'http://articles.caster.io/wp-content/uploads/2018/04/john-towner-125992-unsplash.jpg', '0', 'attachment', 'image/jpeg', '0');
INSERT INTO `wp_posts` VALUES('32', '4', '2018-04-11 22:06:54', '2018-04-12 03:06:54', '<p>[caption id=\"attachment_33\" align=\"aligncenter\" width=\"800\"]<img src=\"http://articles.caster.io/wp-content/uploads/2018/04/1_7Pv2b1tDF7vp5kn1KfIivw.jpeg\" alt=\"Large seal. Or more likely a sea lion.\" width=\"800\" height=\"532\" class=\"size-full wp-image-33\" />[/caption]</p>\n\n<p>When calling a function which returns data, there is often the need to handle errors which might occur. This post details how to make use of Kotlin’s <a href=\"https://kotlinlang.org/docs/reference/sealed-classes.html\">sealed classes</a> to return one object which can represent the data you expected or an error.</p>\n\n<p>Let’s imagine we have a function which accepts some data as a parameter and returns us the parsed result. It relies on a regex to help with the parsing; given we don’t control the input, that regex might fail to match depending on the string provided to the function.</p>\n\n<pre><code>private fun parse(url: String): ParsedData {\n    val result = URL_PARSE_REGEX.find(url)\n\n    if (result == null) {\n        // What do we do here? Throw an exception? Return null?\n    }\n\n    val mimeType = result.groupValues[2]\n    val data = result.groupValues[4]\n\n    return ParsedData(data, mimeType)\n}\n\ndata class ParsedData(\n    val data: String,\n    val mimeType: String\n)\n</code></pre>\n\n<p>If the regex fails to match anything, <code>result</code> will be null.</p>\n\n<pre><code>if (result == null) {\n    // What do we do here? Throw an Exception? Return null?\n}\n</code></pre>\n\n<p>Note this code 👆. If during the parsing, we decide we can’t continue, we have to find a way to break out of the function.</p>\n\n<h2>Potential Solutions (Don\'t do these)</h2>\n\n<h4>Throw an Exception</h4>\n\n<p>We might decide one way to achieve this is to throw an <code>Exception</code>.</p>\n\n<pre><code>if (result == null) {        \n    throw IllegalArgumentException()\n}\n</code></pre>\n\n<p>However, forcing exception handling onto the caller of this function is pretty heavyweight. Even runtime exceptions are still a burden to handle, and not finding a match on a regex doesn’t sound all that <em>exceptional</em> so this probably isn’t the right fit.</p>\n\n<h4>Return null</h4>\n\n<p>We might decide instead to return null when the regex match fails.</p>\n\n<pre><code>if (result == null) {        \n    return null\n}\n</code></pre>\n\n<p>Now the caller of this function can perform a null check and use the value being null as an indication that the error flow happened. But we’d also have to define the function as returning <code>ParsedData?</code> now and we have no way of providing details as to what went wrong. All the caller knows is that <em>something</em> didn’t work.</p>\n\n<h4>Introduce a wrapper object</h4>\n\n<p>We could introduce a new class solely responsible for wrapping both the desired data or an error. Since in this scenario, <code>data</code> and <code>errorMessage</code> are mutually exclusive, we have to make both nullable.</p>\n\n<pre><code>class ResultWrapper (\n    val data: ParsedData? = null,\n    val errorMessage: String? = null\n)\n</code></pre>\n\n<p>We then interrogate the wrapper to determine if an error happened; in this case by checking if <code>result.errorMessage</code> is null or not. Even after determining an error didn’t happen, we still have the annoyance of our real data being nullable by necessity, so we have to force unwrap it using <code>!!</code>.</p>\n\n<pre><code>val result = parse(url)\n\nif (result.errorMessage != null) {\n    // error occurred - log error message etc... \n} else {\n    // happy path - use the data. But result.data is nullable 🙄\n    val mimeType = result.data!!.mimeType\n}\n</code></pre>\n\n<p>Using a wrapper object which might contain the data or an error is better than returning null or throwing an exception, but it is still a little clunky.</p>\n\n<h2>Better Solution (Do this)</h2>\n\n<h4>Sealed Class</h4>\n\n<blockquote>\n  <p>Sealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a limited set, but cannot have any other type.</p>\n</blockquote>\n\n<p>That definition of a sealed class fits very well with this scenario. We want to be able to return an object from a function which:</p>\n\n<ul>\n<li>Can represent the data we asked for, or</li>\n<li>Can represent some sort of error</li>\n</ul>\n\n<p>We don’t want to return just any type of object as we want some compile-time safety around what is returned. As with the basic wrapper approach outlined above, we can change the <code>parse</code> function so that it doesn’t return the <code>ParsedData</code> directly; this time it returns a <code>sealed class</code>.</p>\n\n<pre><code>sealed class ParseResult \n\ndata class Error(val errorMessage: String) : ParseResult()\n\ndata class ParsedData(\n    val data: String,\n    val mimeType: String) : ParseResult()\n</code></pre>\n\n<p>By defining a sealed class we can then start defining other classes which inherit from it. In the example above, we have declared both an <code>Error</code> class and the <code>ParsedData</code> class which holds the data we were trying to obtain. You could even go further and return many different types of error, each of which could have their own fields.</p>\n\n<p>We can modify the <code>parse</code> function now so that it:</p>\n\n<ul>\n<li>Declares <code>ParseResult</code> sealed class as its return type</li>\n<li>Returns <code>ParsedData</code> when the parsing succeeds</li>\n<li>Returns <code>Error</code> when the parsing fails  </li>\n</ul>\n\n<p>Our new <code>parse</code> function now looks like this 👇</p>\n\n<pre><code>private fun parse(url: String): ParseResult {\n    val result = URL_PARSE_REGEX.find(url)\n    if (result == null) {\n        return ParseResult.Error(\"No match found\")\n    }\n\n    val mimeType = result.groupValues[2]\n    val data = result.groupValues[4]\n\n    return ParseResult.ParsedData(data, mimeType)\n}\n</code></pre>\n\n<p>At this point, we haven’t gained much over the basic wrapper approach from before. But when we want to use the <code>ParseResult</code> object, that’s when we see the advantages.</p>\n\n<h4>Sealed Classes and when()</h4>\n\n<p>Sealed classes pair nicely with the <a href=\"https://kotlinlang.org/docs/reference/control-flow.html#when-expression\">when</a> expression. This is much like <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html\">Java’s Switch operator</a> except the Kotlin version automatically casts the value for you inside each of the when blocks.</p>\n\n<pre><code>val result = parse(url)\nwhen (result) {\n    is ParseResult.ParsedData -&gt; analyzeMimeType(result.mimeType)\n    is ParseResult.Error -&gt; log(result.errorMessage)\n}\n</code></pre>\n\n<p>There’s no need to cast to <code>ParsedData</code> before trying to access <code>mimeType</code>, and there’s no need to cast to <code>Error</code> before trying to access <code>errorMessage</code>. 🙏</p>\n\n<p>If you returned the result of the <code>when</code> expression, the compiler would then start highlighting any <code>ParseResult</code> subclasses that you haven’t handled; providing further compile time safety against forgetting to handle new types of the sealed class.</p>\n\n<h4>Sealed or Abstract</h4>\n\n<p>You could define <code>ParseResult</code> as <code>abstract</code> instead of <code>sealed</code> and you might be wondering why <code>sealed</code> is still better. While <code>abstract</code> would work in this example above, it would also allow something potentially undesirable.</p>\n\n<p>Along with the <code>ParsedData</code> and <code>Error</code> subclasses we’ve defined here, having <code>ParseResult</code> as <code>abstract</code> would also allow subclasses to be defined anywhere in the project.</p>\n\n<p>Whereas with a <code>sealed</code> class for <code>ParseResult</code> you have limited scope in which to define subclasses.</p>\n\n<blockquote>\n  <p>A sealed class can have subclasses, but all of them must be declared in the same file as the sealed class itself.</p>\n</blockquote>\n\n<p>This helps reduce bugs by ensuring all the different types of possible <code>ParseResult</code> have to be defined in the same class.</p>\n\n<h2>Conclusion</h2>\n\n<p>When calling a function which returns data, there is often the need to also handle errors which might occur. By using a Kotlin <code>sealed</code> class, you can purposefully restrict the types of data you can return from any given function; limiting the return types to different types of data or of one or more error types.</p>\n\n<p>The different classes returned can each hold completely different data from each other. And yet each distinct type can be handled elegantly when combined with Kotlin’s <code>when</code> expression.</p>\n\n<hr />\n\n<p><em>Image Attribution: Photo by Roger Brendhagen on <a href=\"https://unsplash.com/search/photos/seal?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></em></p>\n', 'Return Types Which Might Contain Data or an Error Using Kotlin Sealed Classes', '', 'draft', 'open', 'open', '', 'return-types-which-might-contain-data-or-an-error-using-kotlin-sealed-classes', '', '', '2018-04-11 22:49:48', '2018-04-12 03:49:48', '', '0', 'http://articles.caster.io/?p=32', '0', 'post', '', '0');
INSERT INTO `wp_posts` VALUES('33', '4', '2018-04-11 21:57:14', '2018-04-12 02:57:14', '', '1_7Pv2b1tDF7vp5kn1KfIivw', '', 'inherit', 'open', 'closed', '', '1_7pv2b1tdf7vp5kn1kfiivw', '', '', '2018-04-11 22:13:04', '2018-04-12 03:13:04', '', '32', 'http://articles.caster.io/wp-content/uploads/2018/04/1_7Pv2b1tDF7vp5kn1KfIivw.jpeg', '0', 'attachment', 'image/jpeg', '0');
INSERT INTO `wp_posts` VALUES('34', '2', '2018-05-10 16:36:32', '0000-00-00 00:00:00', '\n', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2018-05-10 16:36:32', '0000-00-00 00:00:00', '', '0', 'http://articles.caster.io/?p=34', '0', 'post', '', '0');
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
SET FOREIGN_KEY_CHECKS = 1;
SET UNIQUE_CHECKS = 1;
