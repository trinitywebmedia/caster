<?php
/* ATTENTION: IF YOU ARE READING THIS WHILE TRYING TO LOAD IMPORTBUDDY TO RESTORE YOUR SITE: Your server is not properly handling PHP files. Contact your hosting provider to fix this. Notify them that PHP files are not executing and instead are outputting their code contents. */


/* <!-- ImportBuddy Restore & Migration Tool - iThemes.com
 * @version 8.2.3.6 (downloaded 2018-05-10T22:22:57+00:00)
 * @author iThemes.com
 * @developer Dustin Bolton
 * @created Feb 11, 2010
 *
 * #############################################################################################
 * #                                                                                           #
 * # THERE ARE NO USER-EDITABLE PORTIONS OF THIS FILE! DO NOT EDIT UNLESS DIRECTED BY SUPPORT! #
 * #                                                                                           #
 * #############################################################################################
 *
 */


define( 'PB_PASSWORD', 'dd6a1c9eef8d98725e59f9b913acdf82' ); // Update this portion with the hashed password to override a forgotten password.


$php_minimum = '5.1'; // User's PHP must be equal or newer to this version.
$ignore_not_writable = false; // Set to true to ignore is_writable() returning false on this directory. Useful for servers lying about the writable status of the directory.
//error_reporting( E_ALL );

if ( version_compare( PHP_VERSION, $php_minimum ) < 0 ) {
	die( 'ERROR #9013. See <a href="http://ithemes.com/codex/page/BackupBuddy:_Error_Codes#9013">this codex page for details</a>. Sorry! PHP version ' . $php_minimum . ' or newer is required for BackupBuddy to properly run. You are running PHP version ' . PHP_VERSION . '.' );
}

global $importbuddy_file;
$importbuddy_file = basename( __FILE__ ); // filename of importbuddy.php (or whatever it is named).
global $wp_version;
$wp_version = '4.4'; // Spoof a version for new wp-db class.
$abspath = rtrim( dirname( __FILE__ ), '\\/' ) . '/';

define( 'ABSPATH', $abspath );
define( 'WP_CONTENT_DIR', $abspath . 'wp-content' );
define( 'PB_BB_VERSION', '8.2.3.6 (downloaded 2018-05-10T22:22:57+00:00)' );
define('DB_CHARSET', 'utf8'); // Default only. Overriden later if needed. Used by wpdb class.
define('DB_COLLATE', ''); // Default only. Overriden alter if needed. Used by wpdb class.

@date_default_timezone_set( @date_default_timezone_get() ); // Prevents date() from throwing a warning if the default timezone has not been set. Run prior to any file_exists()!


// Try to put an index.htm file in place during import to help prevent against file browsing. Only do if not a defined step OR a non-numeric defined step OR a defined numeric step < 5.
if (
	( ! isset( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && !is_numeric( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && is_numeric( $_GET['step'] ) && ( $_GET['step'] < 5 ) )
	)
{
	if ( ( ! file_exists( ABSPATH . 'index.htm' ) ) && ( ! file_exists( ABSPATH . 'index.php' ) ) ) {
		@file_put_contents( ABSPATH . 'index.htm', '<html></html>' );
	}
}


// If inside BB install then die. Else unpack importbuddy if needed.
if ( @file_exists( @dirname( @dirname( __FILE__ ) ) . '/backupbuddy.php' ) ) {
	die( '<html>Access Denied</html>' );
}


// Unpack importbuddy files into importbuddy directory. Does this when importbuddy directory does not exist OR if now request GET or POST params are sent (aka the first page only).
if ( ! file_exists( ABSPATH . 'importbuddy' ) || ( ( count( $_GET ) == 0 ) && ( count( $_POST ) == 0 ) ) ) {
	
	$importbuddy_contents = '';
	if ( false === ( $importbuddy_contents = file_get_contents( __FILE__ ) ) ) {
		die( 'Error #8494834: Unable to read in importbuddy file `' . __FILE__ . '` for validating.' );
	}
	
	// Make sure this file is complete and contains all the packed data to the end before proceeding.
	if ( false === strpos( $importbuddy_contents, '###PACKDATA' . ',END' ) ) { // Concat here so we don't false positive on this line when searching.
		die( 'ERROR: It appears your `' . __FILE__ . '` file is incomplete.  It may have not finished downloading or uploading completely.  Please try re-downloading the script from within BackupBuddy in WordPress (do not just copy the file from the plugin directory) and re-uploading it.' );
	}
	
	// Make sure no leading whitespace. Some servers introduce this to the beginning, breaking authentication due to output before auth headers being sent.
	if ( ltrim( $importbuddy_contents ) !== $importbuddy_contents ) {
		if ( false === ( file_put_contents( __FILE__, ltrim( $importbuddy_contents ) ) ) ) {
			die( 'Error #84394834: Your importbuddy file `' . __FILE__ . '` file contains leading whitespace/newslines and the script could not re-write it to fix it for you (possibly due to permissions). Please re-download it or manually edit to make sure it begins with <?php with no spaces or newlines/enters before it.' );
		} else { // Re-wrote file.
			sleep( 1 );
			die( '<meta http-equiv="refresh" content="1">Refreshing... Removed unexpected leading whitespace found in importbuddy.php file.' );
		}
	}
	
	$importbuddy_contents = '';
	
	$unpack_importbuddy = true;
	if ( file_exists( ABSPATH . 'importbuddy' ) ) { // ImportBuddy directory already exists. We may need to re-unpack it if this file has been updated since.
		$signature = @file_get_contents( ABSPATH . 'importbuddy/_signature.php' );
		$signature = trim( str_replace( '<?php die(); ?>', '', $signature ) );
		if ( md5( PB_BB_VERSION . PB_PASSWORD ) != $signature ) { // Signature mismatch. We will need to delete and unpack again to update.
			//echo '<!-- unlinking existing importbuddy directory. -->'; 5.1.0.10: Broke causing headers already sent error due to auth.
			recursive_unlink( ABSPATH . 'importbuddy' );
		} else {
			$unpack_importbuddy = false;
		}
	}
	if ( true === $unpack_importbuddy ) {
		unpack_importbuddy( $ignore_not_writable );
		@file_put_contents( ABSPATH . 'importbuddy/_signature.php', '<?php die(); ?>' . md5( PB_BB_VERSION . PB_PASSWORD ) ); // Create a hash of this ImportBuddy version & password. On accessing importbuddy.php's authentication page all importbuddy files will be freshly unpacked if the importbuddy.php version and/or password mismatches to allow users to just replace importbuddy.php to upgrade ImportBuddy or password.
	}
}


// Database wrapper.
require_once( ABSPATH . 'importbuddy/classes/wp-db.php' );
global $wpdb;
//$wpdb = new wpdb();


if ( isset( $_GET['api'] ) && ( $_GET['api'] != '' ) ) { // API ACCESS
	if ( $_GET['api'] == 'ping' ) {
		die( 'pong' );
	} else {
		die( 'Unknown API access action.' );
	}
} else { // NORMAL ACCESS.
	if ( !file_exists( ABSPATH . 'importbuddy/init.php' ) ) {
		die( 'Error: Unable to find file `' . ABSPATH . 'importbuddy/init.php`. Make sure that you downloaded this script from within BackupBuddy. Copying importbuddy files from inside the plugin directory is not sufficient as many file additions are made on demand.' );
	} else {
		require_once( ABSPATH . 'importbuddy/init.php' );
	}
}


function recursive_unlink( $path ) {
  return is_file($path)?
    @unlink($path):
array_map('recursive_unlink',glob($path.'/*'))==@rmdir($path);
}


/**
*	unpack_importbuddy()
*
*	Unpacks required files encoded in importbuddy.php into stand-alone files.
*
*	@return		null
*/
function unpack_importbuddy( $ignore_not_writable = false ) {
	if ( ( ! is_writable( ABSPATH ) ) && ( false === $ignore_not_writable ) ) {
		echo 'Error #224834. This directory, `' . ABSPATH . '`, is not write enabled according to the server. Please verify proper write permissions to continue. If this persists, contact your web hosting provider and tell them that is_writable("' . ABSPATH . '") returns FALSE in PHP.';
		die();
	} else {
		$unpack_file = '';
		
		$handle = @fopen( __FILE__, 'r' );
		if ( $handle ) {
			while ( ( $buffer = fgets( $handle ) ) !== false ) {
				if ( substr( $buffer, 0, 11 ) == '###PACKDATA' ) {
					$packdata_commands = explode( ',', trim( $buffer ) );
					array_shift( $packdata_commands );
					
					if ( $packdata_commands[0] == 'BEGIN' ) {
						// Start packed data.
					} elseif ( $packdata_commands[0] == 'FILE_START' ) {
						$unpack_file = $packdata_commands[2];
					} elseif ( $packdata_commands[0] == 'FILE_END' ) {
						$unpack_file = '';
					} elseif ( $packdata_commands[0] == 'END' ) {
						return;
					}
				} else {
					if ( $unpack_file != '' ) {
						if ( !is_dir( dirname( ABSPATH . $unpack_file ) ) ) {
							$mkdir_result = mkdir( dirname( ABSPATH . $unpack_file ), 0777, true ); // second param makes recursive.
							if ( $mkdir_result === false ) {
								echo 'Error #54455. Unable to mkdir `' . dirname( ABSPATH . $unpack_file ) . '`<br>';
							}
						}
						$fileput_result = file_put_contents( ABSPATH . $unpack_file, base64_decode( $buffer ) );
						if ( $fileput_result === false ) {
							echo 'Error #65656. Unable to put file contents to `' . ABSPATH . $unpack_file . '`.<br>';
						}
					}
				}
			}
			if ( !feof( $handle ) ) {
				echo "Error: unexpected fgets() fail.<br>";
			}
			fclose( $handle );
		} else {
			echo 'ERROR #54455: Unable to open `' . __FILE__ . '` file for reading in packaged data.<br>';
		}
	}
}
die();
?>
<?php /*
###PACKDATA,BEGIN
###PACKDATA,FILE_START,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess

###PACKDATA,FILE_END,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.html,importbuddy/index.html
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.html,importbuddy/index.html
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.php,importbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.php,importbuddy/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init.php,importbuddy/init.php
PD9waHAKLyoqCiAqCiAqCVBsdWdpbiBOYW1lOiBJbXBvcnRCdWRkeQogKglQbHVnaW4gVVJJOiBodHRwOi8vaXRoZW1lcy5jb20vCiAqCURlc2NyaXB0aW9uOiBCYWNrdXBCdWRkeSBJbXBvcnRlcgogKglAc2luY2UgMS4wLjIKICoJQGF1dGhvciBEdXN0aW4gQm9sdG9uCiAqCiAqCUluc3RhbGxhdGlvbjoKICogCiAqCTEuIERvd25sb2FkIGFuZCB1bnppcCB0aGUgbGF0ZXN0IHJlbGVhc2UgemlwIGZpbGUuCiAqCTIuIElmIHlvdSB1c2UgdGhlIFdvcmRQcmVzcyBwbHVnaW4gdXBsb2FkZXIgdG8gaW5zdGFsbCB0aGlzIHBsdWdpbiBza2lwIHRvIHN0ZXAgNC4KICoJMy4gVXBsb2FkIHRoZSBlbnRpcmUgcGx1Z2luIGRpcmVjdG9yeSB0byB5b3VyIGAvd3AtY29udGVudC9wbHVnaW5zL2AgZGlyZWN0b3J5LgogKgk0LiBBY3RpdmF0ZSB0aGUgcGx1Z2luIHRocm91Z2ggdGhlICdQbHVnaW5zJyBtZW51IGluIFdvcmRQcmVzcyBBZG1pbmlzdHJhdGlvbi4KICogCiAqCVVzYWdlOgogKiAKICoJMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBwbHVnaW4gbWVudSBpbiB0aGUgV29yZHByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsLgogKgogKglOT1RFOiBETyBOT1QgRURJVCBUSElTIE9SIEFOWSBPVEhFUiBQTFVHSU4gRklMRVMuIE5PIFVTRVItQ09ORklHVVJBQkxFIE9QVElPTlMgV0lUSElOLgogKi8KCmVycm9yX3JlcG9ydGluZyggRV9FUlJPUiB8IEVfV0FSTklORyB8IEVfUEFSU0UgfCBFX05PVElDRSApOyAvLyBISUdICmRlZmluZSggJ1BCX1NUQU5EQUxPTkUnLCB0cnVlICk7CmRlZmluZSggJ1BCX0lNUE9SVEJVRERZJywgdHJ1ZSApOwoKJHBsdWdpbmJ1ZGR5X3NldHRpbmdzID0gYXJyYXkoCgkJCQknc2x1ZycJCQkJCQk9PgkJJ2JhY2t1cGJ1ZGR5JywKCQkJCSdwaHBfbWluaW11bScJCQkJPT4JCSc1LjInLAoJCQkJJ3NlcmllcycJCQkJCT0+CQknJywKCQkJCSdyZW1vdGVfYXBpJwkJCQk9PgkJJzAnLCAvLyBTZXQgdG8gMSBieSBzdGF0ZSBmb3IgZGVwbG95bWVudHMuCgkJCQknZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnCT0+CQlhcnJheSgpLCAvLyBEZWZhdWx0IHN0YXRlIHRvIG92ZXJyaWRlIHRoZSBtYWluIGRlZmF1bHRzLiBHb29kIGZvciBhdXRvbWF0aW5nIGltcG9ydHMuIEFwcGxpZWQgb3ZlciBkZWZhdWx0cyBkdXJpbmcgY29uc3RydWN0aW9uIG9mIHJlc3RvcmUgY2xhc3MuCgkJCQknZGVmYXVsdF9vcHRpb25zJwkJCT0+CQlhcnJheSgKCQkJCQkJCQkJCQkJCQknYmJfdmVyc2lvbicJCQkJPT4JUEJfQkJfVkVSU0lPTiwJLy8gQkIgdmVyc2lvbiB0byBiZSBmaWxsZWQgaW4gb24gZG93bmxvYWQuCgkJCQkJCQkJCQkJCQkJJ2JhY2t1cF9kaXJlY3RvcnknCQkJPT4JJycsCgkJCQkJCQkJCQkJCQkJJ2xvZ19sZXZlbCcJCQkJCT0+CTAsIC8vIE5vIGxvbmdlciB1c2luZyB0aGlzIG1ldGhvZCBmb3IgaGFuZGxpbmcgbG9nZ2luZy4gc3RhdHVzKCkgbWV0aG9kIGFsd2F5cyBsb2dzIGFsbCBpZiBpbXBvcnRidWRkeS4KCQkJCQkJCQkJCQkJCSksCgkJCQknbW9kdWxlcycJCQkJCT0+CQlhcnJheSgKCQkJCQkJCQkJCQkJCQkndXBkYXRlcicJCQkJPT4JZmFsc2UsCQkJCQkJLy8gTG9hZCBQbHVnaW5CdWRkeSBhdXRvbWF0aWMgdXBncmFkZXMuCgkJCQkJCQkJCQkJCQkJJ2ZpbGVzeXN0ZW0nCQkJPT4JdHJ1ZSwJCQkJCQkvLyBGaWxlIHN5c3RlbSBoZWxwZXIgbWV0aG9kcy4KCQkJCQkJCQkJCQkJCQknZm9ybWF0JwkJCQk9Pgl0cnVlLAkJCQkJCS8vIFRleHQgLyBkYXRhIGZvcm1hdHRpbmcgaGVscGVyIG1ldGhvZHMuCgkJCQkJCQkJCQkJCQkpCgkJCSk7CgoKCi8vICRzZXR0aW5ncyBpcyBleHBlY3RlZCB0byBiZSBwb3B1bGF0ZWQgcHJpb3IgdG8gaW5jbHVkaW5nIFBsdWdpbkJ1ZGR5IGZyYW1ld29yay4gRG8gbm90IGVkaXQgYmVsb3cuCnJlcXVpcmUoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL3BsdWdpbmJ1ZGR5L19wbHVnaW5idWRkeS5waHAnICk7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init.php,importbuddy/init.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWQoKTsKCi8vICoqKioqKioqKiogQUNUSU9OUyAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIERBU0hCT0FSRCAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIFBBR0VTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIExJQlJBUklFUyAmIENMQVNTRVMgKGFkbWluKSAqKioqKioqKioqCnJlcXVpcmVfb25jZSggJ2NsYXNzZXMvY29yZS5waHAnICk7CgpyZXF1aXJlX29uY2UoICdjbGFzc2VzL2ltcG9ydC5waHAnICk7CnBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10gPSBuZXcgcGJfYmFja3VwYnVkZHlfaW1wb3J0KCk7CgoKLy8gKioqKioqKioqKiBPVEhFUiAoYWRtaW4pICoqKioqKioqKioKCgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
PD9waHAKaWYgKCAhIGNsYXNzX2V4aXN0cyggJ2JhY2t1cGJ1ZGR5X2NvcmUnICkgKSB7CglyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL2NvcmUucGhwJyApOwp9CnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jbGFzc2VzL2F1dGgucGhwJyApOwoKLy8gSWYgdmVyaWZpY2F0aW9uIGNvZGUgcGFzc2VkIHRoZW4gYXV0aGVudGljYXRlIGVhcmx5LgppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGlzcGxheV9tb2RlJyApID09ICdlbWJlZCcgKSB7CglBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7Cn0KCmdsb2JhbCAkaW1wb3J0YnVkZHlfZmlsZTsKJGltcG9ydF9zZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGltcG9ydGJ1ZGR5X2ZpbGUgKTsKCgovLyBDcmVhdGUgU1RBVEUgZmlsZSBmcm9tIElOSSBmaWxlIChpZiBleGlzdHMpLgovKgppZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LScgLiAkaW1wb3J0X3NlcmlhbCAuICcuaW5pJyApICkgewoJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdQb3NzaWJsZSBpbXBvcnRidWRkeSAuaW5pIGZpbGUgZm9yIGF1dG8tbG9hZGluZyBzZXR0aW5ncyBmb3VuZCBhdCBgJyAuIEFCU1BBVEggLiAnaW1wb3J0YnVkZHktJyAuICRpbXBvcnRfc2VyaWFsIC4gJy5pbmknIC4gJ2AuJyApOwoJJGluaSA9IHBhcnNlX2luaV9maWxlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LScgLiAkaW1wb3J0X3NlcmlhbCAuICcuaW5pJywgdHJ1ZSApOwoJCgllY2hvICc8YnI+PGJyPjxicj48YnI+PHByZT4nOwoJcHJpbnRfciggJGluaSApOwoJZWNobyAnPC9wcmU+JzsKCWlmICggaXNzZXQoICRpbmlbJ3R5cGUnXSApICkgeyAvLyBJZiB0eXBlIGlzIHNldCB0aGVuIGFzc3VtZSBpdCBtYXkgYmUgYSB2YWxpZCBpbmkgZmlsZSBmb3IgaW1wb3J0YnVkZHkgYW5kIHVzZSBpdC4KCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NvbmZpcm1lZCBpbXBvcnRidWRkeSAuaW5pIGZpbGUgZm9yIGF1dG8tbG9hZGluZyBzZXR0aW5ncyBmb3VuZC4nICk7CgkJCgkJJG92ZXJyaWRlX3N0YXRlX2ZpbGUgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LScgLiAkaW1wb3J0X3NlcmlhbCAuICctc3RhdGUucGhwJzsKCQlpZiAoIGZpbGVfZXhpc3RzKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApICkgewoJCQlAdW5saW5rKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApOwoJCX0KCQlpZiAoIGZhbHNlID09PSBmaWxlX3B1dF9jb250ZW50cyggJG92ZXJyaWRlX3N0YXRlX2ZpbGUsICI8P3BocCBkaWUoJ0FjY2VzcyBEZW5pZWQuJyk7IC8vIDwhLS0gPz5cbiIgLiBiYXNlNjRfZW5jb2RlKCBzZXJpYWxpemUoICRpbmkgKSApICkgKSB7CgkJCS8vcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM0ODkzNDgzNDogVW5hYmxlIHRvIHdyaXRlIHN0YXRlIGZpbGUgYCcgLiAkb3ZlcnJpZGVfc3RhdGVfZmlsZSAuICdgIGZyb20gaW5pIGRhdGEuIENoZWNrIHBlcm1pc3Npb25zLicgKTsKCQl9Cgl9Cn0KKi8KCgppZiAoICcnICE9ICRpbXBvcnRfc2VyaWFsICkgeyAvLyBpbXBvcnRidWRkeSBoYXMgYSBzZXJpYWwuIExvb2sgZm9yIGEgZGVmYXVsdCBzdGF0ZSBmaWxlIHRoYXQgbWF0Y2hlcy4KCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snbG9nX3NlcmlhbCddID0gJGltcG9ydF9zZXJpYWw7CglwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOwoJCglpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LScgLiAkaW1wb3J0X3NlcmlhbCAuICctc3RhdGUucGhwJyApICkgeyAvLyBEZWZhdWx0IHN0YXRlIGV4aXN0cy4KCQkKCQkvLyBJZiBhbiBvdmVycmlkaW5nIHN0YXRlIGZpbGUgZXhpc3RzIHRoZW4gbG9hZCBpdCBvdmVyIHRoZSBjdXJyZW50IHN0YXRlLgoJCSRvdmVycmlkZV9zdGF0ZV9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydF9zZXJpYWwgLiAnLXN0YXRlLnBocCc7CgkJaWYgKCBmaWxlX2V4aXN0cyggJG92ZXJyaWRlX3N0YXRlX2ZpbGUgKSApIHsKCQkJJHN0YXRlZGF0YSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApOwoJCQkvLyBTa2lwIGZpcnN0IGxpbmUuCgkJCSRzZWNvbmRfbGluZV9wb3MgPSBzdHJwb3MoICRzdGF0ZWRhdGEsICJcbiIgKSArIDE7CgkJCSRzdGF0ZWRhdGEgPSBzdWJzdHIoICRzdGF0ZWRhdGEsICRzZWNvbmRfbGluZV9wb3MgKTsKCQkJLy8gRGVjb2RlIGJhY2sgaW50byBhbiBhcnJheS4KCQkJJHN0YXRlZGF0YSA9IGpzb25fZGVjb2RlKCBiYXNlNjRfZGVjb2RlKCAkc3RhdGVkYXRhICksIHRydWUgKTsKCQkJaWYgKCBpc19hcnJheSggJHN0YXRlZGF0YSApICkgeyAvLyBWYWxpZCBjb250ZW50LgoJCQkJLy8gTm9ybWFsaXplIFVSTHM6CgkJCQlpZiAoIGlzc2V0KCAkc3RhdGVkYXRhWydzaXRldXJsJ10gKSApIHsKCQkJCQkkc3RhdGVkYXRhWydzaXRldXJsJ10gPSBydHJpbSggJHN0YXRlZGF0YVsnc2l0ZXVybCddLCAnLycgKTsKCQkJCX0KCQkJCWlmICggaXNzZXQoICRzdGF0ZWRhdGFbJ2hvbWV1cmwnXSApICkgewoJCQkJCSRzdGF0ZWRhdGFbJ2hvbWV1cmwnXSA9IHJ0cmltKCAkc3RhdGVkYXRhWydob21ldXJsJ10sICcvJyApOwoJCQkJfQoJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdMb2FkZWQgZGVmYXVsdCBzdGF0ZSBvdmVycmlkZSBzdGF0ZSBmaWxlIGRhdGEgYW5kIGdhdmUgaXQgcHJpb3JpdHkgb3ZlciBjdXJyZW50IHN0YXRlLiBGaWxlOiBgJyAuICRvdmVycmlkZV9zdGF0ZV9maWxlIC4gJ2AuJyApOwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkZWZhdWx0X3N0YXRlX292ZXJyaWRlcyddID0gJHN0YXRlZGF0YTsKCQkJCS8vcHJpbnRfciggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkZWZhdWx0X3N0YXRlX292ZXJyaWRlcyddICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOwoJCQl9IGVsc2UgewoJCQkJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnd2FybmluZycsICdEZWZhdWx0IHN0YXRlIG92ZXJ3cml0ZSBmaWxlIGZvdW5kIGJ1dCB1bmFibGUgdG8gYWNjZXNzIGl0LicgKTsKCQkJfQoJCX0KCQkKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnT3ZlcnJpZGUgc3RhdGUgZmlsZSBub3QgZm91bmQgYXQgYCcgLiAkb3ZlcnJpZGVfc3RhdGVfZmlsZSAuICdgLiBTa2lwcGluZy4nICk7Cgl9CgkKfQoKLy8gSGFuZGxlIEFQSSBjYWxscyBpZiBiYWNrdXBidWRkeV9hcGlfa2V5IGlzIHBvc3RlZC4gSWYgYW55dGhpbmcgZmFpbHMgc2VjdXJpdHkgY2hlY2tzIHByZXRlbmQgbm90aGluZyBhdCBhbGwgaGFwcGVuZWQuCmlmICggJycgIT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnYmFja3VwYnVkZHlfYXBpX2tleScgKSApIHsgLy8gUmVtb3RlIEFQSSBhY2Nlc3MuCglpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlbW90ZV9hcGknXVsna2V5cyddICkgJiYgKCBjb3VudCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZW1vdGVfYXBpJ11bJ2tleXMnXSApID4gMCApICkgeyAvLyBSZW1vdGUgQVBJIGVuYWJsZWQgYW5kIDEgb3IgbW9yZSBrZXlzIGRlZmluZWQuCgkJaW5jbHVkZSggJ2NsYXNzZXMvcmVtb3RlX2FwaS5waHAnICk7CgkJYmFja3VwYnVkZHlfcmVtb3RlX2FwaTo6bG9jYWxDYWxsKCAkc2VjdXJlID0gdHJ1ZSwgJGltcG9ydGJ1ZGR5ID0gdHJ1ZSApOwoJCWRpZSgpOwoJfQp9CgppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGlzcGxheV9tb2RlJyApID09ICdlbWJlZCcgKSB7CglwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2Rpc3BsYXlfbW9kZSddID0gJ2VtYmVkJzsKCXBiX2JhY2t1cGJ1ZGR5OjpzYXZlKCk7Cn0KCi8vICoqKioqKioqKiogQUNUSU9OUyAoZ2xvYmFsKSAqKioqKioqKioqCgoKCi8vICoqKioqKioqKiogQUpBWCAoZ2xvYmFsKSAqKioqKioqKioqCgoKCi8vICoqKioqKioqKiogQ1JPTiAoZ2xvYmFsKSAqKioqKioqKioqCgoKCi8vICoqKioqKioqKiogRklMVEVSUyAoZ2xvYmFsKSAqKioqKioqKioqCgoKCi8vICoqKioqKioqKiogV0lER0VUUyAoZ2xvYmFsKSAqKioqKioqKioqCgoKCj8+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
PD9waHAKCgoKLy8gKioqKioqKioqKiBBQ1RJT05TIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBTSE9SVENPREVTIChwdWJsaWMpICoqKioqKioqKioKCgoK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt

###PACKDATA,FILE_END,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
ICogV2Vic2l0ZTogaHR0cDovL2l0aGVtZXMuY29tCiAqCiAqIEluc3RhbGxhdGlvbjoKICogCiAqIDEuIERvd25sb2FkIGFuZCB1bnppcCB0aGUgbGF0ZXN0IHJlbGVhc2UgemlwIGZpbGUKICogMi4gSWYgeW91IHVzZSB0aGUgV29yZFByZXNzIHBsdWdpbiB1cGxvYWRlciB0byBpbnN0YWxsIHRoaXMgcGx1Z2luIHNraXAgdG8gc3RlcCA0LgogKiAzLiBVcGxvYWQgdGhlIGVudGlyZSBwbHVnaW4gZGlyZWN0b3J5IHRvIHlvdXIgYC93cC1jb250ZW50L3BsdWdpbnMvYCBkaXJlY3RvcnkKICogNC4gQWN0aXZhdGUgdGhlIHBsdWdpbiB0aHJvdWdoIHRoZSAnUGx1Z2lucycgbWVudSBpbiBXb3JkUHJlc3MgQWRtaW5pc3RyYXRpb24KICogCiAqIFVzYWdlOgogKiAKICogMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBtZW51IGZvciB0aGlzIHBsdWdpbiBpbiB0aGUgV29yZHByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsCiAqIDIuIFNlbGVjdCAnR2V0dGluZyBTdGFydGVkJyBmb3IgaW5zdHJ1Y3Rpb25zIGFuZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLgogKg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
OyBEZWZhdWx0IHZhbHVlcyBjYW4gYmUgc2VlbiBpbjogaW1wb3J0YnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCAob3IgYmFja3VwYnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCkgaW4gdGhlIF9fY29uc3RydWN0KCkgZnVuY3Rpb24sIHdoZXJlICR0aGlzLT5fc3RhdGUgaXMgZmlyc3Qgc2V0LgoKdHlwZSA9IHJlc3RvcmUKYXJjaGl2ZSA9IGJhY2t1cC1iYWNrdXBidWRkeS1YWFhYWFhYWFhYWC56aXAKc2l0ZXVybCA9IGh0dHA6Ly9maW5hbHVybC5jb20KaG9tZXVybCA9IGh0dHA6Ly9maW5hbHVybC5jb20KcmVzdG9yZUZpbGVzID0gdHJ1ZQpyZXN0b3JlRGF0YWJhc2UgPSB0cnVlCm1pZ3JhdGVIdGFjY2VzcyA9IHRydWUKCjsgQm90aCBvZiB0aGVzZSBtdXN0IGJlIHRydWUgd2hlbiB1c2luZyAuaW5pIGZpbGUuCmluaW1vZGUgPSB0cnVlCmF1dG9BZHZhbmNlID0gdHJ1ZQoKW2RhdGFiYXNlU2V0dGluZ3NdCnNlcnZlciA9IGxvY2FsaG9zdApkYXRhYmFzZSA9IGRhdGFiYXNlX25hbWUKdXNlcm5hbWUgPSBkYXRhYmFzZV91c2VyCnBhc3N3b3JkID0gZGF0YWJhc2VfcGFzc3dvcmQKcHJlZml4ID0gd3BfCnJlbmFtZVByZWZpeCA9IHRydWUKd2lwZVByZWZpeCA9IGZhbHNlCndpcGVEYXRhYmFzZSA9IGZhbHNlCgpbY2xlYW51cF0KZGVsZXRlQXJjaGl2ZSA9IGZhbHNlCmRlbGV0ZVRlbXBGaWxlcyA9IHRydWUKZGVsZXRlSW1wb3J0QnVkZHkgPSBmYWxzZQpzZXRfYmxvZ19wdWJsaWMgPSAKZGVsZXRlSW1wb3J0QnVkZHlEaXJlY3RvcnkgPSB0cnVlCmRlbGV0ZUltcG9ydExvZyA9IHRydWUK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
PD9waHAKY2xhc3MgQXV0aCB7CgkKCWNvbnN0IE1BWF9MT0dJTl9BVFRFTVBUU19BTExPV0VEID0gNDsgLy8gTWF4aW11bSBudW1iZXIgb2YgaW52YWxpZCBsb2dpbiBhdHRlbXB0cyBiZWZvcmUgbG9ja2luZyBpbXBvcnRidWRkeS4KCWNvbnN0IFJFU0VUX0RFRkFVTFRTX09OX0lOVkFMSURfTE9HSU4gPSBmYWxzZTsgLy8gV2hldGhlciBvciBub3QgcmVzZXQgYWxsIHNldHRpbmdzL29wdGlvbnMgYmFjayB0byBkZWZhdWx0cyBvbiBsb2dpbiBmYWlsdXJlLgoJY29uc3QgQ09PS0lFX0VYUElSQVRJT04gPSA4NjQwMDsgLy8gTnVtYmVyIG9mIHNlY29uZHMgYW4gaW1wb3J0YnVkZHkgY29va2llIGlzIHZhbGlkIGZvci4KCXByaXZhdGUgc3RhdGljICRfYXV0aGVudGljYXRlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIHVzZXIgaXMgdmFsaWRseSBhdXRoZW50aWNhdGVkIG9yIG5vdC4KCXByaXZhdGUgc3RhdGljICRfY2hlY2tlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIGNoZWNrKCkgaGFzIGJlZW4gcnVuIHlldC4KCQoJCgkKCS8qIGNoZWNrKCkKCSAqCgkgKiBDaGVjayBhdXRoZW50aWNhdGlvbiBiYXNlZCBvbiBmb3JtIGRhdGEgc3VibWl0dGVkLiBUaGlzIG9ubHkgbmVlZHMgdG8gYmUgcnVuIG9uY2UuIFVzZSBpc19hdXRoZW50aWNhdGVkKCkgdG8gZGV0ZXJtaW5lIGF1dGggc3RhdHVzLgoJICoKCSAqIEBwYXJhbQlmb3JjZV9jaGVjawkJYm9vbAlJZiB0cnVlIHRoZW4gd2lsbCByZS1jaGVjayBldmVuIGlmIGNoZWNrKCkgaGFzIGFscmVhZHkgYmVlbiBydW4gdGhpcyBzZXNzaW9uLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjaGVjayggJGZvcmNlX2NoZWNrID0gZmFsc2UgKSB7CgkJCgkJaWYgKCAoIHRydWUgPT09IHNlbGY6OiRfY2hlY2tlZCApICYmICggJGZvcmNlX2NoZWNrID09PSBmYWxzZSApICkgeyAvLyBTa2lwIGNoZWNraW5nIGlmIGFscmVhZHkgc2tpcHBlZCB1bmxlc3MgZm9yY2luZy4KCQkJcmV0dXJuIHNlbGY6OmlzX2F1dGhlbnRpY2F0ZWQoKTsKCQl9CgkJCgkJJGxvZ2luX2F0dGVtcHRfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvX2xvZ2luX2F0dGVtcHRzLnBocCc7CgkJJGxvZ2luX2F0dGVtcHRzID0gMTsKCQlpZiAoIGZpbGVfZXhpc3RzKCAkbG9naW5fYXR0ZW1wdF9maWxlICkgKSB7CgkJCSRsb2dpbl9hdHRlbXB0cyA9IEBmaWxlX2dldF9jb250ZW50cyggJGxvZ2luX2F0dGVtcHRfZmlsZSApOwoJCX0KCQlpZiAoIGZhbHNlICE9PSAkbG9naW5fYXR0ZW1wdHMgKSB7CgkJCSRsb2dpbl9hdHRlbXB0cyA9IHRyaW0oIHN0cl9yZXBsYWNlKCAnPD9waHAgZGllKCk7ID8+JywgJycsICRsb2dpbl9hdHRlbXB0cyApICk7CgkJCWlmICggJGxvZ2luX2F0dGVtcHRzID4gc2VsZjo6TUFYX0xPR0lOX0FUVEVNUFRTX0FMTE9XRUQgKSB7CgkJCQlkaWUoICdBY2Nlc3MgRGVuaWVkLiBNYXhpbXVtIGxvZ2luIGF0dGVtcHRzIGV4Y2VlZGVkLiBZb3UgbXVzdCBkZWxldGUgdGhlIGZpbGUgIl9sb2dpbl9hdHRlbXB0cy5waHAiIGluIHRoZSBpbXBvcnRidWRkeSBkaXJlY3Rvcnkgb24geW91ciBzZXJ2ZXIgdG8gdW5sb2NrIHRoaXMgSW1wb3J0QnVkZHkgdG8gYWxsb3cgaXQgdG8gY29udGludWUuJyApOwoJCQl9CgkJfQoJCQoJCSRhY3R1YWxfcGFzc19oYXNoID0gUEJfUEFTU1dPUkQ7CgkJaWYgKCAoICcjUEFTU1dPUkQjJyA9PSAkYWN0dWFsX3Bhc3NfaGFzaCApIHx8ICggJycgPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSApIHsgZGllKCAnRXJyb3IgIzg0NTc4NDU5NzQ1LiBBIHBhc3N3b3JkIG11c3QgYmUgc2V0IHRvIGFjY2VzcyBJbXBvcnRCdWRkeS4gUGxlYXNlIGRvd25sb2FkIGEgZnJlc2ggY29weSBhZnRlciBjb25maWd1cmluZyB5b3VyIEltcG9ydEJ1ZGR5IHBhc3N3b3JkLicgKTsgfQoJCQoJCWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGFzc3dvcmQnICkgIT0gJycgKSB7CgkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBtZDUoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICk7CgkJfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgewoJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gbWQ1KCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3N3b3JkJyApICk7CgkJfSBlbHNlIHsKCQkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3YnICkgIT0gJycgKSB7IC8vIEhhc2ggc3VibWl0dGVkIGJ5IG1hZ2ljIG1pZ3JhdGlvbi4KCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3YnICk7CgkJCX0gZWxzZSB7IC8vIE5vcm1hbCBmb3JtIHN1Ym1pdHRlZCBoYXNoLgoJCQkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgIT0gJycgKSB7CgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3NfaGFzaCcgKTsKCQkJCX0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGJfYmFja3VwYnVkZHlfcGFzc19oYXNoJyApICE9ICcnICkgewoJCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYl9iYWNrdXBidWRkeV9wYXNzX2hhc2gnICk7CgkJCQl9IGVsc2UgewoJCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSAnJzsKCQkJCX0KCQkJfQoJCX0KCQkKCQlpZiAoICRzdXBwbGllZF9wYXNzX2hhc2ggPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSB7CgkJCXNlbGY6OiRfYXV0aGVudGljYXRlZCA9IHRydWU7CgkJCXNldGNvb2tpZSggJ2ltcG9ydGJ1ZGR5X2xvZ2luJywgbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApLCAoIHRpbWUoKSsgc2VsZjo6Q09PS0lFX0VYUElSQVRJT04gKSApOwoJCX0gZWxzZWlmICggaXNzZXQoICRfQ09PS0lFWydpbXBvcnRidWRkeV9sb2dpbiddICkgJiYgKCAkX0NPT0tJRVsnaW1wb3J0YnVkZHlfbG9naW4nXSAhPSAnJyApICYmICggJF9DT09LSUVbJ2ltcG9ydGJ1ZGR5X2xvZ2luJ10gPT0gbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApICkgKSB7CgkJCXNlbGY6OiRfYXV0aGVudGljYXRlZCA9IHRydWU7CgkJCXNldGNvb2tpZSggJ2ltcG9ydGJ1ZGR5X2xvZ2luJywgbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApLCAoIHRpbWUoKSArIHNlbGY6OkNPT0tJRV9FWFBJUkFUSU9OICkgKTsKCQl9IGVsc2UgeyAvLyBJbmNvcnJlY3QgaGFzaC4gUmVzZXQgc2V0dGluZ3MgJiB0cmFjayBhdHRlbXB0cy4KCQkJaWYgKCAnJyAhPSAkc3VwcGxpZWRfcGFzc19oYXNoICkgeyAvLyBEb250IGNvdW50IGJsYW5rIGhhc2ggYXMgYW4gYXR0ZW1wdC4KCQkJCWlmICggdHJ1ZSA9PT0gc2VsZjo6UkVTRVRfREVGQVVMVFNfT05fSU5WQUxJRF9MT0dJTiApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6cmVzZXRfZGVmYXVsdHMoKTsKCQkJCX0KCQkJCWlmICggZmFsc2UgIT09ICRsb2dpbl9hdHRlbXB0cyApIHsKCQkJCQlnbG9iYWwgJHBiX2xvZ2luX2F0dGVtcHRzOwoJCQkJCSRwYl9sb2dpbl9hdHRlbXB0cyA9ICRsb2dpbl9hdHRlbXB0czsKCQkJCQlAZmlsZV9wdXRfY29udGVudHMoICRsb2dpbl9hdHRlbXB0X2ZpbGUsICc8P3BocCBkaWUoKTsgPz4nIC4gKCAkbG9naW5fYXR0ZW1wdHMgKyAxICkgKTsKCQkJCX0KCQkJfQoJCX0KCQkKCQlzZWxmOjokX2NoZWNrZWQgPSB0cnVlOwoJCQoJCXJldHVybiBzZWxmOjokX2F1dGhlbnRpY2F0ZWQ7CgkJCgl9IC8vIEVuZCBjaGVjaygpLgoJCgkKCQoJLyogaXNfYXV0aGVudGljYXRlZCgpCgkgKgoJICogRGV0ZXJtaW5lIHdoZXRoZXIgdXNlciBpcyBmdWxseSBhdXRoZW50aWNhdGVkIG9yIG5vdC4KCSAqCgkgKiBAcmV0dXJuCQlib29sCQlUcnVlIGlmIGZ1bGx5IGF1dGhlbnRpY2F0ZWQsIG90aGVyd2lzZSBmYWxzZS4KCSAqCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNfYXV0aGVudGljYXRlZCgpIHsKCQkKCQlyZXR1cm4gc2VsZjo6JF9hdXRoZW50aWNhdGVkOwoJCQoJfSAvLyBFbmQgYXV0aGVudGljYXRlZCgpLgoJCgkKCQoJLyogcmVxdWlyZV9hdXRoZW50aWNhdGlvbigpCgkgKgoJICogUmVxdWlyZXMgdmFsaWQgYXV0aGVudGljYXRpb24gdG8gYWxsb3cgcHJvY2VlZGluZy4gZGllKCkgaWYgbm90IGxvZ2dlZCBpbi4KCSAqCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmVxdWlyZV9hdXRoZW50aWNhdGlvbigpIHsKCQkKCQkvLyBDaGVjayBpZiBwcmV2aW91c2x5IGF1dGhlZCBhbHJlYWR5IHRoaXMgc2Vzc2lvbi4KCQlpZiAoIHRydWUgPT09IHNlbGY6OmlzX2F1dGhlbnRpY2F0ZWQoKSApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCXNlbGY6OmNoZWNrKCk7CgkJaWYgKCB0cnVlID09PSBzZWxmOjppc19hdXRoZW50aWNhdGVkKCkgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCWRpZSggJ0FjY2VzcyBEZW5pZWQuIFlvdSBtdXN0IGxvZyBpbiBmaXJzdC4gUGxlYXNlIHJldHVybiB0byB0aGUgPGEgaHJlZj0iaW1wb3J0YnVkZHkucGhwIj5pbXBvcnRidWRkeS5waHAgaG9tZXBhZ2U8L2E+IGF1dGhlbnRpY2F0ZS4nICk7CgkJfQoJCQoJfSAvLyBFbmQgcmVxdWlyZV9hdXRob3JpemF0aW9uKCk7CgkKfSAvLyBFbmQgY2xhc3MuCgoK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db_NEW.php,importbuddy/classes/wp-db_NEW.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db_NEW.php,importbuddy/classes/wp-db_NEW.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db_OLD.php,importbuddy/classes/wp-db_OLD.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db_OLD.php,importbuddy/classes/wp-db_OLD.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
PD9waHAKY2xhc3MgcGJfYmFja3VwYnVkZHlfYWpheCBleHRlbmRzIHBiX2JhY2t1cGJ1ZGR5X2FqYXhjb3JlIHsKfQ==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
LyogTWFrZSBjbGlja3MgcGFzcy10aHJvdWdoICovCiNucHJvZ3Jlc3MgewogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9CgojbnByb2dyZXNzIC5iYXIgewogIGJhY2tncm91bmQ6ICMyOWQ7CgogIHBvc2l0aW9uOiBmaXhlZDsKICB6LWluZGV4OiA3NTsKICB0b3A6IDQ4cHg7CiAgbGVmdDogMDsKCiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiA0cHg7Cn0KCi8qIEZhbmN5IGJsdXIgZWZmZWN0ICovCiNucHJvZ3Jlc3MgLnBlZyB7Cgp9CgovKiBSZW1vdmUgdGhlc2UgdG8gZ2V0IHJpZCBvZiB0aGUgc3Bpbm5lciAqLwojbnByb2dyZXNzIC5zcGlubmVyIHsKICBkaXNwbGF5OiBibG9jazsKICBwb3NpdGlvbjogZml4ZWQ7CiAgei1pbmRleDogMTAzMTsKICB0b3A6IDY1cHg7CiAgcmlnaHQ6IDE1cHg7Cn0KCiNucHJvZ3Jlc3MgLnNwaW5uZXItaWNvbiB7CiAgd2lkdGg6IDQwcHg7CiAgaGVpZ2h0OiA0MHB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CgogIGJvcmRlcjogc29saWQgNHB4IHRyYW5zcGFyZW50OwogIGJvcmRlci10b3AtY29sb3I6ICMyOWQ7CiAgYm9yZGVyLWxlZnQtY29sb3I6ICMyOWQ7CiAgYm9yZGVyLXJhZGl1czogNTAlOwoKICAtd2Via2l0LWFuaW1hdGlvbjogbnByb2dyZXNzLXNwaW5uZXIgNDAwbXMgbGluZWFyIGluZmluaXRlOwogICAgICAgICAgYW5pbWF0aW9uOiBucHJvZ3Jlc3Mtc3Bpbm5lciA0MDBtcyBsaW5lYXIgaW5maW5pdGU7Cn0KCkAtd2Via2l0LWtleWZyYW1lcyBucHJvZ3Jlc3Mtc3Bpbm5lciB7CiAgMCUgICB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH0KICAxMDAlIHsgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9Cn0KCkBrZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXIgewogIDAlICAgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQogIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9Cn0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css

###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
R0lGODlhBgAHALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAGAAcAAAQVEAFFVUrD0HvF4RfCEYGVFAeFaFUEADs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
R0lGODlhBwAGALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAHAAYAAAQWEKU5kaETqEKHUgcxGZ8SJEL5IccXAQA7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAfCAIAAACgQJBPAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAsSAAALEgHS3X78AAAAIXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyA0LjDqJid1AAAAFnRFWHRDcmVhdGlvbiBUaW1lADEwLzI0LzA4KQ6r+wAAAClJREFUeJxjfPv2LQMSYPn//z8yn4kBFaDzqa0eXZ5U9QMtT6l5tFYPADsXLPcJwrwLAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAeCAYAAADkftS9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAACF0RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgNC4w6iYndQAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMS8xNy8wONpsdXEAAAAlSURBVHicY/z///9/BjTAhC7AwMDAwIJFIXbBoaJ9qLhz+IUSAIMMOibeSzRBAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXsKCQlpZiAoIGpRdWVyeSgnI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmcnKS5pcygnOnZpc2libGUnKSApIHsKCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLnJlcGxhY2VXaXRoKAoJCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfYmxhbmthbGVydCcpLmh0bWwoKS5yZXBsYWNlKCAnI1RJVExFIycsICdQSFAgVGltZW91dCBvciBGYXRhbCBFcnJvciBPY2N1cnJlZCcgKS5yZXBsYWNlKCAnI01FU1NBR0UjJywgJ1RoZSBwYWdlIGRpZCBub3QgZmluaXNoIGxvYWRpbmcgYXMgZXhwZWN0ZWQuICBUaGUgbW9zdCBjb21tb24gY2F1c2UgZm9yIHRoaXMgaXMgdGhlIFBIUCBwcm9jZXNzIHRha2luZyBtb3JlIHRpbWUgdGhhbiBpdCBoYXMgYmVlbiBhbGxvd2VkIGJ5IHlvdXIgaG9zdCAocGhwLmluaSBzZXR0aW5nIDxpPm1heF9leGVjdXRpb25fdGltZTwvaT4pLiBJZiBhIFBIUCBlcnJvciBpcyBkaXNwbGF5ZWQgYWJvdmUgdGhpcyBjYW4gYWxzbyBjYXVzZSB0aGlzIGVycm9yLicgKQoJCQkpOwoJCX0KCX0pOwp9KTsKCmZ1bmN0aW9uIGxvYWRUb29sdGlwcygpIHsKCWpRdWVyeSgnLnBsdWdpbmJ1ZGR5X3RpcCcpLnRvb2x0aXAoewoJCXRyYWNrOiB0cnVlLAoJCWRlbGF5OiAwLAoJCXNob3dVUkw6IGZhbHNlLAoJCXNob3dCb2R5OiAiIC0gIiwKCQlmYWRlOiAyNTAKCX0pOwp9CgpqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJbG9hZFRvb2x0aXBzKCk7CgkKCWpRdWVyeSgnLnRvZ2dsZScpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQlqUXVlcnkoICcjdG9nZ2xlLScgKyBqUXVlcnkodGhpcykuYXR0cignaWQnKSApLnNsaWRlVG9nZ2xlKCk7Cgl9KTsKCQoJalF1ZXJ5KCcub3B0aW9uX3RvZ2dsZScpLmNoYW5nZShmdW5jdGlvbihlKSB7CgkJaWYgKGpRdWVyeSh0aGlzKS5hdHRyKCdjaGVja2VkJykpIHsKCQkJalF1ZXJ5KCcuJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICsgJ190b2dnbGUnICkuc2xpZGVUb2dnbGUoKTsKCQl9IGVsc2UgewoJCQlqUXVlcnkoJy4nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKyAnX3RvZ2dsZScgKS5zbGlkZVRvZ2dsZSgpOwoJCX0KCX0pOwoJCgkKfSk7CgpmdW5jdGlvbiBiYWNrdXBidWRkeV9zYXZlTG9nQXNGaWxlKCkgewoJdmFyIHRleHRGaWxlQXNCbG9iID0gbmV3IEJsb2IoWyBqUXVlcnkoICcjYmFja3VwYnVkZHlfbWVzc2FnZXMnICkudGV4dCgpIF0sIHt0eXBlOid0ZXh0L3BsYWluJ30pOwoJdmFyIGZpbGVOYW1lVG9TYXZlQXMgPSAnaW1wb3J0YnVkZHkudHh0JzsKCgl2YXIgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwoJZG93bmxvYWRMaW5rLmRvd25sb2FkID0gZmlsZU5hbWVUb1NhdmVBczsKCWRvd25sb2FkTGluay5pbm5lckhUTUwgPSAiRG93bmxvYWQgRmlsZSI7Cglkb3dubG9hZExpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX25ldycpOyAvLyBTYWZhcmkgbG9hZHMgdGhpcyBsaW5rIGFzIGEgcGFnZSBpbnN0ZWFkIG9mIGRpcmVjdGx5IGRvd25sb2FkaW5nLgoJZG93bmxvYWRMaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCh0ZXh0RmlsZUFzQmxvYik7Cglkb3dubG9hZExpbmsub25jbGljayA9IGJhY2t1cGJ1ZGR5X2Rlc3Ryb3lDbGlja2VkRWxlbWVudDsKCWRvd25sb2FkTGluay5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZExpbmspOwoKCWRvd25sb2FkTGluay5jbGljaygpOwp9CgpmdW5jdGlvbiBiYWNrdXBidWRkeV9kZXN0cm95Q2xpY2tlZEVsZW1lbnQoZXZlbnQpIHsKICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZXZlbnQudGFyZ2V0KTsKfQ==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
KGZ1bmN0aW9uKCQpewogCiAgICAkLmZuLmV4dGVuZCh7IAogICAgICAgICAKICAgICAgICBsZWFuTW9kYWw6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKIAkJCQogCQkJdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7CiAJCQkKICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0gewogICAgICAgICAgICAgICAgdG9wOiAxMDAsCiAgICAgICAgICAgICAgICBvdmVybGF5OiAwLjUsCiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbjogbnVsbAogICAgICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIG92ZXJsYXkgPSAkKCI8ZGl2IGlkPSdsZWFuX292ZXJsYXknPjwvZGl2PiIpOwogICAgICAgICAgICAKICAgICAgICAgICAgJCgiYm9keSIpLmFwcGVuZChvdmVybGF5KTsKICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgb3B0aW9ucyA9ICAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7CiAKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnM7CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljayhmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgCXZhciBtb2RhbF9pZCA9ICQodGhpcykuYXR0cigiaHJlZiIpOwoKCQkJCSQoIiNsZWFuX292ZXJsYXkiKS5jbGljayhmdW5jdGlvbigpIHsgCiAgICAgICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsKG1vZGFsX2lkKTsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICQoby5jbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24oKSB7IAogICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbChtb2RhbF9pZCk7ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgCQogICAgICAgICAgICAgIAl2YXIgbW9kYWxfaGVpZ2h0ID0gJChtb2RhbF9pZCkub3V0ZXJIZWlnaHQoZmFsc2UpOwogICAgICAgIAkgIAl2YXIgbW9kYWxfd2lkdGggPSAkKG1vZGFsX2lkKS5vdXRlcldpZHRoKGZhbHNlKTsKCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuY3NzKHsgJ2Rpc3BsYXknIDogJ2Jsb2NrJywgb3BhY2l0eSA6IDAgfSk7CgogICAgICAgIAkJJCgnI2xlYW5fb3ZlcmxheScpLmZhZGVUbygyMDAsby5vdmVybGF5KTsKCiAgICAgICAgCQkkKG1vZGFsX2lkKS5jc3MoeyAKICAgICAgICAJCQogICAgICAgIAkJCSdkaXNwbGF5JyA6ICdibG9jaycsCiAgICAgICAgCQkJJ3Bvc2l0aW9uJyA6ICdmaXhlZCcsCiAgICAgICAgCQkJJ29wYWNpdHknIDogMCwKICAgICAgICAJCQknei1pbmRleCc6IDExMDAwLAogICAgICAgIAkJCSdsZWZ0JyA6IDUwICsgJyUnLAogICAgICAgIAkJCSdtYXJnaW4tbGVmdCcgOiAtKG1vZGFsX3dpZHRoLzIpICsgInB4IiwKICAgICAgICAJCQkndG9wJyA6IG8udG9wICsgInB4IgogICAgICAgIAkJCiAgICAgICAgCQl9KTsKCiAgICAgICAgCQkkKG1vZGFsX2lkKS5mYWRlVG8oMjAwLDEpOwoKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIAl9KTsKICAgICAgICAgICAgIAogICAgICAgICAgICB9KTsKCgkJCWZ1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXsKCiAgICAgICAgCQkkKCIjbGVhbl9vdmVybGF5IikuZmFkZU91dCgyMDApOwoKICAgICAgICAJCSQobW9kYWxfaWQpLmNzcyh7ICdkaXNwbGF5JyA6ICdub25lJyB9KTsKCQkJCgkJCX0KICAgIAogICAgICAgIH0KICAgIH0pOwogICAgIAp9KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
LyogQ29weXJpZ2h0IChDKSAyMDEyIFN5bHZhaW4gSGFtZWwKUHJvamVjdDogaHR0cHM6Ly9naXRodWIuY29tL3JlZGhvdHNseS9zaW1wbGUtZXhwYW5kCk1JVCBMaWNlbmNlOiBodHRwczovL3Jhdy5naXRodWIuY29tL3JlZGhvdHNseS9zaW1wbGUtZXhwYW5kL21hc3Rlci9saWNlbmNlLW1pdC50eHQgKi8KKGZ1bmN0aW9uKCQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpcztlLmRlZmF1bHRzPXtoaWRlTW9kZToiZmFkZVRvZ2dsZSIsZGVmYXVsdFNlYXJjaE1vZGU6InBhcmVudCIsZGVmYXVsdFRhcmdldDoiLmNvbnRlbnQiLHRocm93T25NaXNzaW5nVGFyZ2V0OiEwLGtlZXBTdGF0ZUluQ29va2llOiExLGNvb2tpZU5hbWU6InNpbXBsZS1leHBhbmQifSxlLnNldHRpbmdzPXt9LCQuZXh0ZW5kKGUuc2V0dGluZ3MsZS5kZWZhdWx0cyksZS5maW5kTGV2ZWxPbmVEZWVwPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZS5maW5kKHQpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiEkKHRoaXMpLnBhcmVudHNVbnRpbChlLG4pLmxlbmd0aH0pfSxlLnNldEluaXRpYWxTdGF0ZT1mdW5jdGlvbih0LG4pe3ZhciByPWUucmVhZFN0YXRlKHQpO3I/KHQucmVtb3ZlQ2xhc3MoImNvbGxhcHNlZCIpLmFkZENsYXNzKCJleHBhbmRlZCIpLGUuc2hvdyhuKSk6KHQucmVtb3ZlQ2xhc3MoImV4cGFuZGVkIikuYWRkQ2xhc3MoImNvbGxhcHNlZCIpLGUuaGlkZShuKSl9LGUuaGlkZT1mdW5jdGlvbih0KXtlLnNldHRpbmdzLmhpZGVNb2RlPT09ImZhZGVUb2dnbGUiP3QuaGlkZSgpOmUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iYmFzaWMiJiZ0LmhpZGUoKX0sZS5zaG93PWZ1bmN0aW9uKHQpe2Uuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/dC5zaG93KCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyImJnQuc2hvdygpfSxlLmNoZWNrS2VlcFN0YXRlSW5Db29raWVQcmVjb25kaXRpb25zPWZ1bmN0aW9uKCl7aWYoZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSYmJC5jb29raWU9PT11bmRlZmluZWQpdGhyb3cgbmV3IEVycm9yKCJzaW1wbGUtZXhwYW5kOiBrZWVwU3RhdGVJbkNvb2tpZSBvcHRpb24gcmVxdWlyZXMgJC5jb29raWUgdG8gYmUgZGVmaW5lZC4iKX0sZS5yZWFkQ29va2llPWZ1bmN0aW9uKCl7dmFyIHQ9JC5jb29raWUoZS5zZXR0aW5ncy5jb29raWVOYW1lKTtyZXR1cm4gdD09PW51bGx8fHQ9PT0iIj97fTpKU09OLnBhcnNlKHQpfSxlLnJlYWRTdGF0ZT1mdW5jdGlvbih0KXtpZighZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSlyZXR1cm4hMTt2YXIgbj10LmF0dHIoIklkIik7aWYobj09PXVuZGVmaW5lZClyZXR1cm47dmFyIHI9ZS5yZWFkQ29va2llKCksaT1yW25dPT09ITB8fCExO3JldHVybiBpfSxlLnNhdmVTdGF0ZT1mdW5jdGlvbih0LG4pe2lmKCFlLnNldHRpbmdzLmtlZXBTdGF0ZUluQ29va2llKXJldHVybjt2YXIgcj10LmF0dHIoIklkIik7aWYocj09PXVuZGVmaW5lZClyZXR1cm47dmFyIGk9ZS5yZWFkQ29va2llKCk7aVtyXT1uLCQuY29va2llKGUuc2V0dGluZ3MuY29va2llTmFtZSxKU09OLnN0cmluZ2lmeShpKSx7cmF3OiEwLHBhdGg6d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSl9LGUudG9nZ2xlPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZS50b2dnbGVDc3ModCk7cmV0dXJuIGUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/bi5mYWRlVG9nZ2xlKDE1MCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyI/bi50b2dnbGUoKTokLmlzRnVuY3Rpb24oZS5zZXR0aW5ncy5oaWRlTW9kZSkmJmUuc2V0dGluZ3MuaGlkZU1vZGUodCxuLHIpLGUuc2F2ZVN0YXRlKHQsciksITF9LGUudG9nZ2xlQ3NzPWZ1bmN0aW9uKGUpe3JldHVybiBlLmhhc0NsYXNzKCJleHBhbmRlZCIpPyhlLnRvZ2dsZUNsYXNzKCJjb2xsYXBzZWQgZXhwYW5kZWQiKSwhMSk6KGUudG9nZ2xlQ2xhc3MoImV4cGFuZGVkIGNvbGxhcHNlZCIpLCEwKX0sZS5maW5kVGFyZ2V0cz1mdW5jdGlvbih0LG4scil7dmFyIGk9W107aWYobj09PSJhYnNvbHV0ZSIpaT0kKHIpO2Vsc2UgaWYobj09PSJyZWxhdGl2ZSIpaT1lLmZpbmRMZXZlbE9uZURlZXAodCxyLHIpO2Vsc2UgaWYobj09PSJwYXJlbnQiKXt2YXIgcz10LnBhcmVudCgpO2RvIGk9ZS5maW5kTGV2ZWxPbmVEZWVwKHMscixyKSxpLmxlbmd0aD09PTAmJihzPXMucGFyZW50KCkpO3doaWxlKGkubGVuZ3RoPT09MCYmcy5sZW5ndGghPT0wKX1yZXR1cm4gaX0sZS5hY3RpdmF0ZT1mdW5jdGlvbih0LG4peyQuZXh0ZW5kKGUuc2V0dGluZ3MsbiksZS5jaGVja0tlZXBTdGF0ZUluQ29va2llUHJlY29uZGl0aW9ucygpLHQuZWFjaChmdW5jdGlvbigpe3ZhciB0PSQodGhpcyksbj10LmF0dHIoImRhdGEtZXhwYW5kZXItdGFyZ2V0Iil8fGUuc2V0dGluZ3MuZGVmYXVsdFRhcmdldCxyPXQuYXR0cigiZGF0YS1leHBhbmRlci10YXJnZXQtc2VhcmNoIil8fGUuc2V0dGluZ3MuZGVmYXVsdFNlYXJjaE1vZGUsaT1lLmZpbmRUYXJnZXRzKHQscixuKTtpZihpLmxlbmd0aD09PTApe2lmKGUuc2V0dGluZ3MudGhyb3dPbk1pc3NpbmdUYXJnZXQpdGhyb3cic2ltcGxlLWV4cGFuZDogVGFyZ2V0cyBub3QgZm91bmQiO3JldHVybiB0aGlzfWUuc2V0SW5pdGlhbFN0YXRlKHQsaSksdC5jbGljayhmdW5jdGlvbigpe3JldHVybiBlLnRvZ2dsZSh0LGkpfSl9KX19d2luZG93LlNpbXBsZUV4cGFuZD1lLCQuZm4uc2ltcGxlZXhwYW5kPWZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBlO3JldHVybiBuLmFjdGl2YXRlKHRoaXMsdCksdGhpc319KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
alF1ZXJ5LmZuLnZpc2libGUgPSBmdW5jdGlvbigpIHsKCXJldHVybiB0aGlzLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7Cn07CgpqUXVlcnkuZm4uaW52aXNpYmxlID0gZnVuY3Rpb24oKSB7CglyZXR1cm4gdGhpcy5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7Cn07CgpqUXVlcnkuZm4udmlzaWJpbGl0eVRvZ2dsZSA9IGZ1bmN0aW9uKCkgewoJcmV0dXJuIHRoaXMuY3NzKCd2aXNpYmlsaXR5JywgZnVuY3Rpb24oaSwgdmlzaWJpbGl0eSkgewoJCXJldHVybiAodmlzaWJpbGl0eSA9PSAndmlzaWJsZScpID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7Cgl9KTsKfTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
LyohCiAqIGpRdWVyeSBVSSAxLjguMTIKICoKICogQ29weXJpZ2h0IDIwMTEsIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJCiAqLwooZnVuY3Rpb24oYyxqKXtmdW5jdGlvbiBrKGEpe3JldHVybiFjKGEpLnBhcmVudHMoKS5hbmRTZWxmKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGMuY3VyQ1NTKHRoaXMsInZpc2liaWxpdHkiKT09PSJoaWRkZW4ifHxjLmV4cHIuZmlsdGVycy5oaWRkZW4odGhpcyl9KS5sZW5ndGh9Yy51aT1jLnVpfHx7fTtpZighYy51aS52ZXJzaW9uKXtjLmV4dGVuZChjLnVpLHt2ZXJzaW9uOiIxLjguMTIiLGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTU1BTkQ6OTEsQ09NTUFORF9MRUZUOjkxLENPTU1BTkRfUklHSFQ6OTMsQ09OVFJPTDoxNyxERUxFVEU6NDYsRE9XTjo0MCxFTkQ6MzUsRU5URVI6MTMsRVNDQVBFOjI3LEhPTUU6MzYsSU5TRVJUOjQ1LExFRlQ6MzcsTUVOVTo5MyxOVU1QQURfQUREOjEwNyxOVU1QQURfREVDSU1BTDoxMTAsTlVNUEFEX0RJVklERToxMTEsTlVNUEFEX0VOVEVSOjEwOCxOVU1QQURfTVVMVElQTFk6MTA2LApOVU1QQURfU1VCVFJBQ1Q6MTA5LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU0hJRlQ6MTYsU1BBQ0U6MzIsVEFCOjksVVA6MzgsV0lORE9XUzo5MX19KTtjLmZuLmV4dGVuZCh7X2ZvY3VzOmMuZm4uZm9jdXMsZm9jdXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT0ibnVtYmVyIj90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjKGQpLmZvY3VzKCk7YiYmYi5jYWxsKGQpfSxhKX0pOnRoaXMuX2ZvY3VzLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sc2Nyb2xsUGFyZW50OmZ1bmN0aW9uKCl7dmFyIGE7YT1jLmJyb3dzZXIubXNpZSYmLyhzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKXx8L2Fic29sdXRlLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKT90aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4vKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8udGVzdChjLmN1ckNTUyh0aGlzLAoicG9zaXRpb24iLDEpKSYmLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApOnRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybi8oYXV0b3xzY3JvbGwpLy50ZXN0KGMuY3VyQ1NTKHRoaXMsIm92ZXJmbG93IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy15IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy14IiwxKSl9KS5lcSgwKTtyZXR1cm4vZml4ZWQvLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpfHwhYS5sZW5ndGg/Yyhkb2N1bWVudCk6YX0sekluZGV4OmZ1bmN0aW9uKGEpe2lmKGEhPT1qKXJldHVybiB0aGlzLmNzcygiekluZGV4IixhKTtpZih0aGlzLmxlbmd0aCl7YT1jKHRoaXNbMF0pO2Zvcih2YXIgYjthLmxlbmd0aCYmYVswXSE9PWRvY3VtZW50Oyl7Yj1hLmNzcygicG9zaXRpb24iKTsKaWYoYj09PSJhYnNvbHV0ZSJ8fGI9PT0icmVsYXRpdmUifHxiPT09ImZpeGVkIil7Yj1wYXJzZUludChhLmNzcygiekluZGV4IiksMTApO2lmKCFpc05hTihiKSYmYiE9PTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJpbmQoKGMuc3VwcG9ydC5zZWxlY3RzdGFydD8ic2VsZWN0c3RhcnQiOiJtb3VzZWRvd24iKSsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKX0pfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bmJpbmQoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7Yy5lYWNoKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGQoZixnLGwsbSl7Yy5lYWNoKGUsZnVuY3Rpb24oKXtnLT1wYXJzZUZsb2F0KGMuY3VyQ1NTKGYsInBhZGRpbmciK3RoaXMsdHJ1ZSkpfHwwO2lmKGwpZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLAoiYm9yZGVyIit0aGlzKyJXaWR0aCIsdHJ1ZSkpfHwwO2lmKG0pZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLCJtYXJnaW4iK3RoaXMsdHJ1ZSkpfHwwfSk7cmV0dXJuIGd9dmFyIGU9Yj09PSJXaWR0aCI/WyJMZWZ0IiwiUmlnaHQiXTpbIlRvcCIsIkJvdHRvbSJdLGg9Yi50b0xvd2VyQ2FzZSgpLGk9e2lubmVyV2lkdGg6Yy5mbi5pbm5lcldpZHRoLGlubmVySGVpZ2h0OmMuZm4uaW5uZXJIZWlnaHQsb3V0ZXJXaWR0aDpjLmZuLm91dGVyV2lkdGgsb3V0ZXJIZWlnaHQ6Yy5mbi5vdXRlckhlaWdodH07Yy5mblsiaW5uZXIiK2JdPWZ1bmN0aW9uKGYpe2lmKGY9PT1qKXJldHVybiBpWyJpbm5lciIrYl0uY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCxkKHRoaXMsZikrInB4Iil9KX07Yy5mblsib3V0ZXIiK2JdPWZ1bmN0aW9uKGYsZyl7aWYodHlwZW9mIGYhPT0ibnVtYmVyIilyZXR1cm4gaVsib3V0ZXIiK2JdLmNhbGwodGhpcyxmKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCwKZCh0aGlzLGYsdHJ1ZSxnKSsicHgiKX0pfX0pO2MuZXh0ZW5kKGMuZXhwclsiOiJdLHtkYXRhOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4hIWMuZGF0YShhLGRbM10pfSxmb2N1c2FibGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLGQ9Yy5hdHRyKGEsInRhYmluZGV4Iik7aWYoImFyZWEiPT09Yil7Yj1hLnBhcmVudE5vZGU7ZD1iLm5hbWU7aWYoIWEuaHJlZnx8IWR8fGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PSJtYXAiKXJldHVybiBmYWxzZTthPWMoImltZ1t1c2VtYXA9IyIrZCsiXSIpWzBdO3JldHVybiEhYSYmayhhKX1yZXR1cm4oL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KGIpPyFhLmRpc2FibGVkOiJhIj09Yj9hLmhyZWZ8fCFpc05hTihkKTohaXNOYU4oZCkpJiZrKGEpfSx0YWJiYWJsZTpmdW5jdGlvbihhKXt2YXIgYj1jLmF0dHIoYSwidGFiaW5kZXgiKTtyZXR1cm4oaXNOYU4oYil8fGI+PTApJiZjKGEpLmlzKCI6Zm9jdXNhYmxlIil9fSk7CmMoZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5ib2R5LGI9YS5hcHBlbmRDaGlsZChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtjLmV4dGVuZChiLnN0eWxlLHttaW5IZWlnaHQ6IjEwMHB4IixoZWlnaHQ6ImF1dG8iLHBhZGRpbmc6MCxib3JkZXJXaWR0aDowfSk7Yy5zdXBwb3J0Lm1pbkhlaWdodD1iLm9mZnNldEhlaWdodD09PTEwMDtjLnN1cHBvcnQuc2VsZWN0c3RhcnQ9Im9uc2VsZWN0c3RhcnQiaW4gYjthLnJlbW92ZUNoaWxkKGIpLnN0eWxlLmRpc3BsYXk9Im5vbmUifSk7Yy5leHRlbmQoYy51aSx7cGx1Z2luOnthZGQ6ZnVuY3Rpb24oYSxiLGQpe2E9Yy51aVthXS5wcm90b3R5cGU7Zm9yKHZhciBlIGluIGQpe2EucGx1Z2luc1tlXT1hLnBsdWdpbnNbZV18fFtdO2EucGx1Z2luc1tlXS5wdXNoKFtiLGRbZV1dKX19LGNhbGw6ZnVuY3Rpb24oYSxiLGQpe2lmKChiPWEucGx1Z2luc1tiXSkmJmEuZWxlbWVudFswXS5wYXJlbnROb2RlKWZvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKWEub3B0aW9uc1tiW2VdWzBdXSYmCmJbZV1bMV0uYXBwbHkoYS5lbGVtZW50LGQpfX0sY29udGFpbnM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZG9jdW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNjphIT09YiYmYS5jb250YWlucyhiKX0saGFzU2Nyb2xsOmZ1bmN0aW9uKGEsYil7aWYoYyhhKS5jc3MoIm92ZXJmbG93Iik9PT0iaGlkZGVuIilyZXR1cm4gZmFsc2U7Yj1iJiZiPT09ImxlZnQiPyJzY3JvbGxMZWZ0Ijoic2Nyb2xsVG9wIjt2YXIgZD1mYWxzZTtpZihhW2JdPjApcmV0dXJuIHRydWU7YVtiXT0xO2Q9YVtiXT4wO2FbYl09MDtyZXR1cm4gZH0saXNPdmVyQXhpczpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE+YiYmYTxiK2R9LGlzT3ZlcjpmdW5jdGlvbihhLGIsZCxlLGgsaSl7cmV0dXJuIGMudWkuaXNPdmVyQXhpcyhhLGQsaCkmJmMudWkuaXNPdmVyQXhpcyhiLGUsaSl9fSl9fSkoalF1ZXJ5KTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/index.php,importbuddy/lib/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/index.php,importbuddy/lib/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdzdHlsZS5jc3MnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnbnByb2dyZXNzLmNzcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhbmltYXRlLmNzcycgKTsKCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2pxdWVyeS5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAndWkuY29yZS5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAndG9vbHRpcC5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnbnByb2dyZXNzLmpzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpbXBvcnRidWRkeS5qcycgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9Cj8+Cgo8L2Rpdj4KPC9kaXY+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
CTxzY3JpcHQ+Ly9iYl9hY3Rpb24oICdpZnJhbWVMb2FkZWQnICk7PC9zY3JpcHQ+CjwvaHRtbD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
PGh0bWw+Cjw/cGhwCnJlcXVpcmUoICdfYXNzZXRzLnBocCcgKTsKCgoKaWYgKCAndHJ1ZScgIT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7IC8vIE5PUk1BTCwgTk9UIERFUExPWU1FTlQuCj8+Cgk8c2NyaXB0PgoJCXZhciB3aW4gPSB3aW5kb3cuZGlhbG9nQXJndW1lbnRzIHx8IG9wZW5lciB8fCBwYXJlbnQgfHwgdG9wOwoJCXdpbi53aW5kb3cuc2Nyb2xsVG8oMCwwKTsKCQkKCQlmdW5jdGlvbiBwYl9zdGF0dXNfYXBwZW5kKCBzdGF0dXNfc3RyaW5nICkgewoJCQkvL3ZhciB3aW4gPSB3aW5kb3cuZGlhbG9nQXJndW1lbnRzIHx8IG9wZW5lciB8fCBwYXJlbnQgfHwgdG9wOwoJCQl3aW4ucGJfc3RhdHVzX2FwcGVuZCggc3RhdHVzX3N0cmluZyApOwoJCX0KCQlmdW5jdGlvbiBwYl9zdGF0dXNfdW5kb3VybCggdW5kb191cmwgKSB7CgkJCS8vdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7CgkJCXdpbi5wYl9zdGF0dXNfdW5kb3VybCggdW5kb191cmwgKTsKCQl9CgkJCgkJCgkJCgkJZnVuY3Rpb24gcGFnZVRpdGxlKCB0aXRsZSApIHsKCQkJCgkJCXdpbi5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoIHRpdGxlICk7CgkJfQoJCQoJCWZ1bmN0aW9uIGJiX2FjdGlvbiggYWN0aW9uLCBub3RlICkgewoJCQl3aW4uYmJfYWN0aW9uKCBhY3Rpb24sIG5vdGUgKTsKCQl9CgkJCgkJZnVuY3Rpb24gYmJfcmVzdG9yZURhdGEoIGRhdGEgKSB7CgkJCXdpbi5iYl9yZXN0b3JlRGF0YSggZGF0YSApOwoJCX0KCQkKCQlmdW5jdGlvbiBiYl9zaG93U3RlcCggc3RlcCwgZGF0YSApIHsKCQkJd2luLmJiX3Nob3dTdGVwKCBzdGVwLCBkYXRhICk7CgkJfQoJCQoJPC9zY3JpcHQ+Cjw/cGhwIH0gZWxzZSB7IC8vIERFUExPWU1FTlQgPz4KCTxzY3JpcHQ+CgkJZnVuY3Rpb24gcGJfc3RhdHVzX2FwcGVuZCgpIHsKCQl9CgkJCgkJZnVuY3Rpb24gcGJfc3RhdHVzX3VuZG91cmwoIHVuZG9fdXJsICkgewoJCX0KCQkKCQlmdW5jdGlvbiBwYWdlVGl0bGUoIHRpdGxlICkgewoJCX0KCQkKCQlmdW5jdGlvbiBiYl9hY3Rpb24oIGFjdGlvbiwgbm90ZSApIHsKCQl9CgkJCgkJZnVuY3Rpb24gYmJfcmVzdG9yZURhdGEoIGRhdGEgKSB7CgkJfQoJCQoJCWZ1bmN0aW9uIGJiX3Nob3dTdGVwKCBzdGVwLCBkYXRhICkgewoJCX0KCTwvc2NyaXB0Pgo8P3BocCB9ID8+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
PCUgaWYgKCBwb3RlbnRpYWxQcm9ibGVtcy5sZW5ndGggPiAwICkgeyAlPgoJPGRpdiBjbGFzcz0ibWFpbl9ib3hfaGVhZCB3YXJuaW5nX2FsZXJ0X2JveCI+CgkJPHNwYW4gY2xhc3M9ImVycm9yX3dhcm5pbmdfdGl0bGUiPk9uZSBvciBtb3JlIHBvdGVudGlhbCBwcm9ibGVtcyBtYXkgaGF2ZSBiZWVuIGZvdW5kOjwvc3Bhbj4KCQk8dWwgY2xhc3M9ImJhY2t1cGJ1ZGR5X3dhcm5pbmdfbGlzdCI+CgkJCTwlIGpRdWVyeS5lYWNoKCBwb3RlbnRpYWxQcm9ibGVtcywgZnVuY3Rpb24oIGtleSwgcG90ZW50aWFsUHJvYmxlbSApeyAlPgoJCQk8bGk+PCU9cG90ZW50aWFsUHJvYmxlbSU+PC9saT4KCQkJPCUgfSk7ICU+CgkJPC91bD4KCTwvZGl2Pjxicj4KPCUgfSAlPgoKPCUgaWYgKCAnMScgPT0gYmxvZ1B1YmxpY1N0YXR1cyApIHsKCXNvdXJjZVNpdGVQdWJsaWNTdGF0dXNUZXh0ID0gJ1B1YmxpYyAtIERvIG5vdCBkaXNjb3VyYWdlIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgdGhpcyBzaXRlJzsKfSBlbHNlIGlmICggJzAnID09IGJsb2dQdWJsaWNTdGF0dXMgKSB7Cglzb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCA9ICdQcml2YXRlIC0gRGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZSc7Cn0gZWxzZSB7Cglzb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCA9ICdDdXJyZW50IHN0YXR1cyBub3QgZGV0ZWN0ZWQnOwp9CiU+CgoKCgo8aDM+VmVyaWZ5IHNpdGUgYmVmb3JlIHByb2NlZWRpbmcgdG8gY2xlYW51cDo8L2gzPgo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48JT1ob21ldXJsJT48L2E+Cjxicj48YnI+CgoKPHNjcmlwdD4KalF1ZXJ5KCAnLmV4cGFuZGVyJyApLmNsaWNrKCBmdW5jdGlvbigpewoJalF1ZXJ5KHRoaXMpLm5leHQoJy5jb250ZW50Jykuc2xpZGVUb2dnbGUoKTsKfSk7Cjwvc2NyaXB0PgoKPGgzPkNvbW1vbiBpc3N1ZXMgJiB0aXBzOjwvaDM+CjxkaXYgY2xhc3M9ImV4cGFuZGVyLWJveCI+Cgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+Q2xpY2tpbmcgb24gYSBwb3N0IHJlc3VsdHMgaW4gYSA0MDQgTm90IEZvdW5kPC9hPgoJPGRpdiBjbGFzcz0iY29udGVudCI+CgkJVHlwaWNhbGx5IGNhdXNlZCBieSBhIHByb2JsZW0gd2l0aCB5b3VyIC5odGFjY2VzcyBmaWxlLCB0aGVyZSBpcyBhIHNpbXBsZSBmaXg6IExvZyBpbnRvIHlvdXIgd3AtYWRtaW4sIG5hdmlnYXRlIHRvIFNldHRpbmdzOiBQZXJtYWxpbmtzIGluIHRoZSBXb3JkUHJlc3MgbWVudSBhbmQgY2xpY2sgdGhlICJTYXZlIiBidXR0b24gdG8gdXBkYXRlIHBlcm1hbGluayBzZXR0aW5ncyB0byB5b3VyIC5odGFjY2VzcyBmaWxlLiBUaGlzIHR5cGljYWxseSByZXNvbHZlcyB0aGlzIHByb2JsZW0uCgk8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImV4cGFuZGVyLWJveCI+Cgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+TG9nZ2luZyBpbiByZWRpcmVjdHMgYmFjayB0byB0aGUgb2xkIHNpdGU8L2E+Cgk8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCQlUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IGVudGVyaW5nIHRoZSBzb3VyY2Ugc2l0ZSBVUkwgYXMgdGhlIGRlc3RpbmF0aW9uIFVSTCBvbiBTdGVwIDMuICBSZS1yZXN0b3JpbmcgdXNpbmcgdGhlIGNvcnJlY3QgVVJMIHNob3VsZCBmaXggdGhpcyBwcm9ibGVtLgoJPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJleHBhbmRlci1ib3giPgoJPGEgY2xhc3M9ImV4cGFuZGVyIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPlNvdXJjZSBzaXRlIGhhcyBjaGFuZ2VkIHRvIHRoZSBkZXN0aW5hdGlvbiBVUkw8L2E+Cgk8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCQlUaGlzIGlzIGNhdXNlZCBpZiB5b3UgcmVzdG9yZWQgb3ZlciB5b3VyIHNvdXJjZSBzaXRlIGRhdGFiYXNlIGJ5IGVudGVyaW5nIHRoZSBzb3VyY2Ugc2l0ZSBkYXRhYmFzZSBzZXR0aW5ncyBvbiBTdGVwIDMuIFRoaXMgbWVhbnMgdGhhdCB5b3VyIG5ldyBzaXRlIEFORCB5b3VyIG9sZCBzaXRlIGFyZSBub3cgdXNpbmcgdGhlIHNhbWUgZGF0YWJhc2UgYnV0IHRoZSBkYXRhYmFzZSBoYXMgYmVlbiBtaWdyYXRlZCB0byB3b3JrIHdpdGggdGhlIG5ldyBVUkwuIFlvdSBtYXkgcmUtcmVzdG9yZSBib3RoIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIHVzaW5nIGNvcnJlY3Qgc2V0dGluZ3Mgb3IgdXNlIHRoZSBtYXNzIGRhdGFiYXNlIHJlcGxhY2VtZW50IHRvb2wuICBZb3UgbWF5IGNvcnJlY3QgdGhlIG1vZGlmaWVkIFVSTCBvbiB0aGUgc291cmNlIHNpdGUgYnkgdXNpbmcgdGhlIFNlcnZlciBUb29scyBwYWdlJ3MgTWFzcyBUZXh0IFJlcGxhY2UgdG9vbCB3aXRoaW4gdGhlIERhdGFiYXNlIHRhYi4KCTwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iZXhwYW5kZXItYm94Ij4KCTxhIGNsYXNzPSJleHBhbmRlciIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj5GaWxlIHBlcm1pc3Npb25zIGhhdmUgY2hhbmdlZDwvYT4KCTxkaXYgY2xhc3M9ImNvbnRlbnQiPgoJCUN1c3RvbSBmaWxlIHBlcm1pc3Npb25zIG1heSBiZSBzZXJ2ZXItc3BlY2lmaWMgYW5kIG1heSBub3Qgc3RheSB0aGUgc2FtZSBhcyB0aGUgc291cmNlIHNpdGUuIElmIHlvdSBtYWRlIGFueSBjdXN0b20gZmlsZSBwZXJtaXNzaW9uIGNoYW5nZXMgKGVpdGhlciBtYW51YWxseSBvciB2aWEgYSBwbHVnaW4gc3VjaCBhcyBhIFNlY3VyaXR5IHBsdWdpbikgeW91IG1heSBuZWVkIHRvIG1hbnVhbGx5IHJlLWFwcGx5IHRoZW0uICBOb3QgYWxsIHNlcnZlcnMgd2lsbCBmdW5jdGlvbiBwcm9wZXJseSB3aXRoIHRoZSBzYW1lIHBlcm1pc3Npb25zLgoJPC9kaXY+CjwvZGl2Pgo8YnI+PGJyPgoKCgo8Zm9ybSBvblN1Ym1pdD0ialF1ZXJ5KCcjY2xlYW51cFNldHRpbmdzLXJlc3RvcmVEYXRhJykudmFsKCB3aW5kb3cuYnRvYSggZW5jb2RlVVJJQ29tcG9uZW50KCBKU09OLnN0cmluZ2lmeSggd2luZG93LnJlc3RvcmVEYXRhICkgKSApICk7IiBhY3Rpb249Ij9hamF4PTYiIHRhcmdldD0ibWluaUZyYW1lIiBtZXRob2Q9InBvc3QiPjwhLS0gdGhpcyBmb3JtIGlzIG9ubHkgc3VibWl0dGVkIGFmdGVyIHJ1bm5pbmcgdGhyb3VnaCBqYXZhc2NyaXB0LiBzdWJtaXR0aW5nIGFjdHVhbCBmb3JtIGluc3RlYWQgb2YgdXNpbmcgalF1ZXJ5IHBvc3Qgc28gd2UgY2FuIHRhcmdldCBpZnJhbWUuIC0tPgoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVzdG9yZURhdGEiIGlkPSJjbGVhbnVwU2V0dGluZ3MtcmVzdG9yZURhdGEiIHZhbHVlPSIiPgoJCgkKCQoJPGRpdiBjbGFzcz0ibWFpbl9ib3hfZm9vdCI+CgkJCgkJPGgzPlNpdGUgU2VhcmNoIEVuZ2luZSBWaXNpYmlsaXR5PC9oMz4KCQk8ZGl2IHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHRleHQtYWxpZ246IGxlZnQ7Ij4KCQkJPGxhYmVsIGZvcj0ic2V0X2Jsb2dfcHVibGljLWtlZXAiIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InNldF9ibG9nX3B1YmxpYyIgaWQ9InNldF9ibG9nX3B1YmxpYy1rZWVwIiB2YWx1ZT0iIiBjaGVja2VkPSJjaGVja2VkIj5ObyBjaGFuZ2UgKGRlZmF1bHQpOiA8JT1zb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCU+PC9sYWJlbD48YnI+CgkJCTxsYWJlbCBmb3I9InNldF9ibG9nX3B1YmxpYy1wdWJsaWMiIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InNldF9ibG9nX3B1YmxpYyIgaWQ9InNldF9ibG9nX3B1YmxpYy1wdWJsaWMiIHZhbHVlPSIxIj5QdWJsaWMgLSBEbyBub3QgZGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZTwvbGFiZWw+PGJyPgoJCQk8bGFiZWwgZm9yPSJzZXRfYmxvZ19wdWJsaWMtcHJpdmF0ZSIgc3R5bGU9ImZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0ic2V0X2Jsb2dfcHVibGljIiBpZD0ic2V0X2Jsb2dfcHVibGljLXByaXZhdGUiIHZhbHVlPSIwIj5Qcml2YXRlIC0gRGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZTwvbGFiZWw+PGJyPgoJCTwvZGl2PgoJCQkKCQk8YnI+PGJyPgoJCQoJCTxoMz5JbXBvcnRCdWRkeSBDbGVhbnVwOjwvaDM+CgkJPHRhYmxlIHN0eWxlPSJtYXJnaW4tbGVmdDogYXV0bzsgbWFyZ2luLXJpZ2h0OiBhdXRvOyB0ZXh0LWFsaWduOiBsZWZ0OyI+PHRyPjx0ZD4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2JhY2t1cCIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9iYWNrdXAiIGlkPSJkZWxldGVfYmFja3VwIiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIGJhY2t1cCB6aXAgYXJjaGl2ZTwvbGFiZWw+CgkJCTxicj4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX3RlbXAiIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfdGVtcCIgaWQ9ImRlbGV0ZV90ZW1wIiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIHRlbXBvcmFyeSBpbXBvcnQgZmlsZXM8L2xhYmVsPgoJCTwvdGQ+PHRkPgoJCQk8bGFiZWwgZm9yPSJkZWxldGVfaW1wb3J0YnVkZHkiIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfaW1wb3J0YnVkZHkiIGlkPSJkZWxldGVfaW1wb3J0YnVkZHkiIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgSW1wb3J0QnVkZHkgdG9vbCBmaWxlczwvbGFiZWw+CgkJCTxicj4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5X2RpcmVjdG9yeSIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9pbXBvcnRidWRkeV9kaXJlY3RvcnkiIGlkPSJkZWxldGVfaW1wb3J0YnVkZHlfZGlyZWN0b3J5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIEltcG9ydEJ1ZGR5IGRpcmVjdG9yeTwvbGFiZWw+CgkJCTxicj4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5bG9nIiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2ltcG9ydGJ1ZGR5bG9nIiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5bG9nIiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIGltcG9ydGJ1ZGR5LnR4dCBsb2cgZmlsZTwvbGFiZWw+CgkJPC90ZD48L3RyPjwvdGFibGU+CgkJCgkJPGJyPgoJCTxjZW50ZXI+CgkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9Im5leHRTdGVwIiB2YWx1ZT0iRmluaXNoIENsZWFudXAiIGNsYXNzPSJpdC1idXR0b24gcGJfZGF0YWJhc2VfbmV4dF90ZXN0Ij4KCQk8L2NlbnRlcj4KCQoJPC9kaXY+CjwvZm9ybT4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
PG9iamVjdCBjbGFzc2lkPSJjbHNpZDpkMjdjZGI2ZS1hZTZkLTExY2YtOTZiOC00NDQ1NTM1NDAwMDAiIGNvZGViYXNlPSJodHRwOi8vZnBkb3dubG9hZC5tYWNyb21lZGlhLmNvbS9wdWIvc2hvY2t3YXZlL2NhYnMvZmxhc2gvc3dmbGFzaC5jYWIjdmVyc2lvbj03LDAsMCwwIiBpZD0iQ2FwdGl2YXRlMSI+Cgk8cGFyYW0gbmFtZT0ibW92aWUiIHZhbHVlPSJodHRwOi8vd3d3LmNwYW5lbC5uZXQvbWVkaWEvdHV0b3JpYWxzL215c3Fsd2l6YXJkLnN3ZiI+Cgk8cGFyYW0gbmFtZT0icXVhbGl0eSIgdmFsdWU9ImhpZ2giPjxwYXJhbSBuYW1lPSJsb29wIiB2YWx1ZT0iMCI+Cgk8ZW1iZWQgc3JjPSJodHRwOi8vd3d3LmNwYW5lbC5uZXQvbWVkaWEvdHV0b3JpYWxzL215c3Fsd2l6YXJkLnN3ZiIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNTAwIiBsb29wPSIwIiBxdWFsaXR5PSJsb3ciIHBsdWdpbnNwYWdlPSJodHRwOi8vd3d3Lm1hY3JvbWVkaWEuY29tL2dvL2dldGZsYXNocGxheWVyIiB0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCIgbWVudT0iZmFsc2UiPgo8L29iamVjdD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokcGFnZV90aXRsZSA9ICdEYXRhYmFzZSBUZXh0IFJlcGxhY2UgVG9vbCc7CnJlcXVpcmVfb25jZSggJ19oZWFkZXIucGhwJyApOwo/PgoKPGRpdiBjbGFzcz0id3JhcCI+Cjw/cGhwCiRjb25maWdGaWxlID0gJyc7CmlmICggISBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd3cC1jb25maWcucGhwJyApICkgeyAvLyBOb3JtYWwgY29uZmlnIGZpbGUgbm90IGZvdW5kIHNvIHdhcm4gb3Igc2VlIGlmIHBhcmVudCBjb25maWcgbWF5IGV4aXN0LgoJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnJzsKCSRwYXJlbnRDb25maWcgPSAgZGlybmFtZSggQUJTUEFUSCApIC4gJy93cC1jb25maWcucGhwJzsKCWlmICggQGZpbGVfZXhpc3RzKCAkcGFyZW50Q29uZmlnICkgKSB7IC8vIFBhcmVudCBjb25maWcgZXhpc3RzIHNvIG9mZmVyIGl0IGFzIGFuIG9wdGlvbiBvciBwb3NzaWJseSB1c2UgaXQgaWYgdXNlciBoYXMgc2VsZWN0ZWQgdG8gZG8gc28uCgkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgPT0gJ3RydWUnICkgeyAvLyBVc2VyIG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnLgoJCQkkY29uZmlnRmlsZSA9ICRwYXJlbnRDb25maWc7CgkJfSBlbHNlIHsgLy8gVXNlciBoYXMgbm90IG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnIHlldCBzbyBzZXQgbWVzc2FnZSB0byBvZmZlciBpdC4KCQkJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnPGJyPjxicj48Yj5Ib3dldmVyPC9iPiwgYSB3cC1jb25maWcucGhwIGZpbGUgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5IGFzIGAnIC4gJHBhcmVudENvbmZpZyAuICdgLiA8YSBocmVmPSI/cGFnZT1kYnJlcGxhY2UmcGFyZW50X2NvbmZpZz10cnVlIj48Yj5DbGljayBoZXJlPC9iPjwvYT4gaWYgeW91IHdvdWxkIGxpa2UgdG8gcnVuIHRoaXMgdG9vbCB1c2luZyB0aGlzIHdwLWNvbmZpZy5waHAgZmlsZSBpbiB0aGUgcGFyZW50IGRpcmVjdG9yeS4nOwoJCX0KCX0KCWlmICggJycgPT0gJGNvbmZpZ0ZpbGUgKSB7CgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnPGI+RXJyb3I6PC9iPiBUaGlzIHRvb2wgcmVxdWlyZXMgYW4gZXhpc3RpbmcgV29yZFByZXNzIGluc3RhbGxhdGlvbiB0byBwZXJmb3JtIGRhdGFiYXNlIHJlcGxhY2VtZW50cyBvbi4gTm8gV29yZFByZXNzIHdwLWNvbmZpZy5waHAgY29uZmlndXJhdGlvbiBmaWxlIHdhcyBmb3VuZCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgaW1wb3J0YnVkZHkucGhwLiAnIC4gJHBhcmVudENvbmZpZ01lc3NhZ2UgLiAnIDxicj48YnI+IDxiPk5vdGU6PC9iPiBJbXBvcnRCdWRkeSBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgbWlncmF0aW5nICYgcmVwbGFjaW5nIHlvdXIgc2l0ZSBVUkxzIGFuZCBmaWxlIHBhdGhzIGR1cmluZyByZXN0b3JlL21pZ3JhdGlvbjsgdGhpcyB0b29sIGlzIG5vdCBuZWVkZWQgZm9yIG5vcm1hbCBiYWNrdXAgLyByZXN0b3JlIG9wZXJhdGlvbnMuJywgdHJ1ZSApOwoJfQp9IGVsc2UgeyAvLyBVc2Ugbm9ybWFsIGNvbmZpZyBmaWxlLgoJJGNvbmZpZ0ZpbGUgPSBBQlNQQVRIIC4gJ3dwLWNvbmZpZy5waHAnOwp9CgppZiAoICcnICE9ICRjb25maWdGaWxlICkgewoJCgkvLyBSZWFkIGluIHdwLWNvbmZpZy5waHAgZmlsZSBjb250ZW50cy4KCSRjb25maWdDb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkY29uZmlnRmlsZSApOwoJaWYgKCBmYWxzZSA9PT0gJGNvbmZpZ0NvbnRlbnRzICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gcmVhZCB3cC1jb25maWcucGhwIGNvbmZpZ3VyYXRpb24gZmlsZS4nICk7CgkJcmV0dXJuOwoJfQoJCgkvLyBHcmFiIGRhdGFiYXNlIHNldHRpbmdzIGZyb20gd3AtY29uZmlnLnBocCBjb250ZW50cy4KCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX05BTUUoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyduYW1lJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX1VTRVIoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyd1c2VybmFtZSddID0gJG1hdGNoZXNbNF07CglwcmVnX21hdGNoKCAnL2RlZmluZVwoW1xzXSooXCd8IilEQl9QQVNTV09SRChcJ3wiKSxbXHNdKihcJ3wiKSguKikoXCd8IilbXHNdKlwpOy9pJywgJGNvbmZpZ0NvbnRlbnRzLCAkbWF0Y2hlcyApOwoJJGRhdGFiYXNlU2V0dGluZ3NbJ3Bhc3N3b3JkJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX0hPU1QoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWydob3N0J10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvXCR0YWJsZV9wcmVmaXhbXHNdKj1bXHNdKihcJ3wiKSguKikoXCd8Iik7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7CgkkZGF0YWJhc2VTZXR0aW5nc1sncHJlZml4J10gPSAkbWF0Y2hlc1syXTsKCQoJLy9wcmludF9yKCAkZGF0YWJhc2VTZXR0aW5ncyApOwoJCgkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJZ2xvYmFsICR3cGRiOwoJJHdwZGIgPSBuZXcgd3BkYiggJGRhdGFiYXNlU2V0dGluZ3NbJ3VzZXJuYW1lJ10sICRkYXRhYmFzZVNldHRpbmdzWydwYXNzd29yZCddLCAkZGF0YWJhc2VTZXR0aW5nc1snbmFtZSddLCAkZGF0YWJhc2VTZXR0aW5nc1snaG9zdCddICk7CglpZiAoIGZhbHNlID09PSAkd3BkYi0+ZGJoICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yICM4NTgzODM6IFVuYWJsZSB0byBjb25uZWN0IHRvIGRhdGFiYXNlIHVzaW5nIHNldHRpbmdzIGluIHdwLWNvbmZpZy5waHAuIFZlcmlmeSBjb25uZWN0aW9uIHNldHRpbmdzLicgKTsKCX0gZWxzZSB7CgkJcmVxdWlyZV9vbmNlKCAnX2RicmVwbGFjZS5waHAnICk7Cgl9Cn0KPz4KPC9kaXY+Cgo8P3BocApyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
VGhpcyBzdGVwIGhhbmRsZXMgZGVsZXRpbmcgZmlsZXMuIEluIHJhcmUgaW5zdGFuY2VzIG9uIHNvbWUgc2VydmVycyB5b3UgbWF5IHJlY2VpdmUgZXJyb3JzIGxvYWRpbmcgZmlsZXMgb3IgYW4gdW5zdHlsZWQgcGFnZSBoZXJlIGR1ZSB0byBmaWxlcyBnZXR0aW5nIGRlbGV0aW5nIHByZW1hdHVyZWx5IGJlZm9yZSB0aGUgcGFnZSBjb21wbGV0ZXMgbG9hZGluZy4gVGhpcyBtYXkgc2FmZWx5IGJlIGlnbm9yZWQuIEl0IGlzIGNvbW1vbiB0byBub3QgYmUgYWJsZSB0byBkZWxldGUgc29tZSBmaWxlcyBkdWUgdG8gcGVybWlzc2lvbiBlcnJvcnMuIFlvdSBtYXkgbWFudWFsbHkgZGVsZXRlIHRoZW0uIDxiPmltcG9ydGJ1ZGR5LnBocDwvYj4gc2hvdWxkIGFsd2F5cyBiZSBkZWxldGVkIGFmdGVyIHJlc3RvcmUgZm9yIGJlc3Qgc2VjdXJpdHkuCgo8aDMgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPllvdXIgc2l0ZSBpcyByZWFkeSB0byBnbyBhdAo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48Yj48JT1ob21ldXJsJT48L2I+PC9hPjxicj48YnI+ClRoYW5rIHlvdSBmb3IgY2hvb3NpbmcgQmFja3VwQnVkZHkhPC9oMz4KCgo8L2Rpdj48L2Rpdj48YnI+PGJyPjxicj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
PGgxIGNsYXNzPSJhbmltYXRlZCBmYWRlSW5Eb3duIj5SZXN0b3JlIEZpbmlzaGVkLjwvaDE+Cgo8aDM+WW91ciBzaXRlIHNob3VsZCBiZSByZWFkeSB0byBnbyBhdDo8YnI+PGJyPjxhIGhyZWY9IjwlPWhvbWV1cmwlPiIgdGFyZ2V0PSJfYmxhbmsiPjwlPWhvbWV1cmwlPjwvYT48L2gzPjxicj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
PGNlbnRlcj4KCTxoMz5SZXN0b3JpbmcgRGF0YWJhc2UgLi4uPC9oMz4KCTxoNCBpZD0iaW1wb3J0aW5nRGF0YWJhc2UtcHJvZ3Jlc3NNZXNzYWdlIj48L2g0Pgo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
PHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgKTs8L3NjcmlwdD4KPD9waHAKCgppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgewoJZ2xvYmFsICRwYl9sb2dpbl9hdHRlbXB0czsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ludmFsaWQgcGFzc3dvcmQuIFBsZWFzZSBlbnRlciB0aGUgcGFzc3dvcmQgeW91IHByb3ZpZGVkIHdpdGhpbiBCYWNrdXBCdWRkeSBTZXR0aW5ncy4gQXR0ZW1wdCAjJyAuICRwYl9sb2dpbl9hdHRlbXB0cyAuICcuJyApOwoJZWNobyAnPGJyPic7Cn0KPz4KCjxwPkVudGVyIHlvdXIgSW1wb3J0QnVkZHkgcGFzc3dvcmQgYmVsb3cgdG8gYmVnaW4uPC9wPgoKPGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9ImxvZ2luIj4KCTxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHN0eWxlPSJ3aWR0aDogMjUwcHg7Ij4KCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkF1dGhlbnRpY2F0ZSIgY2xhc3M9Iml0LWJ1dHRvbiI+CjwvZm9ybT4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
PGNlbnRlcj4KCTxoMz5NaWdyYXRpbmcgRGF0YWJhc2UgLi4uPC9oMz4KCTxoNCBpZD0ibWlncmF0aW5nRGF0YWJhc2UtcHJvZ3Jlc3NNZXNzYWdlIj48L2g0Pgo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
PGNlbnRlcj4KCTxoMz5QbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGZpbGVzIGFyZSByZXN0b3JlZCAuLi48L2gzPgoJPGg0IGlkPSJ1bnppcHBpbmdGaWxlcy1wcm9ncmVzc01lc3NhZ2UiPlJlc3RvcmluZyBGaWxlczwvaDQ+CjwvY2VudGVyPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm
CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImltcG9ydGJ1ZGR5L2pzL2pxdWVyeS5sZWFuTW9kYWwubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQlqUXVlcnkoJy5sZWFuTW9kYWwnKS5sZWFuTW9kYWwoCgkJCQl7IHRvcCA6IDQ1LCBvdmVybGF5IDogMC40LCBjbG9zZUJ1dHRvbjogIi5tb2RhbF9jbG9zZSIgfQoJCSk7Cgl9KTsKPC9zY3JpcHQ+CgoKCjxmb3JtIG9uU3VibWl0PSJqUXVlcnkoJyN1cmxSZXBsYWNlLXJlc3RvcmVEYXRhJykudmFsKCB3aW5kb3cuYnRvYSggZW5jb2RlVVJJQ29tcG9uZW50KCBKU09OLnN0cmluZ2lmeSggd2luZG93LnJlc3RvcmVEYXRhICkgKSApICk7IiBhY3Rpb249Ij9hamF4PTUiIHRhcmdldD0ibWluaUZyYW1lIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJkYl9zZXR0aW5nIj48IS0tIHRoaXMgZm9ybSBpcyBvbmx5IHN1Ym1pdHRlZCBhZnRlciBydW5uaW5nIHRocm91Z2ggamF2YXNjcmlwdC4gc3VibWl0dGluZyBhY3R1YWwgZm9ybSBpbnN0ZWFkIG9mIHVzaW5nIGpRdWVyeSBwb3N0IHNvIHdlIGNhbiB0YXJnZXQgaWZyYW1lLiAtLT4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmVEYXRhIiBpZD0idXJsUmVwbGFjZS1yZXN0b3JlRGF0YSIgdmFsdWU9IiI+PCEtLSB0aGlzIGlzIHRoZSBvbmx5IHRoaW5nIHRoYXQgd2lsbCBuZWVkIHBhcnNlZCBieSBQSFAgb24gdGhlIHJlY2VpdmluZyBlbmQuIHBvcHVsYXRlZCBvbiBzdWJtaXQgYWZ0ZXIgZGIgdGVzdCBwYXNzZXMuIC0tPgoKCgoKCgoKCgk8dGFibGUgY2xhc3M9InNldHRpbmdzVGFibGUiPgoJCTx0cj48dGggc3R5bGU9IndpZHRoOiAzMCU7Ij4mbmJzcDs8L3RoPjx0aCBzdHlsZT0id2lkdGg6IDMwJTsiPk9sZCBVUkw8L3RoPjx0aCBzdHlsZT0id2lkdGg6IDEwJTsiPiZuYnNwOzwvdGg+PHRoIHN0eWxlPSJ3aWR0aDogMzAlOyI+TmV3IFVSTDwvdGg+PC90cj4KCQoJCgkKCQk8dHI+PCEtLSBXT1JEUFJFU1MgQUREUkVTUyAoQUxMIFNJVEUgVFlQRVMpIC0tPgoJCQk8dGQ+CgkJCQlXb3JkUHJlc3MgQWRkcmVzcyA8c3BhbiBjbGFzcz0ibGlnaHQiPihTaXRlIFVSTCk8L3NwYW4+IDxhIGNsYXNzPSJwbHVnaW5idWRkeV90aXAiIHRpdGxlPSJUaGlzIGlzIHRoZSBhZGRyZXNzIHdoZXJlIHlvdSB3YW50IHRoZSBmaW5hbCBXb3JkUHJlc3Mgc2l0ZSB5b3UgYXJlIHJlc3RvcmluZyAvIG1pZ3JhdGluZyB0byByZXNpZGUuIEV4OiBodHRwOi8vZm9vLmNvbS93cCI+PGltZyBzcmM9ImltcG9ydGJ1ZGR5L3BsdWdpbmJ1ZGR5L2ltYWdlcy9wbHVnaW5idWRkeV90aXAucG5nIiBhbHQ9Iig/KSI+PC9hPgoJCQk8L3RkPgoJCQk8dGQ+CgkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9Im9sZF9zZXR0aW5nIiB2YWx1ZT0iPCU9IGRhdC5zaXRldXJsICU+IiBESVNBQkxFRD4KCQkJPC90ZD4KCQkJPHRkIGNsYXNzPSJzZXR0aW5nQ29weSI+CgkJCQk8YSBocmVmPSIjIj4mcmFycjs8L2E+CgkJCTwvdGQ+CgkJCTx0ZD4KCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiB2YWx1ZT0iPCU9IGRlZmF1bHRVUkwgJT4iIG5hbWU9InNpdGV1cmwiPgoJCQk8L3RkPgoJCTwvdHI+CgkJPGJyIC8+PGJyIC8+CgkJPCUgaWYgKCBkYXQuaXNfbXVsdGlzaXRlID09PSB0cnVlICkgeyAvLyBtdWx0aXNpdGUgJT4KCQk8dHI+PCEtLSBNVUxUSVNJVEUgRE9NQUlOIC0tPgoJCQk8dGQgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3A7Ij4KCQkJCU11bHRpc2l0ZSBEb21haW4gPCU9IHRpcCggJ1RoaXMgaXMgdGhlIE11bHRpU2l0ZSBtYWluIGRvbWFpbi4gRXg6IGZvby5jb20uIFdBUk5JTkc6IENoYW5naW5nIHRoaXMgbWF5IHJlc3VsdCBpbiBVUkwgcHJvYmxlbXMuIFVzZSBjYXV0aW9uLicgKSAlPgoJCQkJPGJyPgoJCQkJPHNwYW4gY2xhc3M9ImxpZ2h0Ij4oSG9tZSBVUkwpPC9zcGFuPgoJCQk8L3RkPgoJCQk8dGQgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3A7Ij4KCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0ib2xkX3NldHRpbmciIHZhbHVlPSI8JT0gZGF0LmRvbWFpbiAlPiIgRElTQUJMRUQ+CgkJCTwvdGQ+CgkJCTx0ZCBjbGFzcz0ic2V0dGluZ0NvcHkiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogdG9wOyI+CgkJCQk8YSBocmVmPSIjIj4mcmFycjs8L2E+CgkJCTwvdGQ+CgkJCTx0ZCBzdHlsZT0idmVydGljYWwtYWxpZ246IHRvcDsiPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIHZhbHVlPSI8JT0gZGVmYXVsdERvbWFpbiAlPiIgbmFtZT0iaG9tZXVybCI+CgkJCQk8YnI+Tm90ZTogVGhpcyBVUkwgYWJvdmUgd2lsbCBhbHNvIGJlIHRoZSBuZXcgTXVsdGlzaXRlIE5ldHdvcmsgVVJMLgoJCQk8L3RkPgoJCTwvdHI+CgkKCQk8JSB9IGVsc2UgeyAlPgoJCQoJCTx0cj48IS0tIENVU1RPTSBIT01FIFVSTCAtLT4KCQkJPHRkPgoJCQkJPGxhYmVsIHN0eWxlPSJ3aWR0aDogMTAwJTsiIGZvcj0iY2hlY2tfY3VzdG9tX2hvbWUiPgoJCQkJCUN1c3RvbSBTaXRlIEFkZHJlc3MgPHNwYW4gY2xhc3M9ImxpZ2h0Ij4oSG9tZSBVUkwpPC9zcGFuPiA8JT0gdGlwKCAnT1BUSU9OQUwuIFRoaXMgaXMgYWxzbyBrbm93biBhcyB0aGUgc2l0ZSBhZGRyZXNzLiBUaGlzIGlzIHRoZSBob21lIGFkZHJlc3Mgd2hlcmUgeW91ciBtYWluIHNpdGUgcmVzaWRlcy4gVGhpcyBtYXkgZGlmZmVyIGZyb20geW91ciBXb3JkUHJlc3MgVVJMLiBGb3IgZXhhbXBsZTogaHR0cDovL2Zvby5jb20nICkgJT4KCQkJCTwvbGFiZWw+CgkJCTwvdGQ+CgkJCTx0ZD4KCQkJCTxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3VzdG9tSG9tZUVuYWJsZWQiIHZhbHVlPSJvbiIgb25DbGljaz0ialF1ZXJ5KCcjY3VzdG9tX2hvbWUnKS50b2dnbGUoKTsiIHN0eWxlPSJ3aWR0aDogYXV0bzsiPiA8c3BhbiBjbGFzcz0ibGlnaHQiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTNweDsiPk9wdGlvbmFsLiBEaXNhYmxlZCBieSBkZWZhdWx0Ljwvc3Bhbj4KCQkJPC90ZD4KCQkJPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CgkJPC90cj4KCQk8dHIgaWQ9ImN1c3RvbV9ob21lIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjwhLS0gU0lURSBBRERSRVNTIChTVEFOREFMT05FIE9OTFkpIC0tPgoJCQk8dGQ+CgkJCQkmbmJzcDsKCQkJPC90ZD4KCQkJPHRkPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJvbGRfc2V0dGluZyIgdmFsdWU9IjwlPSBkYXQuaG9tZXVybCAlPiIgRElTQUJMRUQ+CgkJCTwvdGQ+CgkJCTx0ZCBjbGFzcz0ic2V0dGluZ0NvcHkiPgoJCQkJPGEgaHJlZj0iIyIgdGl0bGU9IkNsaWNrIHRvIGNvcHkgb2xkIHNldHRpbmcgb3Zlci4iPiZyYXJyOzwvYT4KCQkJPC90ZD4KCQkJPHRkPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIHZhbHVlPSI8JT0gZGVmYXVsdFVSTCAlPiIgbmFtZT0iaG9tZXVybCI+CgkJCTwvdGQ+CgkJPC90cj4KCQoJCTwlIH0gLy8gZW5kIG5vbi1tdWx0aXNpdGUgJT4KCQoJCgk8L3RhYmxlPgoJPGJyPjxicj48YnI+CgkKCQoJCgkKCTxkaXYgY2xhc3M9Im1haW5fYm94X2Zvb3QiPgoJCTxicj4KCQk8Y2VudGVyPgoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJuZXh0U3RlcCIgdmFsdWU9Ik5leHQgU3RlcCIgY2xhc3M9Iml0LWJ1dHRvbiI+CgkJCTxidXR0b24gaHJlZj0iI3BiX2FkdmFuY2VkX21vZGFsIiBjbGFzcz0iaXQtYnV0dG9uIGl0LXNlY29uZGFyeSBsZWFuTW9kYWwiPkFkdmFuY2VkIE9wdGlvbnM8L2J1dHRvbj4KCQk8L2NlbnRlcj4KCgk8L2Rpdj4KCQoJCgkKCTxkaXYgaWQ9InBiX2FkdmFuY2VkX21vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCTxkaXYgY2xhc3M9Im1vZGFsIj4KCQkJPGRpdiBjbGFzcz0ibW9kYWxfaGVhZGVyIj4KCQkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4KCQkJCTxoMj5BZHZhbmNlZCBPcHRpb25zPC9oMj4KCQkJCUV4ZXJjaXNlIGNhdXRpb24gdXNpbmcgYWR2YW5jZWQgb3B0aW9ucy4gQWRkaXRpb25hbCBvcHRpb25zIGF2YWlsYWJsZSBvbiBzdWJzZXF1ZW50IHN0ZXBzLgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibW9kYWxfY29udGVudCI+CgkJCQkKCQkJCTxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IjEiIG5hbWU9Im1pZ3JhdGVEYXRhYmFzZSIKCQkJCQkgICBvbmNsaWNrPSIKCQkJCQlpZiAoIGpRdWVyeSh0aGlzKS5pcyggJzpjaGVja2VkJyApICkgeyAvLyBPbiBjaGVja2luZyB0aGlzIGJveCwgd2UgbmVlZCB0byBoaWRlIG9wdGlvbnM7IHVuY2hlY2tpbmcgc2hvdyBvcHRpb25zLgoJCQkJCQkJalF1ZXJ5KCAnI2RhdGFiYXNlX21pZ3JhdGVfb3B0aW9ucycgKS5zbGlkZURvd24oKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWpRdWVyeSggJyNkYXRhYmFzZV9taWdyYXRlX29wdGlvbnMnICkuc2xpZGVVcCgpOwoJCQkJCQl9CgkJCQkJCWpRdWVyeSggJyNkYXRhYmFzZV9taWdyYXRlX29wdGlvbnMgPiBpbnB1dCcgKS5yZW1vdmVBdHRyKCdjaGVja2VkJyk7IC8vIFVuY2hlY2sgYWxsIG9wdGlvbnMgd2l0aGluLgoJCQkJCSIgQ0hFQ0tFRD4gTWlncmF0ZSBVUkxzL3BhdGhzIGluIGRhdGFiYXNlIGZyb20gb2xkIGxvY2F0aW9uIHRvIG5ldy4gPGJyPgoJCQkJPGRpdiBpZD0iZGF0YWJhc2VfbWlncmF0ZV9vcHRpb25zIj4KCQkJCQk8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIxIiBuYW1lPSJtaWdyYXRlRGF0YWJhc2VCcnV0ZUZvcmNlIiBDSEVDS0VEPiBNaWdyYXRlIFVSTFMvcGF0aHMgaW4gZGF0YWJhc2UgaW4gYWxsIGxvY2F0aW9ucyB1c2luZyBicnV0ZSBmb3JjZS4gPCU9IHRpcCggJ0J5IGRlZmF1bHQgQmFja3VwQnVkZHkgd2lsbCBleHRlbnNpdmVseSBleGFtaW5lIGFuZCBtaWdyYXRlIHVua25vd24gZGF0YWJhc2UgdGFibGVzLiAgU29tZXRpbWVzIGhvd2V2ZXIgdGhpcyBjYW4gY2F1c2UgdGltZW91dHMgb24gbGFyZ2VyIHNpdGVzLiAgWW91IG1heSBza2lwIHRoaXMgaW50ZW5zaXZlIHByb2NlZHVyZSB0byByZWR1Y2UgcmVxdWlyZWQgcnVudGltZSBmb3IgZGF0YWJhc2UgbWlncmF0aW9uIHN0ZXBzLiBOb3RlIHRoYXQgc29tZSBVUkxzIG9yIHBhdGhzIG1heSBub3QgYmUgdXBkYXRlZCBpZiBza2lwcGluZyB0aGlzIHN0ZXAuICBBbGwgbWFqb3IgV29yZFByZXNzIFVSTHMgYW5kIHBhdGhzIHdpbGwgc3RpbGwgYmUgdXBkYXRlZCBob3dldmVyLicgKSAlPjxicj4KCQkJCQlNYXhpbXVtIHRpbWUgcGVyIGNodW5rIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBkYXRhYmFzZTogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im1heF9leGVjdXRpb25fdGltZSIgaWQ9Im1heF9leGVjdXRpb25fdGltZSIgdmFsdWU9IjwlPSBtYXhFeGVjdXRpb25UaW1lICU+IiBzaXplPSI1Ij4gc2Vjb25kcy4gPCU9IHRpcCggJ1RoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIEltcG9ydEJ1ZGR5IHNob3VsZCBhbGxvdyBhIGRhdGFiYXNlIGltcG9ydCBjaHVuayB0byBydW4uIEltcG9ydEJ1ZGR5IGJ5IGRlZmF1bHQgbGltaXRzIGVhY2ggY2h1bmsgdG8geW91ciBNYXhpbXVtIFBIUCBydW50aW1lLiBJZiB5b3VyIGRhdGFiYXNlIGltcG9ydCBzdGVwIGlzIHRpbWluZyBvdXQgdGhlbiBsb3dlcmluZyB0aGlzIHZhbHVlIHdpbGwgaW5zdHJ1Y3QgdGhlIHNjcmlwdCB0byBsaW1pdCBlYWNoIGBjaHVua2AgdG8gYWxsb3cgaXQgdG8gZmluaXNoIHdpdGhpbiB0aGlzIHRpbWUgcGVyaW9kLiBSYWlzaW5nIHRoaXMgdmFsdWUgYWJvdmUgeW91ciBzZXJ2ZXJzIGxpbWl0cyB3aWxsIG5vdCBpbmNyZWFzZSBvciBvdmVycmlkZSBzZXJ2ZXIgc2V0dGluZ3MuJyApICU+CgkJCQk8L2Rpdj4KCQkJCTxicj4KCQkJCQoJCQk8L2Rpdj4KCQk8L2Rpdj4KCTwvZGl2PgoJCgkKPC9mb3JtPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdfaWZyYW1lX2hlYWRlcicpOwpwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7CmVjaG8gIjxzY3JpcHQ+cGFnZVRpdGxlKCAnU3RlcCA1OiBNaWdyYXRpbmcgRGF0YWJhc2UnICk7PC9zY3JpcHQ+IjsKcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnTG9hZGluZyBzdGVwIDUuJyApOwplY2hvICI8c2NyaXB0PmJiX3Nob3dTdGVwKCAnbWlncmF0aW5nRGF0YWJhc2UnICk7PC9zY3JpcHQ+IjsKcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoKLy8gRmluYWwgZnVuY3Rpb25zIHRvIHJ1biBhZnRlciBEQiBtaWdyYXRpb24gaXMgZG9uZS4gSW4gZnVuY3Rpb24gc2luY2UgdGhpcyBpcyBjYWxsZWQgYm90aCBpbiBzdGFuZGFyZCBhbmQgYXQgZW5kIG9mIGRlcGxveW1lbnQuCmZ1bmN0aW9uIGZpbmFsQWN0aW9ucyggJHJlc3RvcmUgKSB7CgkKCS8vIE1pZ3JhdGUgaHRhY2Nlc3MuCglpZiAoIFRSVUUgIT09ICRyZXN0b3JlLT5fc3RhdGVbJ21pZ3JhdGVIdGFjY2VzcyddICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwaW5nIG1pZ3JhdGlvbiBvZiAuaHRhY2Nlc3MgZmlsZSBiYXNlZCBvbiBzZXR0aW5ncy4nICk7Cgl9IGVsc2UgewoJCSRyZXN0b3JlLT5taWdyYXRlSHRhY2Nlc3MoKTsKCX0KCgkvLyBSZW5hbWUgLmh0YWNjZXNzLmJiX3RlbXAgYmFjayB0byAuaHRhY2Nlc3MuCgkkcmVzdG9yZS0+cmVuYW1lSHRhY2Nlc3NUZW1wQmFjaygpOwoJCgkvLyBSZW1vdmUgYW55IHRlbXBvcmFyeSAubWFpbnRlbmFuY2UgZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5LgoJJHJlc3RvcmUtPm1haW50ZW5hbmNlT2ZmKCAkb25seU91ckNyZWF0ZWRGaWxlID0gdHJ1ZSApOwoJCgkvLyBSZW1vdmUgYW55IHRlbXBvcmFyeSBpbmRleC5odG0gZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5LgoJJHJlc3RvcmUtPnNjcnViSW5kZXhGaWxlcygpOwoJCgkkcmVzdG9yZS0+X3N0YXRlWydibG9nUHVibGljU3RhdHVzJ10gPSAkcmVzdG9yZS0+Z2V0QmxvZ1B1YmxpY1NldHRpbmcoKTsKCQoJLy8gVE9ETzogTWFrZSB0aGVzZSB0aG5pbmdzIGJlIGFibGUgdG8gb3V0cHV0IHN0dWZmIGludG8gdGhlIGNsZWFudXBTZXR0aW5ncy5odG0gdGVtcGxhdGUuIEFkZCBmdW5jdGlvbnM/CgkvLyBVcGRhdGUgd3Bjb25maWcgaWYgbmVlZGVkLgoJJHdwY29uZmlnX3Jlc3VsdCA9ICRyZXN0b3JlLT5taWdyYXRlV3BDb25maWcoKTsKCWlmICggJHdwY29uZmlnX3Jlc3VsdCAhPT0gdHJ1ZSApIHsKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdFcnJvcjogVW5hYmxlIHRvIHVwZGF0ZSB3cC1jb25maWcucGhwIGZpbGUuIFZlcmlmeSB3cml0ZSBwZXJtaXNzaW9ucyBmb3IgdGhlIHdwLWNvbmZpZy5waHAgZmlsZSB0aGVuIHJlZnJlc2ggdGhpcyBwYWdlLiBZb3UgbWF5IG1hbnVhbGx5IHVwZGF0ZSB5b3VyIHdwLWNvbmZpZy5waHAgZmlsZSBieSBjaGFuZ2luZyBpdCB0byB0aGUgZm9sbG93aW5nOjx0ZXh0YXJlYSByZWFkb25seT0icmVhZG9ubHkiIHN0eWxlPSJ3aWR0aDogODAlOyI+JyAuICR3cGNvbmZpZ19yZXN1bHQgLiAnPC90ZXh0YXJlYT4nICk7Cgl9CgkKCS8vIFNjYW4gZm9yICd0cm91YmxlJyBzdWNoIGFzIGEgcmVtYWluaW5nIC5tYWludGVuYW5jZSBmaWxlLCBpbmRleC5odG0sIGluZGV4Lmh0bWwsIG1pc3Npbmcgd3AtY29uZmlnLnBocCwgbWlzc2luZyAuaHRhY2Nlc3MsIGV0YyBldGMuCgkkcHJvYmxlbXMgPSAkcmVzdG9yZS0+dHJvdWJsZVNjYW4oKTsKCWlmICggY291bnQoICRwcm9ibGVtcyApID4gMCApIHsKCQkkcmVzdG9yZS0+X3N0YXRlWydwb3RlbnRpYWxQcm9ibGVtcyddID0gJHByb2JsZW1zOwoJCSR0cm91YmxlX3RleHQgPSAnJzsKCQlmb3JlYWNoKCAkcHJvYmxlbXMgYXMgJHByb2JsZW0gKSB7CgkJCSR0cm91YmxlX3RleHQgLj0gJzxsaT4nIC4gJHByb2JsZW0gLiAnPC9saT4nOwoJCX0KCQkkdHJvdWJsZV90ZXh0ID0gJzx1bD4nIC4gJHRyb3VibGVfdGV4dCAuICc8L3VsPic7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ3dhcm5pbmcnLCAnT25lIG9yIG1vcmUgcG90ZW50aWFsIGlzc3VlcyBkZXRlY3RlZCB0aGF0IG1heSByZXF1aXJlIHlvdXIgYXR0ZW50aW9uOiAnIC4gJHRyb3VibGVfdGV4dCApOwoJfQoJCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBmaW5hbCBhY3Rpb25zIGZ1bmN0aW9uLicgKTsKCQp9IC8vIEVuZCBmaW5hbEFjdGlvbnMoKS4KCgppZiAoICd0cnVlJyAhPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsgLy8gZGVwbG95bWVudCBtb2RlIHByZS1sb2FkcyBzdGF0ZSBkYXRhIGluIGEgZmlsZSBpbnN0ZWFkIG9mIHBhc3NpbmcgdmlhIHBvc3QuCgkvLyBQYXJzZSBzdWJtaXR0ZWQgcmVzdG9yZURhdGEgcmVzdG9yZSBzdGF0ZSBmcm9tIHByZXZpb3VzIHN0ZXAuCgkkcmVzdG9yZURhdGEgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKTsKCQoJCgkvLyBEZWNvZGUgc3VibWl0dGVkIGRhdGEsIHJlcG9ydGluZyBkZXRhaWxzIG9uIGZhaWx1cmUuCgkkZGVjb2RlRmFpbFJlYXNvbiA9ICcnOwoJaWYgKCBmYWxzZSA9PT0gKCAkcmVzdG9yZURhdGEgPSBiYXNlNjRfZGVjb2RlKCAkcmVzdG9yZURhdGEgKSApICkgeyAvLyBmYWxzZSBpZiBmYWlsZWQKCQkkZGVjb2RlRmFpbFJlYXNvbiA9ICdFUlJPUiAjODM4OTNiOiBSZXN0b3JlIGhhbHRlZC4gVW5hYmxlIHRvIGJhc2U2NF9kZWNvZGUoKSBzdWJtaXR0ZWQgZm9ybSBkYXRhIGAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApIC4gJ2AuJzsKCX0gZWxzZSB7IC8vIFN1Y2Nlc3MuCgkJJHJlc3RvcmVEYXRhID0gdXJsZGVjb2RlKCAkcmVzdG9yZURhdGEgKTsKCQlpZiAoIG51bGwgPT09ICggJHJlc3RvcmVEYXRhID0ganNvbl9kZWNvZGUoICRyZXN0b3JlRGF0YSwgdHJ1ZSApICkgKSB7IC8vIG51bGwgaWYgZmFpbGVkCgkJCSRtZXNzYWdlID0gJ0VSUk9SICM4Mzg5M2I6IFJlc3RvcmUgaGFsdGVkLiBVbmFibGUgdG8gZGVjb2RlIEpTT04gcmVzdG9yZSBiYXNlNjQgZGVjb2RlZCBkYXRhIGAnIC4gaHRtbGVudGl0aWVzKCBiYXNlNjRfZGVjb2RlKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApICkgLiAnYC4gQmVmb3JlIGJhc2U2NCBkZWNvZGU6IGAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApIC4gJ2AuJzsKCQkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdqc29uX2xhc3RfZXJyb3InICkgKSB7CgkJIAkJJG1lc3NhZ2UgLj0gJyBqc29uX2xhc3RfZXJyb3I6IGAnIC4ganNvbl9sYXN0X2Vycm9yKCkgLiAnYC4nOwoJCSAJfQoJCSAJJGRlY29kZUZhaWxSZWFzb24gPSAkbWVzc2FnZTsKCQl9IGVsc2UgeyAvLyBTdWNjZXNzLgoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTdWNjZXNzIGRlY29kaW5nIHN1Ym1pdHRlZCBlbmNvZGVkIGRhdGEuJyApOwoJCX0KCX0KCS8vIFJlcG9ydCBmYWlsdXJlIGFuZCBmYXRhbGx5IGhhbHQuCglpZiAoICcnICE9PSAkZGVjb2RlRmFpbFJlYXNvbiApIHsKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICRtZXNzYWdlICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQlkaWUoKTsKCX0KCQoJCn0gZWxzZSB7IC8vIERlcGxveW1lbnQKCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApICYmICggY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApID4gMCApICkgeyAvLyBEZWZhdWx0IHN0YXRlIG92ZXJyaWRlcyBleGlzdC4gQXBwbHkgdGhlbS4KCQkkcmVzdG9yZURhdGEgPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RlZmF1bHRfc3RhdGVfb3ZlcnJpZGVzJ107Cgl9IGVsc2UgewoJCWRpZSggJ0Vycm9yICM4NDM3OTc5NDQ6IE1pc3NpbmcgZXhwZWN0ZWQgZGVmYXVsdCBzdGF0ZSBvdmVycmlkZS4nICk7Cgl9Cn0KCgovLyBJbnN0YW50aWF0ZSByZXN0b3JlIGNsYXNzLgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL3Jlc3RvcmUucGhwJyApOwokcmVzdG9yZSA9IG5ldyBiYWNrdXBidWRkeV9yZXN0b3JlKCAncmVzdG9yZScsICRyZXN0b3JlRGF0YSApOwp1bnNldCggJHJlc3RvcmVEYXRhICk7IC8vIEFjY2VzcyB2aWEgJHJlc3RvcmUtPl9zdGF0ZSB0byBtYWtlIHN1cmUgaXQgaXMgYWx3YXlzIHVwIHRvIGRhdGUuCmlmICggJ3RydWUnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBXZSBkb250IGFjY2VwdCBzdWJtaXR0ZWQgZm9ybSBvcHRpb25zIGR1cmluZyBkZXBsb3kuCglpZiAoICEgaXNfYXJyYXkoICRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZVJlc3VtZVN0ZXBzJ10gKSApIHsgLy8gU2tpcCBwYXJzZSBvcHRpb25zIGlmIG5vdCBjaHVua2luZy4KCQkkcmVzdG9yZS0+X3N0YXRlID0gcGFyc2Vfb3B0aW9ucyggJHJlc3RvcmUtPl9zdGF0ZSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ05vdCByZXN1bWluZzsgcGFyc2luZyBvcHRpb25zLicgKTsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUmVzdW1pbmc7IHNraXBwaW5nIG9wdGlvbnMgcGFyc2UuJyApOwoJfQp9CgoKLy8gUGFyc2Ugc3VibWl0dGVkIG9wdGlvbnMvc2V0dGluZ3MuCmZ1bmN0aW9uIHBhcnNlX29wdGlvbnMoICRyZXN0b3JlRGF0YSApIHsKCWlmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21pZ3JhdGVEYXRhYmFzZScgKSApIHsgJHJlc3RvcmVEYXRhWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVEYXRhYmFzZSddID0gdHJ1ZTsgfSBlbHNlIHsgJHJlc3RvcmVEYXRhWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVEYXRhYmFzZSddID0gZmFsc2U7IH0KCWlmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21pZ3JhdGVEYXRhYmFzZUJydXRlRm9yY2UnICkgKSB7ICRyZXN0b3JlRGF0YVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlRGF0YWJhc2VCcnV0ZUZvcmNlJ10gPSB0cnVlOyB9IGVsc2UgeyAkcmVzdG9yZURhdGFbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZURhdGFiYXNlQnJ1dGVGb3JjZSddID0gZmFsc2U7IH0KCgkkcmVzdG9yZURhdGFbJ3NpdGV1cmwnXSA9IHByZWdfcmVwbGFjZSggJ3wvKiR8JywgJycsIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3NpdGV1cmwnICkgKTsgLy8gU3RyaXAgdHJhaWxpbmcgc2xhc2hlcy4KCSRyZXN0b3JlRGF0YVsnaG9tZXVybCddID0gcHJlZ19yZXBsYWNlKCAnfC8qJHwnLCAnJywgcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnaG9tZXVybCcgKSApOyAvLyBTdHJpcCB0cmFpbGluZyBzbGFzaGVzLgoJaWYgKCAoICdvbicgIT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3VzdG9tSG9tZUVuYWJsZWQnICkgKSB8fCAoICcnID09ICRyZXN0b3JlRGF0YVsnaG9tZXVybCddICkgKSB7IC8vIEhvbWUgdXJsIHdhcyBibGFuayBPUiB0aGV5IGRpZCBub3QgY2hlY2sgdG8gY3VzdG9taXplIHRoZSBob21lIHVybCBzbyBqdXN0IHNldCBpdCB0byBzaXRldXJsLgoJCSRyZXN0b3JlRGF0YVsnaG9tZXVybCddID0gJHJlc3RvcmVEYXRhWydzaXRldXJsJ107Cgl9CgkkcmVzdG9yZURhdGFbJ21heEV4ZWN1dGlvblRpbWUnXSA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21heF9leGVjdXRpb25fdGltZScgKTsKCQoJcmV0dXJuICRyZXN0b3JlRGF0YTsKfQoKCi8vIElmIGRlcGxveW1lbnQgYW5kIG5vIHRhYmxlcyBpbXBvcnRlZCB0aGVuIHNraXAgbWlncmF0aW9uLgpwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTUUwgZmlsZXMgaW1wb3J0ZWQ6ICcgLiBjb3VudCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydzcWxGaWxlcyddICkgLiAnOyBEZXBsb3k/OiAnIC4gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKTsKaWYgKCAndHJ1ZScgPT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7CglpZiAoIDAgPT0gY291bnQoICRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnc3FsRmlsZXMnXSApICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0RlcGxveSBtb2RlIGFuZCBubyBTUUwgZmlsZXMgaW1wb3J0ZWQgc28gc2tpcHBpbmcgZGF0YWJhc2UgbWlncmF0aW9uIHN0ZXAuJyApOwoJCSRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZURhdGFiYXNlJ10gPSBmYWxzZTsKCQkKCQlmaW5hbEFjdGlvbnMoICRyZXN0b3JlICk7CgkJJG5leHRTdGVwTnVtID0gNjsKCQllY2hvICc8IS0tIEFVVE9QUk9DRUVEIFRPIFNURVAgJyAuICRuZXh0U3RlcE51bSAuICcgLS0+JzsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGVwbG95IG1vZGUgYnV0IFNRTCBmaWxlcyBpbXBvcnRlZCAoYCcgLiBjb3VudCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydzcWxGaWxlcyddICkgLiAnYCB0b3RhbCkgc28gbm90IHNraXBwaW5nIGRhdGFiYXNlIG1pZ3JhdGlvbiBzdGVwLicgKTsKCX0KfQoKCmlmICggVFJVRSAhPT0gJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlRGF0YWJhc2UnXSApIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwaW5nIG1pZ3JhdGlvbiBvZiBkYXRhYmFzZSBiYXNlZCBvbiBhZHZhbmNlZCBzZXR0aW5ncy4nICk7CgllY2hvICI8c2NyaXB0PmJiX2FjdGlvbiggJ2RhdGFiYXNlTWlncmF0aW9uU2tpcHBlZCcgKTs8L3NjcmlwdD4iOwoJJG1pZ3JhdGVSZXN1bHRzID0gdHJ1ZTsKfSBlbHNlIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1N0YXJ0aW5nIGRhdGFiYXNlIG1pZ3JhdGlvbiBwcm9jZWR1cmVzLicgKTsKCQoJLy8gQ29ubmVjdCBJbXBvcnRCdWRkeSB0byB0aGUgZGF0YWJhc2UuCgkkcmVzdG9yZS0+Y29ubmVjdERhdGFiYXNlKCk7CgkKCSRvdmVycmlkZVByZWZpeCA9ICcnOwoJaWYgKCAndHJ1ZScgPT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7CgkJJG92ZXJyaWRlUHJlZml4ID0gJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWyd0ZW1wUHJlZml4J107Cgl9CgkKCXJlcXVpcmVfb25jZSggJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvX21pZ3JhdGVfZGF0YWJhc2UucGhwJyApOwoJJG1pZ3JhdGUgPSBuZXcgYmFja3VwYnVkZHlfbWlncmF0ZURCKCAnc3RhbmRhbG9uZScsICRyZXN0b3JlLT5fc3RhdGUsICRuZXR3b3JrUHJlZml4ID0gJycsICRvdmVycmlkZVByZWZpeCApOwoJJG1pZ3JhdGVSZXN1bHRzID0gJG1pZ3JhdGUtPm1pZ3JhdGUoKTsKCQoJCglpZiAoICd0cnVlJyA9PSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsKCQlpZiAoIGlzX2FycmF5KCAkbWlncmF0ZVJlc3VsdHMgKSApIHsgLy8gUmV0dXJuIHRvIHNhbWUgc3RlcCBmb3IgY29udGludWluZyBjaHVua2luZy4KCQkJJG5leHRTdGVwTnVtID0gNTsKCQl9IGVsc2UgewoJCQkvL2Vycm9yX2xvZyggJ1NUQVRFOiAnIC4gcHJpbnRfciggJHJlc3RvcmUtPl9zdGF0ZSwgdHJ1ZSApICk7CgkJCS8vIERvbid0IGF0dGVtcHQgdG8gc3dhcCBvdXQgYmFja3VwYnVkZHkgc2V0dGluZ3MgZnJvbSBvcHRpb25zIHRhYmxlIGlmIG9wdGlvbnMgdGFibGUgd2Fzbid0IHB1bGxlZC4KCQkJaWYgKCBpc3NldCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0J11bJ3RhYmxlc19zaXplcyddICkgJiYgKCAhIGlzc2V0KCAkcmVzdG9yZS0+X3N0YXRlWydkYXQnXVsndGFibGVzX3NpemVzJ11bICRyZXN0b3JlLT5fc3RhdGVbJ2RhdCddWydkYl9wcmVmaXgnXSAuICdvcHRpb25zJyBdICkgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ09wdGlvbnMgdGFibGUgd2FzIG5vdCBiYWNrZWQgdXAuIFNraXBwaW5nIHN3YXAgb3V0IG9mIEJhY2t1cEJ1ZGR5IHNldHRpbmdzLicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ09wdGlvbnMgdGFibGUgd2FzIGJhY2tlZCB1cC4gU3dhcHBpbmcgb3V0IG9mIEJhY2t1cEJ1ZGR5IHNldHRpbmdzLicgKTsKCQkJCWlmICggdHJ1ZSAhPT0gJHJlc3RvcmUtPnN3YXBEYXRhYmFzZUJCU2V0dGluZ3MoKSApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzMyOTIzNzM6IFVuYWJsZSB0byBzd2FwIG91dCBCYWNrdXBCdWRkeSBzZXR0aW5ncy4gVGhpcyBtYXkgbm90IGJlIGEgZmF0YWwgZXJyb3IuJyApOwoJCQkJfSBlbHNlIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBzd2FwcGluZyBCYWNrdXBCdWRkeSBzZXR0aW5ncy4nICk7CgkJCQl9CgkJCX0KCQkJCgkJCS8vIFN3YXAgb3V0IG5ldyBhbmQgb2xkIGRhdGFiYXNlIHByZWZpeGVzLgoJCQlpZiAoIHRydWUgIT09ICRyZXN0b3JlLT5zd2FwRGF0YWJhc2VzKCkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzg0Mzc4OiBVbmFibGUgdG8gc3dhcCBvdXQgdGVtcG9yYXJ5IGRhdGFiYXNlIHByZWZpeGVzLicgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdoYWx0U2NyaXB0JywgJycgKTsgLy8gSGFsdCBKUyBvbiBwYWdlLgoJCQkJcmV0dXJuOwoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgc3dhcHBpbmcgZGF0YWJhc2UgYmFzZWQgb24gdGVtcG9yYXJ5IGFuZCBsaXZlIHByZWZpeGVzLicgKTsKCQkJfQoJCQkKCQkJZmluYWxBY3Rpb25zKCAkcmVzdG9yZSApOwoJCQkkbmV4dFN0ZXBOdW0gPSA2OwoJCX0KCQllY2hvICc8IS0tIEFVVE9QUk9DRUVEIFRPIFNURVAgJyAuICRuZXh0U3RlcE51bSAuICcgLS0+JzsKCQkKCX0gZWxzZSB7IC8vIFN0YW5kYXJkIGltcG9ydCAobm90IGRlcGxveSkKCQkKCQlpZiAoIFRSVUUgPT09ICRtaWdyYXRlUmVzdWx0cyApIHsgLy8gQ29tcGxldGVkIHN1Y2Nlc3NmdWxseS4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGNvbXBsZXRlZC4nICk7CgkJCWVjaG8gIjxzY3JpcHQ+YmJfYWN0aW9uKCAnZGF0YWJhc2VNaWdyYXRpb25TdWNjZXNzJyApOzwvc2NyaXB0PiI7CgkJfSBlbHNlaWYgKCBpc19hcnJheSggJG1pZ3JhdGVSZXN1bHRzICkgKSB7IC8vIENodW5raW5nLgoJCQkkcmVzdG9yZS0+X3N0YXRlWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVSZXN1bWVTdGVwcyddID0gKGFycmF5KSRtaWdyYXRlUmVzdWx0c1swXTsKCQkJJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlUmVzdW1lUG9pbnQnXSA9ICRtaWdyYXRlUmVzdWx0c1sxXTsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGRpZCBub3QgZnVsbHkgY29tcGxldGUgaW4gZmlyc3QgcGFzcy4gQ2h1bmtpbmcgaW4gcHJvZ3Jlc3MuIFJlc3VtaW5nIHdoZXJlIGxlZnQgb2ZmLicgKTsKCQkJPz4KCQkJPGZvcm0gaWQ9Im1pZ3JhdGVDaHVua0Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSI/YWpheD01Ij4KCQkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmVEYXRhIiB2YWx1ZT0iPD9waHAgZWNobyBiYXNlNjRfZW5jb2RlKCB1cmxlbmNvZGUoIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgKSApOyA/PiI+CgkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXRGb3JtIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiB2YWx1ZT0iTmV4dCBTdGVwIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCQk8L2Zvcm0+CgkJCTxzY3JpcHQ+CgkJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCQkJCWpRdWVyeSggJyNtaWdyYXRlQ2h1bmtGb3JtJyApLnN1Ym1pdCgpOwoJCQkJfSk7CgkJCTwvc2NyaXB0PgoJCQk8P3BocAoJCX0gZWxzZSB7IC8vIEZhaWxlZC4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGZhaWxlZC4gUmVzdWx0OiBgJyAuICRtaWdyYXRlUmVzdWx0cyAuICdgLicgKTsKCQkJZWNobyAiPHNjcmlwdD5iYl9hY3Rpb24oICdkYXRhYmFzZU1pZ3JhdGlvbkZhaWxlZCcgKTs8L3NjcmlwdD4iOwoJCX0KCQkKCX0KfQoKCmlmICggJ3RydWUnID09IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBEZXBsb3ltZW50CgkKCS8vIFdyaXRlIGRlZmF1bHQgc3RhdGUgb3ZlcnJpZGVzLgoJZ2xvYmFsICRpbXBvcnRidWRkeV9maWxlOwoJJGltcG9ydEZpbGVTZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGltcG9ydGJ1ZGR5X2ZpbGUgKTsKCSRzdGF0ZV9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydEZpbGVTZXJpYWwgLiAnLXN0YXRlLnBocCc7CglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdXcml0aW5nIHRvIHN0YXRlIGZpbGUgYCcgLiAkc3RhdGVfZmlsZSAuICdgLicgKTsKCWlmICggZmFsc2UgPT09ICggJGZpbGVfaGFuZGxlID0gQGZvcGVuKCAkc3RhdGVfZmlsZSwgJ3cnICkgKSApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzMyODkzNzogVGVtcCBzdGF0ZSBmaWxlIGlzIG5vdCBjcmVhdGFibGUvd3JpdGFibGUuIENoZWNrIHlvdXIgcGVybWlzc2lvbnMuICgnIC4gJHN0YXRlX2ZpbGUgLiAnKScgKTsKCQlyZXR1cm4gZmFsc2U7Cgl9CglpZiAoIGZhbHNlID09PSBmd3JpdGUoICRmaWxlX2hhbmRsZSwgIjw/cGhwIGRpZSgnQWNjZXNzIERlbmllZC4nKTsgLy8gPCEtLSA/PlxuIiAuIGJhc2U2NF9lbmNvZGUoIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgKSApICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdFcnJvciAjMjM4OTM3MzogVW5hYmxlIHRvIHdyaXRlIHRvIHN0YXRlIGZpbGUuJyApOwoJfSBlbHNlIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdXcm90ZSB0byBzdGF0ZSBmaWxlLicgKTsKCX0KCWZjbG9zZSggJGZpbGVfaGFuZGxlICk7CgkKCWlmICggNiA9PSAkbmV4dFN0ZXBOdW0gKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnTW92aW5nIHRvIGNsZWFudXAgc3RlcCBuZXh0Li4uJyApOwoJfSBlbHNlIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDaHVua2luZyBkYXRhYmFzZSBtaWdyYXRpb24gc28gYWJvdXQgdG8gcnVuIHN0ZXAgYCcgLiAkbmV4dFN0ZXBOdW0gLiAnYC4nICk7Cgl9Cgk/PgoJPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ij9hamF4PTw/cGhwIGVjaG8gJG5leHRTdGVwTnVtOyA/PiZ2PTw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICd2JyApOyA/PiZkZXBsb3k9dHJ1ZSZkaXJlY3Rpb249PD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RpcmVjdGlvbicgKTsgPz4mZGlzcGxheV9tb2RlPWVtYmVkIiBpZD0iZGVwbG95LWF1dG9Qcm9jZWVkIj4KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlRGF0YSIgdmFsdWU9Ijw/cGhwIGVjaG8gYmFzZTY0X2VuY29kZSggdXJsZW5jb2RlKCBqc29uX2VuY29kZSggJHJlc3RvcmUtPl9zdGF0ZSApICkgKTsgPz4iPgoJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9Im15LXN1Ym1pdCIgdmFsdWU9Ik5leHQgU3RlcCIgc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbjsiPgoJPC9mb3JtPgoJPHNjcmlwdD5zZXRUaW1lb3V0KCBmdW5jdGlvbigpeyBqUXVlcnkoICcjZGVwbG95LWF1dG9Qcm9jZWVkJyApLnN1Ym1pdCgpOyB9LCAzMDAwICk7PC9zY3JpcHQ+Cgk8P3BocAoJcmV0dXJuOwoJCn0gZWxzZSB7IC8vIFN0YW5kYXJkIGltcG9ydAoJCgkvLyBTdWNjZXNzIChvciBtaWdyYXRlIHdhcyBza2lwcGVkKS4KCWlmICggdHJ1ZSA9PT0gJG1pZ3JhdGVSZXN1bHRzICkgewoJCQoJCWZpbmFsQWN0aW9ucyggJHJlc3RvcmUgKTsKCQkKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hpbmcgc3RlcCA1LicgKTsKCQllY2hvICI8c2NyaXB0PgoJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7CgkJCXBhZ2VUaXRsZSggJ1N0ZXAgNjogVmVyaWZ5IFNpdGUgJiBGaW5pc2gnICk7CgkJCWJiX3Nob3dTdGVwKCAnY2xlYW51cFNldHRpbmdzJywgIiAuIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgLiAiICk7CgkJfSwgMjAwMCApOwoJCTwvc2NyaXB0PiI7CgkJCgl9Cgp9CgoKcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ19pZnJhbWVfZm9vdGVyJyk7Cgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKLy9wcmludF9yKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoKSApOwoKJGNwYW5lbF91c2VyID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VzZXInICk7CiRjcGFuZWxfcGFzc3dvcmQgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfcGFzcycgKTsKJGNwYW5lbF9ob3N0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VybCcgKTsKJGNwYW5lbF9wb3J0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3BvcnQnICk7CiRjcGFuZWxfcHJvdG9jb2wgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfcHJvdG9jb2wnICk7CiRkYl9uYW1lID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX2RibmFtZScgKTsKJGRiX3VzZXIgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJ1c2VyJyApOwokZGJfcGFzcyA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2NwYW5lbF9kYnBhc3MnICk7CgovLyBOZWVkZWQgZm9yIEhUVFAgcmVxdWVzdHMuCiRyZXF1ZXN0Y29yZV9maWxlID0gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9yZXF1ZXN0Y29yZS9yZXF1ZXN0Y29yZS5jbGFzcy5waHAnOwpyZXF1aXJlX29uY2UoICRyZXF1ZXN0Y29yZV9maWxlICk7CgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvY3BhbmVsL2NwYW5lbC5waHAnICk7CiRjcmVhdGVfZGJfcmVzdWx0ID0gcGJfYmFja3VwYnVkZHlfY3BhbmVsOjpjcmVhdGVfZGIoICRjcGFuZWxfdXNlciwgJGNwYW5lbF9wYXNzd29yZCwgJGNwYW5lbF9ob3N0LCAkZGJfbmFtZSwgJGRiX3VzZXIsICRkYl9wYXNzLCAkY3BhbmVsX3BvcnQsICRjcGFuZWxfcHJvdG9jb2wgKTsKCmlmICggJGNyZWF0ZV9kYl9yZXN1bHQgPT09IHRydWUgKSB7CgllY2hvICdTdWNjZXNzISBDcmVhdGVkIGRhdGFiYXNlLCB1c2VyLCBhbmQgYXNzaWduZWQgdXNlciB0byBkYXRhYmFzZS4nOwp9IGVsc2UgewoJZWNobyAiVW5hYmxlIHRvIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGRhdGFiYXNlIHdpdGggdGhlIHByb3ZpZGVkIHNldHRpbmdzLiBDaGVjayBzZXR0aW5ncyBvciBtYW51YWxseSBjcmVhdGUgdGhlIGRhdGFiYXNlIGZyb20geW91ciBob3N0J3MgY29udHJvbCBwYW5lbC4gU2VlIHR1dG9yaWFsIGF0OiAiOwoJZWNobyAiaHR0cDovL2l0aGVtZXMuY29tL3R1dG9yaWFsLWNyZWF0ZS1kYXRhYmFzZS1pbi1jcGFuZWwvXG5cbiI7CgllY2hvICJFcnJvciBkZXRhaWxzOlxuIiAuIGltcGxvZGUoICJcbiIsICRjcmVhdGVfZGJfcmVzdWx0KTsKfQoKZGllKCk7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokZmlsZSA9IEFCU1BBVEggLiBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdmaWxlJyApOwoKaWYgKCAnJyA9PSAkZmlsZSApIHsKCWRpZSggJ05vIGZpbGUgcGFzc2VkLicgKTsKfQppZiAoICEgZmlsZV9leGlzdHMoICRmaWxlICkgKSB7CglkaWUoICdGaWxlIG5vdCBmb3VuZC4nICk7Cn0KCiRmaWxlSGFzaCA9IEBtZDVfZmlsZSggJGZpbGUgKTsKCmlmICggZmFsc2UgPT09ICRmaWxlSGFzaCApIHsKCWRpZSggJ1VuYWJsZSB0byBjYWxjdWxhdGUgaGFzaC4gVmVyaWZ5IGZpbGUgcGVybWlzc2lvbnMuJyApOwp9IGVsc2UgewoJZGllKCBqc29uX2VuY29kZSggYXJyYXkoICdoYXNoJyA9PiAkZmlsZUhhc2ggKSApICk7Cn0=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgppZiAoICd0cnVlJyAhPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsKCWRpZSggJ0FjY2VzcyBkZW5pZWQuJyApOwp9CgovLyBPbmx5IGFsbG93IGFjY2VzcyB0byB0aGlzIGZpbGUgaWYgaXQgaGFzIGEgc2VyaWFsIGhpZGluZyBpdC4gVXNlZCBieSBkZXBsb3ltZW50LgpnbG9iYWwgJGltcG9ydGJ1ZGR5X2ZpbGU7CiRpbXBvcnRGaWxlU2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRpbXBvcnRidWRkeV9maWxlICk7CmlmICggJycgPT0gJGltcG9ydEZpbGVTZXJpYWwgKSB7CglkaWUoICdBY2Nlc3MgZGVuaWVkLicgKTsKfQoKcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnKioqIEVuZCBJbXBvcnRCdWRkeSBMb2cgU2VjdGlvbiAoRGVwbG95bWVudCknICk7CgovLyBMb2cgdG8gbWFrZSBhIGNvcHkgb2YgcmV0cmlldmVkIGRlcGxveSBpbmZvIGludG8uCiRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7CiRiYWNrdXBfbG9nX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdzdGF0dXMtZGVwbG95Y29weS0nIC4gJGltcG9ydEZpbGVTZXJpYWwgLiAnLnR4dCc7Cgokc3RhdHVzX2xpbmVzID0gcGJfYmFja3VwYnVkZHk6OmdldF9zdGF0dXMoICcnLCB0cnVlLCBmYWxzZSwgdHJ1ZSwgJGJhY2t1cF9sb2dfZmlsZSApOyAvLyBDbGVhciBmaWxlLCBkb250IHVubGluayBmaWxlLCBzdXByZXNzIHN0YXR1cyByZXRyaWV2YWwgbXNnLCBiYWNrdXAgaW50byAkbG9nX2ZpbGUKZWNobyBpbXBsb2RlKCAnJywgJHN0YXR1c19saW5lcyApOwo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgppZiAoICcnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ25ld3Bhc3N3b3JkJyApICkgewoJZGllKCAnRXJyb3IgIzg0OTM0ODk6IE1pc3NpbmcgcGFzc3dvcmQuJyApOwp9CgpkaWUoIG1kNSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbmV3cGFzc3dvcmQnICkgKSApOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgovLyBJbmNsdWRlIHRoZSBEQiBUZXN0cyBjbGFzcyBhbmQgaW5pdCBpdC4KcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvdGVzdC1kYi5waHAnICk7CiRpbXBvcnRidWRkeV90ZXN0X2RiID0gbmV3IGltcG9ydGJ1ZGR5X3Rlc3RfZGIoKTsK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
PD9waHAKZGllKCk7CgppZiAoICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApIHx8ICggdHJ1ZSAhPT0gUEJfSU1QT1JUQlVERFkgKSApIHsKCWRpZSggJzxodG1sPjwvaHRtbD4nICk7Cn0KCkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgo/Pgo8ZGl2IGlkPSJwYl9jcmVhdGVhZG1pbl9tb2RhbCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IGhlaWdodDogOTAlOyI+CgkJPGRpdiBjbGFzcz0ibW9kYWwiPgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9oZWFkZXIiPgoJCQkJPGEgY2xhc3M9Im1vZGFsX2Nsb3NlIj4mdGltZXM7PC9hPgoJCQkJPGgyPlNlcnZlciBJbmZvcm1hdGlvbjwvaDI+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9jb250ZW50Ij4KCQkJCQoJCQkJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJCQkJCWpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CgkJCQkJCWpRdWVyeSggJyNjcmVhdGVhZG1pbl9mb3JtJyApLnN1Ym1pdChmdW5jdGlvbigpewoJCQkJCQkJCgkJCQkJCQlqUXVlcnkoICcuY3JlYXRlYWRtaW5fbG9hZGluZycgKS5zaG93KCk7CgkJCQkJCQlqUXVlcnkucG9zdCgnaW1wb3J0YnVkZHkucGhwP2FqYXg9Y3JlYXRlX2FkbWluJywKCQkJCQkJCQlqUXVlcnkoICcjY3JlYXRlYWRtaW5fZm9ybScgKS5zZXJpYWxpemUoKSwgZnVuY3Rpb24oZGF0YSkgewoJCQkJCQkJCQkKCQkJCQkJCQkJZGF0YSA9IGpRdWVyeS50cmltKCBkYXRhICk7CgkJCQkJCQkJCWpRdWVyeSggJy5jcmVhdGVhZG1pbl9sb2FkaW5nJyApLmhpZGUoKTsKCQkJCQkJCQkJCgkJCQkJCQkJCWlmICggZGF0YSA9PSAnMScgKSB7CgkJCQkJCQkJCQlhbGVydCggJ1N1Y2Nlc3MnICk7CgkJCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJCQlhbGVydCggJ0Vycm9yOiAnICsgZGF0YSApOwoJCQkJCQkJCQl9CgkJCQkJCQkJCQoJCQkJCQkJCX0KCQkJCQkJCSk7CgkJCQkJCQkKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJCQoJCQkJCQl9KTsKCQkJCQl9KTsKCQkJCTwvc2NyaXB0PgoJCQkJCgkJCQk8Zm9ybSBpZD0iY3JlYXRlYWRtaW5fZm9ybSI+CgkJCQkJVXNlcm5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSI+CgkJCQkJRW1haWw6IDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iZW1haWwiPgoJCQkJCVBhc3N3b3JkOiA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIj4KCQkJCQlDb25maXJtIFBhc3N3b3JkOiA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkX2NvbmZpcm0iPgoJCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkNyZWF0ZSBBZG1pbiBVc2VyIiBjbGFzcz0iYnV0dG9uIj4KCQkJCQk8c3BhbiBjbGFzcz0iY3JlYXRlYWRtaW5fbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmcuZ2lmIiBhbHQ9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgdGl0bGU9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij48L3NwYW4+CgkJCQk8L2Zvcm0+CgkJCQkKCQkJCQoJCTwvZGl2PgoJPC9kaXY+CjwvZGl2Pgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgoKJGRhdGEgPSBhcnJheSgpOwpwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnZGJyZXBsYWNlJywgJGRhdGEgKTsKPz48c2NyaXB0PmpRdWVyeSggJyNwYWdlVGl0bGUnICkuaHRtbCggJ0RhdGFiYXNlIFRleHQgUmVwbGFjZScgKTs8L3NjcmlwdD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgoKLyoqKioqKiBCRUdJTiBBVVRIRU5USUNBVElPTiAqKioqKi8KLy9yZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY2xhc3Nlcy9hdXRoLnBocCcgKTsKQXV0aDo6Y2hlY2soKTsKaWYgKCAoIHRydWUgPT09IEF1dGg6OmlzX2F1dGhlbnRpY2F0ZWQoKSApICYmICggJ2xvZ2luJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdhY3Rpb24nICkgKSApIHsgLy8gT24gc3VjY2Vzc2Z1bCBsb2dpbiB0byBzdGVwIDAsIHJlZGlyZWN0IHRvIHN0ZXAgMS4KCWhlYWRlciggJ0xvY2F0aW9uOiAnIC4gcGJfYmFja3VwYnVkZHk6OnBhZ2VfdXJsKCkgKTsKfQovKioqKioqIEVORCBBVVRIRU5USUNBVElPTiAqKioqKi8KCgokbW9kZSA9ICdodG1sJzsKCgovLyBSZWdpc3RlciBQSFAgc2h1dGRvd24gZnVuY3Rpb24gdG8gaGVscCBjYXRjaCBhbmQgbG9nIGZhdGFsIFBIUCBlcnJvcnMgZHVyaW5nIGJhY2t1cC4KcmVnaXN0ZXJfc2h1dGRvd25fZnVuY3Rpb24oICdzaHV0ZG93bl9mdW5jdGlvbicgKTsKLy9lcnJvcl9yZXBvcnRpbmcoIEVfRVJST1IgfCBFX1dBUk5JTkcgfCBFX1BBUlNFIHwgRV9OT1RJQ0UgKTsgLy8gSElHSAoKLyoJc2h1dGRvd25fZnVuY3Rpb24oKQogKgkKICoJVXNlZCBmb3IgY2F0Y2hpbmcgZmF0YWwgUEhQIGVycm9ycyBkdXJpbmcgYmFja3VwIHRvIHdyaXRlIHRvIGxvZyBmb3IgZGVidWdnaW5nLgogKgkKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gc2h1dGRvd25fZnVuY3Rpb24oKSB7CgkKCQoJLy8gR2V0IGVycm9yIG1lc3NhZ2UuCgkvLyBFcnJvciB0eXBlczogaHR0cDovL3BocC5uZXQvbWFudWFsL2VuL2Vycm9yZnVuYy5jb25zdGFudHMucGhwCgkkZSA9IGVycm9yX2dldF9sYXN0KCk7CglpZiAoICRlID09PSBOVUxMICkgeyAvLyBObyBlcnJvciBvZiBhbnkga2luZC4KCQlyZXR1cm47Cgl9IGVsc2UgeyAvLyBTb21lIHR5cGUgb2YgZXJyb3IuCgkJaWYgKCAhaXNfYXJyYXkoICRlICkgfHwgKCAkZVsndHlwZSddICE9IEVfRVJST1IgKSAmJiAoICRlWyd0eXBlJ10gIT0gRV9VU0VSX0VSUk9SICkgKSB7IC8vIFJldHVybiBpZiBub3QgYSBmYXRhbCBlcnJvci4KCQkJLy9lY2hvICc8IS0tICcgLiBwcmludF9yKCAkZSwgdHJ1ZSApIC4gJyAtLT4nIC4gIlxuIjsKCQkJcmV0dXJuOwoJCX0KCX0KCQoJCgkvLyBDYWxjdWxhdGUgbG9nIGRpcmVjdG9yeS4KCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7IC8vIEFsc28gaGFuZGxlIHdoZW4gaW4gaW1wb3J0YnVkZHkuCgkkbWFpbl9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnbG9nLScgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JzsKCQoJCgkvLyBEZXRlcm1pbmUgaWYgd3JpdGluZyB0byBhIHNlcmlhbCBsb2cuCglpZiAoIHBiX2JhY2t1cGJ1ZGR5OjokX3N0YXR1c19zZXJpYWwgIT0gJycgKSB7CgkJJHNlcmlhbCA9IHBiX2JhY2t1cGJ1ZGR5OjokX3N0YXR1c19zZXJpYWw7CgkJJHNlcmlhbF9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiAkc2VyaWFsIC4gJ18nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCc7CgkJJHdyaXRlX3NlcmlhbCA9IHRydWU7Cgl9IGVsc2UgewoJCSR3cml0ZV9zZXJpYWwgPSBmYWxzZTsKCX0KCQoJCgkvLyBGb3JtYXQgZXJyb3IgbWVzc2FnZS4KCSRlX3N0cmluZyA9ICctLS0tLSBGQVRBTCBFUlJPUiAtLS0tLSBBIGZhdGFsIFBIUCBlcnJvciB3YXMgZW5jb3VudGVyZWQ6ICc7Cglmb3JlYWNoKCAoYXJyYXkpJGUgYXMgJGVfbGluZV90aXRsZSA9PiAkZV9saW5lICkgewoJCSRlX3N0cmluZyAuPSAkZV9saW5lX3RpdGxlIC4gJyA9PiAnIC4gJGVfbGluZSAuICI7ICI7Cgl9CgkkZV9zdHJpbmcgPSBydHJpbSggJGVfc3RyaW5nLCAnOyAnICkgLiAnLic7CgkKCS8vIFdyaXRlIHRvIGxvZy4KCUBmaWxlX3B1dF9jb250ZW50cyggJG1haW5fZmlsZSwgJGVfc3RyaW5nLCBGSUxFX0FQUEVORCApOwoJCgkvLyBJTVBPUlRCVUREWQoJJHN0YXR1cyA9IHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5kYXRlKCB0aW1lKCkgKSAuICJcdCIgLgoJCQkJc3ByaW50ZiggIiUwMS4yZiIsIHJvdW5kKCBtaWNyb3RpbWUoIHRydWUgKSAtIHBiX2JhY2t1cGJ1ZGR5Ojokc3RhcnRfdGltZSwgMiApICkgLiAiXHQiIC4KCQkJCXNwcmludGYoICIlMDEuMmYiLCByb3VuZCggbWVtb3J5X2dldF9wZWFrX3VzYWdlKCkgLyAxMDQ4NTc2LCAyICkgKSAuICJcdCIgLgoJCQkJJ2Vycm9yJyAuICJcdFx0IiAuCgkJCQlzdHJfcmVwbGFjZSggY2hyKDkpLCAnICAgJywgJGVfc3RyaW5nICkKCQkJOwoJJHN0YXR1cyA9IHN0cl9yZXBsYWNlKCAnXFwnLCAnLycsICRzdGF0dXMgKTsKCWVjaG8gJzxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5wYl9zdGF0dXNfYXBwZW5kKCInIC4gc3RyX3JlcGxhY2UoICciJywgJyZxdW90OycsICRzdGF0dXMgKSAuICciKTs8L3NjcmlwdD4nOwoJCn0gLy8gRW5kIHNodXRkb3duX2Z1bmN0aW9uLgoKCi8vIEhhbmRsZSBBSkFYLgokYWpheCA9ICcnOwppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2FqYXgnICkgIT0gJycgKSB7CgkkYWpheCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2FqYXgnICk7Cn0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdhamF4JyApICE9ICcnICkgewoJJGFqYXggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2FqYXgnICk7Cn0KaWYgKCAkYWpheCAhPSAnJyApIHsgLy8gQUpBWAoJaWYgKCAkYWpheCAhPSAnaGFzaF9mb3Jnb3RwYXNzJyApIHsKCQlBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoJfQoJCgkkcGFnZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY29udHJvbGxlcnMvYWpheC8nIC4gJGFqYXggLiAnLnBocCc7CglpZiAoIGZpbGVfZXhpc3RzKCAkcGFnZSApICkgewoJCXJlcXVpcmVfb25jZSggJHBhZ2UgKTsKCX0gZWxzZSB7CgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIEFKQVggYWN0aW9uIGAnIC4gaHRtbGVudGl0aWVzKCAkYWpheCApIC4gJ2AgRmlsZSBub3QgZm91bmQ6IGAnIC4gJHBhZ2UgLiAnYC59JzsKCX0KCXJldHVybjsKCQp9CgoKLy8gRGV0ZXJtaW5lIHBhZ2UgdG8gbG9hZC4KaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhZ2UnICkgIT0gJycgKSB7IC8vIE5hbWVkIHBhZ2UuCgkKCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgkKCSRwYWdlU2x1ZyA9IHN0cl9yZXBsYWNlKCBhcnJheSggJ1xcJywgJy8nICksICcnLCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhZ2UnICkgKTsKCWlmICggISBjdHlwZV9hbG51bSggc3RyX3JlcGxhY2UoIGFycmF5KCAnLScsICdfJyApLCAnJywgJHBhZ2VTbHVnICkgKSApIHsgLy8gRGlzYWxsb3cgbm9uLWFscGhhbnVtZXJpYyBleGNlcHQgZGFzaCwgdW5kZXJzY29yZS4KCQlkaWUoICdFcnJvciAjODU3NDc4MzMuIFBhZ2UgY29udGFpbnMgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzLiBPbmx5IGFscGhhbnVtZXJpYywgZGFzaGVzLCBhbmQgdW5kZXJzY29yZXMgcGVybWl0dGVkLicgKTsKCX0gCgkKCSRwYWdlRmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY29udHJvbGxlcnMvcGFnZXMvJyAuICRwYWdlU2x1ZyAuICcucGhwJzsKCWlmICggZmlsZV9leGlzdHMoICRwYWdlRmlsZSApICkgewoJCWVjaG8gJzwhLS0gU3RhcnRpbmcgcGFnZSAnIC4gJHBhZ2VTbHVnIC4gJy4gLS0+JzsKCQlyZXF1aXJlX29uY2UoICRwYWdlRmlsZSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0ZpbmlzaGVkIHBhZ2UgJyAuICRwYWdlU2x1ZyAuICcuJyApOwoJfSBlbHNlIHsKCQllY2hvICd7RXJyb3I6IEludmFsaWQgcGFnZSBgJyAuIGh0bWxlbnRpdGllcyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICkgLiAnLnBocCcgLiAnYC59JzsKCX0KCXJldHVybjsKCQp9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnc3RlcCcgKSAhPSAnJyApIHsgLy8gTnVtZXJpY2FsIHN0ZXAuCgkKCWlmICggdHJ1ZSAhPT0gQXV0aDo6aXNfYXV0aGVudGljYXRlZCgpICkgeyAvLyBJZiBub3QgbG9nZ2VkIGluIHRoZW4gcHJvdmlkZSBsb2dpbiBwYWdlLgoJCSRzdGVwID0gJ2xvZ2luJzsKCX0gZWxzZSB7CgkJJHN0ZXAgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICk7CgkJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KCX0KCQp9IGVsc2UgeyAvLyBVbmtub3duLiBEZWZhdWx0IHRvIGxvZ2luLgoJaWYgKCB0cnVlICE9PSBBdXRoOjppc19hdXRoZW50aWNhdGVkKCkgKSB7IC8vIElmIG5vdCBsb2dnZWQgaW4gdGhlbiBwcm92aWRlIGxvZ2luIHBhZ2UuCgkJJHN0ZXAgPSAnbG9naW4nOwoJfSBlbHNlIHsKCQkkc3RlcCA9ICdob21lQmFja3VwU2VsZWN0JzsKCX0KfQoKJHN0ZXBGaWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jb250cm9sbGVycy9wYWdlcy8nIC4gJHN0ZXAgLiAnLnBocCc7CiRzdGVwID0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApOwpyZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvdmlld3MvX2hlYWRlci5waHAnICk7CmVjaG8gJzwhLS0gU3RhcnRpbmcgc3RlcCBmaWxlIGAnIC4gYmFzZW5hbWUoICRzdGVwRmlsZSApIC4gJ2AuIC0tPic7CgovKmlmICggJHN0ZXAgPiAwICkgeyAvLyBMb2FkIHN0ZXBzIGFmdGVyIDAgaW4gaWZyYW1lLgoJZWNobyBwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ2ltcG9ydCddLT5zdGF0dXNfYm94KCAnSW1wb3J0QnVkZHkgdicgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2JiX3ZlcnNpb24nXSAuICcuLi4gUG93ZXJlZCBieSBCYWNrdXBCdWRkeS4nICk7CgllY2hvICc8aWZyYW1lIGlkPSJwYl9iYWNrdXBidWRkeV9tb2RhbF9pZnJhbWUiIG5hbWU9InBiX2JhY2t1cGJ1ZGR5X21vZGFsX2lmcmFtZSIgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBhZ2VfdXJsKCkgLiAnaW1wb3J0YnVkZHkucGhwP2FqYXg9JyAuICRzdGVwIC4gJyIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTgwMCIgZnJhbWVib3JkZXI9IjAiIHBhZGRpbmc9IjAiIG1hcmdpbj0iMCI+RXJyb3IgIzQ1ODQ1OTQ1NzkuIEJyb3dzZXIgbm90IGNvbXBhdGlibGUgd2l0aCBpZnJhbWVzLjwvaWZyYW1lPic7Cn0gZWxzZSB7CgkqLwoJaWYgKCBmaWxlX2V4aXN0cyggJHN0ZXBGaWxlICkgKSB7CgkJcmVxdWlyZV9vbmNlKCAkc3RlcEZpbGUgKTsKCX0gZWxzZSB7CgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIHN0ZXAgZmlsZSBgJyAuIGh0bWxlbnRpdGllcyggJHN0ZXAgKSAuICcucGhwJyAuICdgLn0nOwoJfQovL30KcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgc3RlcC4nICk7CnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS92aWV3cy9fZm9vdGVyLnBocCcgKTsKCnJldHVybjsKCg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
PHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgKTs8L3NjcmlwdD4KPD9waHAKaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzd29yZCcgKSAhPSAnJyApIHsKCWdsb2JhbCAkcGJfbG9naW5fYXR0ZW1wdHM7CglwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdJbnZhbGlkIHBhc3N3b3JkLiBQbGVhc2UgZW50ZXIgdGhlIHBhc3N3b3JkIHlvdSBwcm92aWRlZCB3aXRoaW4gQmFja3VwQnVkZHkgU2V0dGluZ3MuIEF0dGVtcHQgIycgLiAkcGJfbG9naW5fYXR0ZW1wdHMgLiAnLicgKTsKCWVjaG8gJzxicj4nOwp9CgppZiAoICEgaXNfY2FsbGFibGUoICdqc29uX2RlY29kZScgKSApIHsKCSRtZXNzYWdlID0gJ0Vycm9yICM4NDM5ODQzNDogTWlzc2luZyByZXF1aXJlZCBQSFAgZnVuY3Rpb24ganNvbl9kZWNvZGUoKS4gWW91ciBQSFAgdmVyc2lvbiBpcyB0b28gb2xkIG9yIGRhbWFnZWQuIEl0IGlzIE5PVCBjb21wYXRpYmxlIHdpdGggV29yZFByZXNzIGFzIGl0IGlzLiBQbGVhc2UgY29udGFjdCB5b3VyIGhvc3QgdG8gZml4IHRoaXMuJzsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CglwYl9iYWNrdXBidWRkeTo6YWxlcnQoICRtZXNzYWdlLCB0cnVlICk7Cn0KPz4KCjxwPkVudGVyIHlvdXIgSW1wb3J0QnVkZHkgcGFzc3dvcmQgYmVsb3cgdG8gYmVnaW4uPC9wPgoKPGJyPgoKPGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9ImxvZ2luIj4KCTxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHN0eWxlPSJ3aWR0aDogMjUwcHg7IHZlcnRpY2FsLWFsaWduOiAtMnB4OyI+Cgk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJBdXRoZW50aWNhdGUiIGNsYXNzPSJpdC1idXR0b24iPgoJPGJ1dHRvbiBocmVmPSIjcGJfZm9yZ290cGFzc3dvcmRfbW9kYWwiIGNsYXNzPSJidXR0b24gYnV0dG9uLXNlY29uZGFyeSBsZWFuTW9kYWwgY3JlYXRlZGJfbW9kYWxfbGluayI+Rm9yZ290IFBhc3N3b3JkPzwvYnV0dG9uPgo8L2Zvcm0+CgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCWpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CgkJalF1ZXJ5KCcubGVhbk1vZGFsJykubGVhbk1vZGFsKAoJCQl7IHRvcCA6IDQ1LCBvdmVybGF5IDogMC40LCBjbG9zZUJ1dHRvbjogIi5tb2RhbF9jbG9zZSIgfQoJCSk7CgkJCgkJalF1ZXJ5KCAnI2NyZWF0ZXBhc3NfZm9ybScgKS5zdWJtaXQoZnVuY3Rpb24oKXsKCQkJCgkJCWlmICggalF1ZXJ5KCAnI25ld19wYXNzJyApLnZhbCgpICE9IGpRdWVyeSh0aGlzKS5maW5kKCAnI25ld19wYXNzX2NvbmZpcm0nICkudmFsKCkgKSB7CgkJCQlhbGVydCggJ1Bhc3N3b3JkIGFuZCBjb25maXJtYXRpb24gZG8gbm90IG1hdGNoLicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQkKCQkJaWYgKCAnJyA9PT0galF1ZXJ5KCAnI25ld19wYXNzJyApLnZhbCgpICkgewoJCQkJYWxlcnQoICdZb3UgbXVzdCBwcm92aWRlIGEgbmV3IHBhc3N3b3JkLicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQkKCQkJalF1ZXJ5KCAnLmNyZWF0ZXBhc3NfbG9hZGluZycgKS5zaG93KCk7CgkJCWpRdWVyeS5wb3N0KCdpbXBvcnRidWRkeS5waHA/YWpheD1oYXNoX2ZvcmdvdHBhc3MnLAoJCQl7CgkJCQluZXdwYXNzd29yZDogalF1ZXJ5KCAnI25ld19wYXNzJyApLnZhbCgpLAoJCQl9LCBmdW5jdGlvbihkYXRhKSB7CgkJCQkJCgkJCQkJZGF0YSA9IGpRdWVyeS50cmltKCBkYXRhICk7CgkJCQkJalF1ZXJ5KCAnLmNyZWF0ZXBhc3NfbG9hZGluZycgKS5oaWRlKCk7CgkJCQkJCgkJCQkJalF1ZXJ5KCAnLmZvcmdvdHBhc3NfZm9ybV93cmFwJyApLmhpZGUoKTsKCQkJCQlqUXVlcnkoICcuZm9yZ290cGFzc19maW5pc2hfaGFzaCcpLnZhbCggZGF0YSApOwoJCQkJCWpRdWVyeSggJy5mb3Jnb3RwYXNzX2ZpbmlzaF93cmFwJyApLnNob3coKTsKCQkJCX0KCQkJKTsKCQkJCgkJCXJldHVybiBmYWxzZTsKCQkJCgkJfSk7Cgl9KTsKPC9zY3JpcHQ+CgoKCjxkaXYgaWQ9InBiX2ZvcmdvdHBhc3N3b3JkX21vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJPGRpdiBjbGFzcz0ibW9kYWwiPgoJCTxkaXYgY2xhc3M9Im1vZGFsX2hlYWRlciI+CgkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4KCQkJPGgyPlBhc3N3b3JkIFJlc2V0PC9oMj4KCQkJQWZ0ZXIgc3VibWl0dGluZyB5b3Ugd2lsbCBuZWVkIHRvIGVkaXQgeW91ciBpbXBvcnRidWRkeS5waHAgZmlsZSBvbiB0aGlzIHNlcnZlciBhbmQgZWRpdCBhIGxpbmUgb2YgY29kZSB3aXRoIGEgaGFzaGVkIHZlcnNpb24gb2YgdGhpcyBwYXNzd29yZC4KCQk8L2Rpdj4KCQk8ZGl2IGNsYXNzPSJtb2RhbF9jb250ZW50Ij4KCQkJCgkJCQoJCQk8ZGl2IGNsYXNzPSJmb3Jnb3RwYXNzX2Zvcm1fd3JhcCI+CgkJCQkKCQkJCQoJCQkJPGNlbnRlcj4KCQkJCQk8Zm9ybSBpZD0iY3JlYXRlcGFzc19mb3JtIj4KCQkJCQkJPHRhYmxlPgoJCQkJCQkJPHRyPgoJCQkJCQkJCTx0ZD5OZXcgUGFzc3dvcmQ8L3RkPjx0ZD48aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9Im5ld3Bhc3N3b3JkIiBpZD0ibmV3X3Bhc3MiPjwvdGQ+CgkJCQkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCTx0ZD5Db25maXJtIFBhc3N3b3JkPC90ZD48dGQ+PGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJuZXdwYXNzd29yZF9jb25maXJtIiBpZD0ibmV3X3Bhc3NfY29uZmlybSI+PC90ZD4KCQkJCQkJCTwvdHI+CgkJCQkJCTwvdGFibGU+CgkJCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IlN1Ym1pdCIgY2xhc3M9ImJ1dHRvbi1wcmltYXJ5Ij4KCQkJCQk8L2Zvcm0+CgkJCQkJPHNwYW4gY2xhc3M9ImNyZWF0ZXBhc3NfbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmcuZ2lmIiBhbHQ9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgdGl0bGU9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij48L3NwYW4+CgkJCQk8L2NlbnRlcj4KCQkJCQoJCQk8L2Rpdj4KCQkJCgkJCQoJCQk8ZGl2IGNsYXNzPSJmb3Jnb3RwYXNzX2ZpbmlzaF93cmFwIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCQkJVG8gZW5hYmxlIHRoaXMgbmV3IHBhc3N3b3JkIGZvciBhY2Nlc3NpbmcgaW1wb3J0YnVkZHkucGhwIG9wZW4gaW1wb3J0YnVkZHkucGhwIGluIGEgdGV4dCBlZGl0b3IgYW5kIGZpbmQgbGluZSAxMyB0aGF0IGxvb2tzIGxpa2UgdGhlIGZvbGxvd2luZywgcmVwbGFjaW5nIHRoZSBYJ3MgaW4gdGhpcyBsaW5lIHdpdGggdGhlIHBhc3N3b3JkIGhhc2ggY29kZSBiZWxvdy4gTWFrZSBzdXJlIHlvdSByZS1zYXZlIHRoaXMgZWRpdGVkIHZlcnNpb24gdG8gdGhlIHNlcnZlciB0aGVuIHJlZnJlc2ggdGhpcyBwYWdlIHRvIGxvZyBpbi48YnI+PGJyPgoJCQkJCgkJCQk8aT5kZWZpbmUoICdQQl9QQVNTV09SRCcsICdYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWCcgKTs8L2k+PGJyPjxicj4KCQkJCQoJCQkJPGI+TmV3IHBhc3N3b3JkIGhhc2ggY29kZTo8L2I+PGJyPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3Jnb3RwYXNzX2ZpbmlzaF9oYXNoIiB2YWx1ZT0iIiByZWFkb25seT0icmVhZG9ubHkiIHNpemU9IjQwIj4KCQkJPC9kaXY+CgkJCQoJCQkKCQk8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
PD9waHAKaWYgKCAhZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICkgeyAvLyBOT1QgSU4gSU1QT1JUQlVERFk6Cgl3cF9lbnF1ZXVlX3NjcmlwdCggJ3RoaWNrYm94JyApOwoJd3BfcHJpbnRfc2NyaXB0cyggJ3RoaWNrYm94JyApOwoJd3BfcHJpbnRfc3R5bGVzKCAndGhpY2tib3gnICk7Cgk/PgoJPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCSNiYWNrdXBidWRkeS1tZXRhLWxpbmstd3JhcCBhLnNob3ctc2V0dGluZ3MgewoJCWZsb2F0OiByaWdodDsKCQltYXJnaW46IDAgMCAwIDZweDsKCX0KCSNzY3JlZW4tbWV0YS1saW5rcyAjYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYSB7CgkJYmFja2dyb3VuZDogbm9uZTsKCX0KCSNzY3JlZW4tbWV0YS1saW5rcyAjYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYTphZnRlciB7CgkJY29udGVudDogJyc7CgkJbWFyZ2luLXJpZ2h0OiA1cHg7Cgl9Cgk8L3N0eWxlPgoKCTw/cGhwCgoJcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnYWRtaW4uanMnICk7CgkKCQoJCglwYl9iYWNrdXBidWRkeTo6JHVpLT50aXRsZSggX18oICdTZXJ2ZXIgVG9vbHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJYmFja3VwYnVkZHlfY29yZTo6dmVyc2lvbnNfY29uZmlybSgpOwoJCgkkZGVmYXVsdF90YWIgPSAwOwoJaWYgKCBpc19udW1lcmljKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3RhYicgKSApICkgewoJCSRkZWZhdWx0X3RhYiA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndGFiJyApOwoJfQoJCgllY2hvICcnOwoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFicygKCQknZ2V0dGluZ19zdGFydGVkJywKCQlhcnJheSgKCQkJYXJyYXkoCgkJCQkndGl0bGUnCQk9PgkJX18oICdTZXJ2ZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCSdzbHVnJwkJPT4JCSdzZXJ2ZXInLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ0RhdGFiYXNlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZGF0YWJhc2UnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1NpdGUgU2l6ZSBNYXBzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZmlsZXMnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1dvcmRQcmVzcyBTY2hlZHVsZXMgKENyb24pJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknY3JvbicsCgkJCSksCgkJKSwKCQknd2lkdGg6IDEwMCU7JywKCQl0cnVlLAoJCSRkZWZhdWx0X3RhYgoJKTsKCQoJCgkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ3NlcnZlcicgKTsKCQkKCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9zZXJ2ZXIucGhwJyApOwoJCQoJCQoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3Blcm1pc3Npb25zLnBocCcgKTsKCQkKCQkKCQkkd3BfdXBsb2FkX2RpciA9IHdwX3VwbG9hZF9kaXIoKTsKCQkkd3Bfc2V0dGluZ3MgPSBhcnJheSgpOwoJCQoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydwYXRoJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBGaWxlIFBhdGgnLCAkd3BfdXBsb2FkX2RpclsncGF0aCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsndXJsJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBVUkwnLCAkd3BfdXBsb2FkX2RpclsndXJsJ10sICd3cF91cGxvYWRfZGlyKCknICk7CgkJfQoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSApICkgewoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIFN1YmRpcmVjdG9yeScsICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSwgJ3dwX3VwbG9hZF9kaXIoKScpOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBVUkwnLCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBEaXJlY3RvcnknLCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnU2l0ZSBVUkwnLCBzaXRlX3VybCgpLCAnc2l0ZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnSG9tZSBVUkwnLCBob21lX3VybCgpLCAnaG9tZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnV29yZFByZXNzIFJvb3QgUGF0aCcsIEFCU1BBVEgsICdBQlNQQVRIJyApOwoJCQoJCS8vIE11bHRpc2l0ZSBleHRyYXM6CgkJJHdwX3NldHRpbmdzX211bHRpc2l0ZSA9IGFycmF5KCk7CgkJaWYgKCBpc19tdWx0aXNpdGUoKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ05ldHdvcmsgU2l0ZSBVUkwnLCBuZXR3b3JrX3NpdGVfdXJsKCksICduZXR3b3JrX3NpdGVfdXJsKCknICk7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdOZXR3b3JrIEhvbWUgVVJMJywgbmV0d29ya19ob21lX3VybCgpLCAnbmV0d29ya19ob21lX3VybCgpJyApOwoJCX0KCQkKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9jYWwgc3RvcmFnZScsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEJhY2t1cERpcmVjdG9yeSgpLCAnQmFja3VwQnVkZHkgU2V0dGluZ3MnICk7CgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ0JhY2t1cEJ1ZGR5IHRlbXBvcmFyeSBmaWxlcycsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldFRlbXBEaXJlY3RvcnkoKSwgJ1VwbG9hZCBCYXNlICsgQmFja3VwQnVkZHknICk7CgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ0JhY2t1cEJ1ZGR5IGxvZ3MnLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKSwgJ1VwbG9hZCBCYXNlICsgQmFja3VwQnVkZHknICk7CgkJCgkJLy8gRGlzcGxheSBXUCBzZXR0aW5ncy4uCgkJcGJfYmFja3VwYnVkZHk6OiR1aS0+bGlzdF90YWJsZSgKCQkJJHdwX3NldHRpbmdzLAoJCQlhcnJheSgKCQkJCSdhY3Rpb24nCQkJCQk9PglwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSwKCQkJCSdjb2x1bW5zJwkJCQkJPT4JYXJyYXkoCgkJCQkJCQkJCQkJCQlfXyggJ1VSTHMgJiBQYXRocycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdPYnRhaW5lZCB2aWEnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCQkJCQkJCQkJKSwKCQkJCSdjc3MnCQkJCQkJPT4JCSd3aWR0aDogMTAwJTsnLAoJCQkpCgkJKTsKCQkKCQkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsKCQoJCgkKCS8vIFRoaXMgcGFnZSBjYW4gdGFrZSBhIGJpdCB0byBydW4uCgkvLyBSdW5zIEFGVEVSIHNlcnZlciBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQgc28gd2UgY2FuIHZpZXcgdGhlIGRlZmF1bHQgbGltaXRzIGZvciB0aGUgc2VydmVyLgoJcGJfYmFja3VwYnVkZHk6OnNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cygpOwoJCgkKCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZGF0YWJhc2UnICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vZGF0YWJhc2UucGhwJyApOwoJCWVjaG8gJzxicj48YnI+PGEgbmFtZT0iZGF0YWJhc2VfcmVwbGFjZSI+PC9hPic7CgkJZWNobyAnPGRpdiBjbGFzcz0icGJfaHRpdGxlIj4nIC4gJ0FkdmFuY2VkOiAnIC4gX18oICdEYXRhYmFzZSBNYXNzIFRleHQgUmVwbGFjZW1lbnQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2Rpdj48YnI+JzsKCQlwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnX3NlcnZlcl90b29scy1kYXRhYmFzZV9yZXBsYWNlJyApOwoJCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoJCgkKCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZmlsZXMnICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2l0ZV9zaXplLnBocCcgKTsKCQkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsKCQoJCgkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ2Nyb24nICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vY3Jvbi5waHAnICk7CgkJCglwYl9iYWNrdXBidWRkeTo6JHVpLT5lbmRfdGFiKCk7CgkKCQoJZWNobyAnPGJyIHN0eWxlPSJjbGVhcjogYm90aDsiPjxicj48YnI+JzsKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWJzKCk7CgkKCQoJCgkvLyBIYW5kbGVzIHRoaWNrYm94IGF1dG8tcmVzaXppbmcuIEtlZXAgYXQgYm90dG9tIG9mIHBhZ2UgdG8gYXZvaWQgaXNzdWVzLgoJaWYgKCAhd3Bfc2NyaXB0X2lzKCAnbWVkaWEtdXBsb2FkJyApICkgewoJCXdwX2VucXVldWVfc2NyaXB0KCAnbWVkaWEtdXBsb2FkJyApOwoJCXdwX3ByaW50X3NjcmlwdHMoICdtZWRpYS11cGxvYWQnICk7Cgl9CgkKfSBlbHNlIHsgLy8gSU5TSURFIElNUE9SVEJVRERZOgoJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3NraXBfc2VydmVyaW5mbycgKSA9PSAnJyApIHsgLy8gR2l2ZSBhIHdvcmthcm91bmQgdG8gc2tpcCB0aGlzLgoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3NlcnZlci5waHAnICk7Cgl9IGVsc2UgewoJCWVjaG8gJ3tTa2lwcGluZyBTZXJ2ZXIgSW5mby4gc2VjdGlvbiBiYXNlZCBvbiBxdWVyeXN0cmluZy59JzsKCX0KfQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgpyZXF1aXJlX29uY2UoIEFCU1BBVEggLidpbXBvcnRidWRkeS92aWV3cy9faGVhZGVyLnBocCcgKTsKPz4KPHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdTZXJ2ZXIgSW5mb3JtYXRpb24nICk7PC9zY3JpcHQ+Cgo8ZGl2IGNsYXNzPSJ3cmFwIj4KCTw/cGhwCglnbG9iYWwgJGRldGVjdGVkX21heF9leGVjdXRpb25fdGltZTsKCXJlcXVpcmVfb25jZSggJ3NlcnZlcl90b29scy5waHAnICk7Cgk/Pgo8L2Rpdj4KCjw/cGhwCnJlcXVpcmVfb25jZSggQUJTUEFUSCAuJ2ltcG9ydGJ1ZGR5L3ZpZXdzL19mb290ZXIucGhwJyApOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php
###PACKDATA,FILE_START,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php

###PACKDATA,FILE_END,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php
###PACKDATA,FILE_START,/classes/core.php,importbuddy/classes/core.php

###PACKDATA,FILE_END,/classes/core.php,importbuddy/classes/core.php
###PACKDATA,FILE_START,/classes/import.php,importbuddy/classes/import.php
PD9waHAKY2xhc3MgcGJfYmFja3VwYnVkZHlfaW1wb3J0IHsKCQoJCgkKCQoJCgkKCQoJLyoqCgkgKgl3aXBlUHJlZml4KCkKCSAqCgkgKglDbGVhciBvdXQgdGFibGVzIG1hdGNoaW5nIHN1cHBsaWVkIHByZWZpeC4KCSAqCgkgKglAcmV0dXJuCQkJYm9vbGVhbgkJQ3VycmVudGx5IGFsd2F5cyB0cnVlLgoJICovCglmdW5jdGlvbiB3aXBlUHJlZml4KCAkcHJlZml4LCAkY29uZmlybSA9IGZhbHNlICkgewoJCWlmICggJGNvbmZpcm0gIT09IHRydWUgKSB7CgkJCWRpZSggJ0Vycm9yICM1NDY2NTY2YjogUGFyYW1ldGVyIDIgdG8gd2lwZVByZWZpeCgpIG11c3QgYmUgYm9vbGVhbiB0cnVlIHRvIHByb2NlZWQuJyApOwoJCX0KCQkKCQlpZiAoICRwcmVmaXggPT0gJycgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJ05vIGRhdGFiYXNlIHByZWZpeCBzcGVjaWZpZWQgdG8gd2lwZS4nICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnQmVnaW5uaW5nIHdpcGUgb2YgZGF0YWJhc2UgdGFibGVzIG1hdGNoaW5nIHByZWZpeCBgJyAuICRwcmVmaXggLiAnYC4uLicgKTsKCQkKCQkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJCS8vJHRoaXMtPmNvbm5lY3RfZGF0YWJhc2UoKTsKCQkKCQlnbG9iYWwgJHdwZGI7CgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTRUxFQ1QgdGFibGVfbmFtZSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgV0hFUkUgdGFibGVfbmFtZSBMSUtFICciIC4gYmFja3VwYnVkZHlfY29yZTo6ZGJFc2NhcGUoIHN0cl9yZXBsYWNlKCAnXycsICdcXycsICRwcmVmaXggKSApIC4gIiUnIEFORCB0YWJsZV9zY2hlbWEgPSBEQVRBQkFTRSgpIiwgQVJSQVlfQSApOwoJCSR0YWJsZV93aXBlX2NvdW50ID0gY291bnQoICRyb3dzICk7CgkJZm9yZWFjaCggJHJvd3MgYXMgJHJvdyApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRHJvcHBpbmcgdGFibGUgYCcgLiAkcm93Wyd0YWJsZV9uYW1lJ10gLiAnYC4nICk7CgkJCSR3cGRiLT5xdWVyeSggJ0RST1AgVEFCTEUgYCcgLiAkcm93Wyd0YWJsZV9uYW1lJ10gLiAnYCcgKTsKCQl9CgkJdW5zZXQoICRyb3dzICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnV2lwZWQgZGF0YWJhc2Ugb2YgJyAuICR0YWJsZV93aXBlX2NvdW50IC4gJyB0YWJsZXMuJyApOwoJCQoJCXJldHVybiB0cnVlOwoJfSAvLyBFbmQgd2lwZVByZWZpeCgpLgoJCgkKCQoJLyoqCgkgKgl3aXBlRGF0YWJhc2UoKQoJICoKCSAqCUNsZWFyIG91dCB0aGUgZXhpc3RpbmcgZGF0YWJhc2UgdG8gcHJlcGFyZSBmb3IgaW1wb3J0aW5nIG5ldyBkYXRhLgoJICoKCSAqCUByZXR1cm4JCQlib29sZWFuCQlDdXJyZW50bHkgYWx3YXlzIHRydWUuCgkgKi8KCWZ1bmN0aW9uIHdpcGVEYXRhYmFzZSggJGNvbmZpcm0gPSBmYWxzZSApIHsKCQlpZiAoICRjb25maXJtICE9PSB0cnVlICkgewoJCQlkaWUoICdFcnJvciAjNTQ2NjU2NmE6IFBhcmFtZXRlciAxIHRvIHdpcGVEZGF0YWJhc2UoKSBtdXN0IGJlIGJvb2xlYW4gdHJ1ZSB0byBwcm9jZWVkLicgKTsKCQl9CgkJCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnQmVnaW5uaW5nIHdpcGUgb2YgQUxMIGRhdGFiYXNlIHRhYmxlcy4uLicgKTsKCQkKCQkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJCS8vJHRoaXMtPmNvbm5lY3RfZGF0YWJhc2UoKTsKCQkKCQlnbG9iYWwgJHdwZGI7CgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTRUxFQ1QgdGFibGVfbmFtZSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgV0hFUkUgdGFibGVfc2NoZW1hID0gREFUQUJBU0UoKSIsIEFSUkFZX0EgKTsKCQkkdGFibGVfd2lwZV9jb3VudCA9IGNvdW50KCAkcm93cyApOwoJCWZvcmVhY2goICRyb3dzIGFzICRyb3cgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0Ryb3BwaW5nIHRhYmxlIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AuJyApOwoJCQkkd3BkYi0+cXVlcnkoICdEUk9QIFRBQkxFIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AnICk7CgkJfQoJCXVuc2V0KCAkcm93cyApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1dpcGVkIGRhdGFiYXNlIG9mICcgLiAkdGFibGVfd2lwZV9jb3VudCAuICcgdGFibGVzLicgKTsKCQkKCQlyZXR1cm4gdHJ1ZTsKCX0gLy8gRW5kIHdpcGVEYXRhYmFzZSgpLgoJCgkKCQoJLyoJcHJlZ19lc2NhcGVfYmFjaygpCgkgKgkKCSAqCUVzY2FwZSBiYWNrcmVmZXJlbmNlcyBmcm9tIHN0cmluZyBmb3IgdXNlIHdpdGggcmVnZXguIFVzZWQgYnkgbWlncmF0ZV93cF9jb25maWcoKS4KCSAqCUBzZWUgbWlncmF0ZV93cF9jb25maWcoKQoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHN0cmluZwkJU3RyaW5nIHRvIGVzY2FwZS4KCSAqCUByZXR1cm4JCXN0cmluZwkJCQkJRXNjYXBlZCBzdHJpbmcuCgkgKi8KCWZ1bmN0aW9uIHByZWdfZXNjYXBlX2JhY2soJHN0cmluZykgewoJCS8vIFJlcGxhY2UgJCB3aXRoIFwkIGFuZCBcIHdpdGggXFwKCQkkc3RyaW5nID0gcHJlZ19yZXBsYWNlKCcjKD88IVxcXFwpKFxcJHxcXFxcKSMnLCAnXFxcXCQxJywgJHN0cmluZyk7CgkJcmV0dXJuICRzdHJpbmc7Cgl9IC8vIEVuZCBwcmVnX2VzY2FwZV9iYWNrKCkuCgkKCQoJCgkKCQoJCgkKCS8vIFRPRE86IHN3aXRjaCB0byB1c2luZyBwYl9iYWNrdXBidWRkeTo6c3RhdHVzX2JveCgpIGluc3RlYWQuCgkvKioKCSAqCXN0YXR1c19ib3goKQoJICoKCSAqCURpc3BsYXlzIGEgdGV4dGFyZWEgZm9yIHBsYWNpbmcgc3RhdHVzIHRleHQgaW50by4KCSAqCgkgKglAcGFyYW0JCQkkZGVmYXVsdF90ZXh0CXN0cmluZwkJRmlyc3QgbGluZSBvZiB0ZXh0IHRvIGRpc3BsYXkuCgkgKglAcGFyYW0JCQlib29sZWFuCQkJJGhpZGRlbgkJV2hldGhlciBvciBub3QgdG8gYXBwbHkgZGlzcGxheTogbm9uZTsgQ1NTLgoJICoJQHJldHVybgkJCQkJCQlzdHJpbmcJCUhUTUwgZm9yIHRleHRhcmVhLgoJICovCglmdW5jdGlvbiBzdGF0dXNfYm94KCAkZGVmYXVsdF90ZXh0ID0gJycsICRoaWRkZW4gPSBmYWxzZSApIHsKCQlkZWZpbmUoICdQQl9TVEFUVVMnLCB0cnVlICk7IC8vIFRlbGxzIGZyYW1ld29yayBzdGF0dXMoKSBmdW5jdGlvbiB0byBvdXRwdXQgZnV0dXJlIGxvZ2dpbmcgaW5mbyBpbnRvIHN0YXR1cyBib3ggdmlhIGphdmFzY3JpcHQuCgkJJHJldHVybiA9ICc8ZGl2IGlkPSJwYl9iYWNrdXBidWRkeV9zdGF0dXNfd3JhcCIgc3R5bGU9InBhZGRpbmc6IDA7Ij48cHJlIHJlYWRvbmx5PSJyZWFkb25seSIgaWQ9ImJhY2t1cGJ1ZGR5X21lc3NhZ2VzIiB3cmFwPSJvZmYiJzsKCQlpZiAoICRoaWRkZW4gPT09IHRydWUgKSB7CgkJCSRyZXR1cm4gLj0gJyBzdHlsZT0iZGlzcGxheTogbm9uZTsgIic7CgkJfQoJCSRyZXR1cm4gLj0gJz4nIC4gJGRlZmF1bHRfdGV4dCAuICc8L3ByZT4nOwoJCSRyZXR1cm4gLj0gJzxkaXYgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPgoJCQk8YnV0dG9uIGNsYXNzPSJidXR0b24gYnV0dG9uLXByaW1hcnkiIG9uQ2xpY2s9ImJhY2t1cGJ1ZGR5X3NhdmVMb2dBc0ZpbGUoKTsiIHN0eWxlPSJtYXJnaW4tbGVmdDogYXV0bzsgbWFyZ2luLXJpZ2h0OiBhdXRvOyBkaXNwbGF5OiBpbmhlcml0OyBmb250LXNpemU6IDAuOWVtOyI+RG93bmxvYWQgU3RhdHVzIExvZyAoLnR4dCk8L2J1dHRvbj4KCQk8L2Rpdj4nOwoJCSRyZXR1cm4gLj0gJzwvZGl2Pic7CgkJCgkJcmV0dXJuICRyZXR1cm47Cgl9CgkKCQoJCgkKCQoJCn0gLy8gRW5kIGNsYXNzLgo/Pgo=
###PACKDATA,FILE_END,/classes/import.php,importbuddy/classes/import.php
###PACKDATA,FILE_START,/classes/restore.php,importbuddy/classes/restore.php

###PACKDATA,FILE_END,/classes/restore.php,importbuddy/classes/restore.php
###PACKDATA,FILE_START,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
PD9waHAKY2xhc3MgYmFja3VwYnVkZHlfcmVzdG9yZV9maWxlcyB7CgoJLyogcmVzdG9yZSgpCgkgKgoJICogUmVzdG9yZSBvbmUgb3IgbW9yZSBmaWxlcyB0byBhIHBhdGguCgkgKgoJICogQHBhcmFtCSRhcmNoaXZlX2ZpbGUJQmFja3VwIHppcCBhcmNoaXZlIGZpbGUgdG8gcmVzdG9yZSBmaWxlcyBmcm9tLgoJICogQHBhcmFtCSRmaWxlcwkJCUFycmF5IG9mIGZpbGVzIHRvIHJlc3RvcmUuIEVhY2gga2V5IGFuZCB2YWx1ZSBtdXN0IGJlIHRoZSBzYW1lLiBGb3JtYXQ6IGFycmF5KCAnZmlsZW5hbWUudHh0JyA9PiAnZmlsZW5hbWUudHh0JyApOwoJICogQHBhcmFtCSRmaW5hbFBhdGgJCURlc3RpbmF0aW9uIHBhdGggdG8gZXh0cmFjdCBpbnRvLgoJICogQHJldHVybglib29sCQkJVHJ1ZSBvbiBzdWNjZXNzLCBlbHNlIGZhbHNlLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZXN0b3JlKCAkYXJjaGl2ZV9maWxlLCAkZmlsZXMsICRmaW5hbFBhdGgsICYkemlwYnVkZHkgPSBudWxsICkgewoJCWlmICggIWRlZmluZWQoICdQQl9TVEFOREFMT05FJyApIHx8IFBCX1NUQU5EQUxPTkUgPT09IGZhbHNlICkgewoJCQlpZiAoICEgY3VycmVudF91c2VyX2NhbiggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyb2xlX2FjY2VzcyddICkgKSB7CgkJCQlkaWUoICdFcnJvciAjNDczNjIzLiBBY2Nlc3MgRGVuaWVkLicgKTsKCQkJfQoJCX0KCQkKCQkkc2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRhcmNoaXZlX2ZpbGUgKTsgLy8gc2VyaWFsIG9mIGFyY2hpdmUuCgkJJHN1Y2Nlc3MgPSBmYWxzZTsKCQkKCQlmb3JlYWNoKCAkZmlsZXMgYXMgJGZpbGUgKSB7CgkJCSRmaWxlID0gc3RyX3JlcGxhY2UoICcqJywgJycsICRmaWxlICk7IC8vIFJlbW92ZSBhbnkgd2lsZGNhcmQuCgkJCWlmICggZmlsZV9leGlzdHMoICRmaW5hbFBhdGggLiAkZmlsZSApICYmIGlzX2RpciggJGZpbmFsUGF0aCAuICRmaWxlICkgKSB7CgkJCQlpZiAoICggJGZpbGVfY291bnQgPSBAc2NhbmRpciggJGZpbmFsUGF0aCAuICRmaWxlICkgKSAmJiAoIGNvdW50KCAkZmlsZV9jb3VudCApID4gMiApICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsIF9fKCAnRXJyb3IgIzkwMzYuIFRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgYmVpbmcgcmVzdG9yZWQgYWxyZWFkeSBleGlzdHMgYW5kIGlzIE5PVCBlbXB0eS4gVGhlIGRpcmVjdG9yeSB3aWxsIG5vdCBiZSByZXN0b3JlZCB0byBwcmV2ZW50IGluYWR2ZXJ0ZW50bHkgbG9zaW5nIGZpbGVzIHdpdGhpbiB0aGUgZXhpc3RpbmcgZGlyZWN0b3J5LiBEZWxldGUgZXhpc3RpbmcgZGlyZWN0b3J5IGZpcnN0IGlmIHlvdSB3aXNoIHRvIHByb2NlZWQgb3IgcmVzdG9yZSBpbmRpdmlkdWFsIGZpbGVzLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyBFeGlzdGluZyBkaXJlY3Rvcnk6IGAnIC4gJGZpbmFsUGF0aCAuICRmaWxlIC4gJ2AuJyApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfQoJCX0KCQkKCQkKCQlpZiAoIG51bGwgPT09ICR6aXBidWRkeSApIHsKCQkJcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3ppcGJ1ZGR5L3ppcGJ1ZGR5LnBocCcgKTsKCQkJJHppcGJ1ZGR5ID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCBiYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSApOwoJCX0KCQkKCQkKCQkvLyBDYWxjdWxhdGUgdGVtcCBkaXJlY3RvcnkgJiBsb2NrIGl0IGRvd24uCgkJJHRlbXBfZGlyID0gZ2V0X3RlbXBfZGlyKCk7CgkJJGRlc3RpbmF0aW9uID0gJHRlbXBfZGlyIC4gJ2JhY2t1cGJ1ZGR5LScgLiAkc2VyaWFsOwoJCWlmICggKCAoICEgZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbiApICkgJiYgKCBmYWxzZSA9PT0gbWtkaXIoICRkZXN0aW5hdGlvbiwgMDc3NywgdHJ1ZSApICkgKSApIHsKCQkJJGVycm9yID0gJ0Vycm9yICM0NTg0ODU5NDU6IFVuYWJsZSB0byBjcmVhdGUgdGVtcG9yYXJ5IGxvY2F0aW9uIGAnIC4gJGRlc3RpbmF0aW9uIC4gJ2AuIENoZWNrIHBlcm1pc3Npb25zLic7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCQoJCS8vIElmIHRlbXAgZGlyZWN0b3J5IGlzIHdpdGhpbiB3ZWJyb290IHRoZW4gbG9jayBpdCBkb3duLgoJCSR0ZW1wX2RpciA9IHN0cl9yZXBsYWNlKCAnXFwnLCAnLycsICR0ZW1wX2RpciApOyAvLyBOb3JtYWxpemUgZm9yIFdpbmRvd3MuCgkJJHRlbXBfZGlyID0gcnRyaW0oICR0ZW1wX2RpciwgJy9cXCcgKSAuICcvJzsgLy8gRW5mb3JjZSBzaW5nbGUgdHJhaWxpbmcgc2xhc2guCgkJaWYgKCBGQUxTRSAhPT0gc3RyaXN0ciggJHRlbXBfZGlyLCBBQlNQQVRIICkgKSB7IC8vIFRlbXAgZGlyIGlzIHdpdGhpbiB3ZWJyb290LgoJCQlwYl9iYWNrdXBidWRkeTo6YW50aV9kaXJlY3RvcnlfYnJvd3NpbmcoICRkZXN0aW5hdGlvbiApOwoJCX0KCQl1bnNldCggJHRlbXBfZGlyICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRXh0cmFjdGluZyBpbnRvIHRlbXBvcmFyeSBkaXJlY3RvcnkgIicgLiAkZGVzdGluYXRpb24gLiAnIi4nICk7CgkJCgkJJHByZXR0eUZpbGVzTGlzdCA9IGFycmF5KCk7CgkJZm9yZWFjaCggJGZpbGVzIGFzICRmaWxlU291cmNlID0+ICRmaWxlRGVzdGluYXRpb24gKSB7CgkJCSRwcmV0dHlGaWxlc0xpc3RbXSA9ICRmaWxlU291cmNlIC4gJyA9PiAnIC4gJGZpbGVEZXN0aW5hdGlvbjsKCQl9CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmlsZXMgdG8gZXh0cmFjdDogYCcgLiBodG1sZW50aXRpZXMoIGltcGxvZGUoICcsICcsICRwcmV0dHlGaWxlc0xpc3QgKSApIC4gJ2AuJyApOwoJCXVuc2V0KCAkcHJldHR5RmlsZXNMaXN0ICk7CgkJCgkJcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgkJCgkJLy8gRG8gdGhlIGFjdHVhbCBleHRyYWN0aW9uLgoJCSRleHRyYWN0X3N1Y2Nlc3MgPSB0cnVlOwoJCWlmICggZmFsc2UgPT09ICR6aXBidWRkeS0+ZXh0cmFjdCggJGFyY2hpdmVfZmlsZSwgJGRlc3RpbmF0aW9uLCAkZmlsZXMgKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM1ODQ5ODQ0NThiLiBVbmFibGUgdG8gZXh0cmFjdC4nICk7CgkJCSRleHRyYWN0X3N1Y2Nlc3MgPSBmYWxzZTsKCQl9CgkJCgkJaWYgKCB0cnVlID09PSAkZXh0cmFjdF9zdWNjZXNzICkgewoJCQkKCQkJLy8gVmVyaWZ5IGFsbCBmaWxlcy9kaXJlY3RvcmllcyB0byBiZSBleHRyYWN0ZWQgZXhpc3QgaW4gdGVtcCBkZXN0aW5hdGlvbiBkaXJlY3RvcnkuIElmIGFueSBtaXNzaW5nIHRoZW4gZGVsZXRlIGV2ZXJ5dGhpbmcgYW5kIGJhaWwgb3V0LgoJCQlmb3JlYWNoKCAkZmlsZXMgYXMgJiRmaWxlICkgewoJCQkJJGZpbGUgPSBzdHJfcmVwbGFjZSggJyonLCAnJywgJGZpbGUgKTsgLy8gUmVtb3ZlIGFueSB3aWxkY2FyZC4KCQkJCWlmICggISBmaWxlX2V4aXN0cyggJGRlc3RpbmF0aW9uIC4gJy8nIC4gJGZpbGUgKSApIHsKCQkJCQkvLyBDbGVhbnVwLgoJCQkJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsKCQkJCQkJQHRyaWdnZXJfZXJyb3IoICcnICk7IC8vIENsZWFyIG91dCBsYXN0IGVycm9yLgoJCQkJCQlAdW5saW5rKCAkZGVzdGluYXRpb24gLiAnLycgLiAkZmlsZSk7CgkJCQkJCSRsYXN0X2Vycm9yID0gZXJyb3JfZ2V0X2xhc3QoKTsKCQkJCQkJaWYgKCBpc19hcnJheSggJGxhc3RfZXJyb3IgKSApIHsKCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRsYXN0X2Vycm9yWydtZXNzYWdlJ10gLiAnIEZpbGU6IGAnIC4gJGxhc3RfZXJyb3JbJ2ZpbGUnXSAuICdgLiBMaW5lOiBgJyAuICRsYXN0X2Vycm9yWydsaW5lJ10gLiAnYC4nICk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM4NTQ3ODM0NzQuIE9uZSBvciBtb3JlIGV4cGVjdGVkIGZpbGVzIC8gZGlyZWN0b3JpZXMgbWlzc2luZy4nICk7CgkJCQkJCgkJCQkJJGV4dHJhY3Rfc3VjY2VzcyA9IGZhbHNlOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJCXVuc2V0KCAkZmlsZSApOwoJCQkKCQkJLy8gTWFkZSBpdCB0aGlzIGZhciBzbyBmaWxlcyBhbGwgZXhpc3QuIE1vdmUgdGhlbSBhbGwuCgkJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsKCQkJCUB0cmlnZ2VyX2Vycm9yKCAnJyApOyAvLyBDbGVhciBvdXQgbGFzdCBlcnJvci4KCQkJCWlmICggZmFsc2UgPT09IHBiX2JhY2t1cGJ1ZGR5OjokZmlsZXN5c3RlbS0+cmVjdXJzaXZlX2NvcHkoICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlLCAkZmluYWxQYXRoIC4gJGZpbGUgKSApIHsKCQkJCQkkbGFzdF9lcnJvciA9IGVycm9yX2dldF9sYXN0KCk7CgkJCQkJaWYgKCBpc19hcnJheSggJGxhc3RfZXJyb3IgKSApIHsKCQkJCQkJLy9wcmludF9yKCAkbGFzdF9lcnJvciApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbGFzdF9lcnJvclsnbWVzc2FnZSddIC4gJyBGaWxlOiBgJyAuICRsYXN0X2Vycm9yWydmaWxlJ10gLiAnYC4gTGluZTogYCcgLiAkbGFzdF9lcnJvclsnbGluZSddIC4gJ2AuJyApOwoJCQkJCX0KCQkJCQkkZXJyb3IgPSAnRXJyb3IgIzkwMzUuIFVuYWJsZSB0byBjb3B5cmVzdG9yZWQgZmlsZSBgJyAuICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlIC4gJ2AgdG8gYCcgLiAkZmluYWxQYXRoIC4gJGZpbGUgLiAnYC4gVmVyaWZ5IHBlcm1pc3Npb25zIG9uIGRlc3RpbmF0aW9uIGxvY2F0aW9uICYgdGhhdCB0aGUgZGVzdGluYXRpb24gZGlyZWN0b3J5L2ZpbGUgZG9lcyBub3QgYWxyZWFkeSBleGlzdC4nOwoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOwoJCQkJfSBlbHNlIHsKCQkJCQkkZGV0YWlscyA9ICdSZWN1cnNpdmVseSBtb3ZlZCBgJyAuICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlIC4gJ2AgdG8gYCcgLiAkZmluYWxQYXRoIC4gJGZpbGUgLiAnYC48YnI+JzsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICRkZXRhaWxzICk7CgkJCQkJJHN1Y2Nlc3MgPSB0cnVlOwoJCQkJfQoJCQl9CgkJCQoJCX0gLy8gZW5kIGV4dHJhY3Qgc3VjY2Vzcy4KCQkKCQkKCQkvLyBUcnkgdG8gY2xlYW51cC4KCQlpZiAoIGZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb24gKSApIHsKCQkJaWYgKCBmYWxzZSA9PT0gcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT51bmxpbmtfcmVjdXJzaXZlKCAkZGVzdGluYXRpb24gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1VuYWJsZSB0byBkZWxldGUgdGVtcG9yYXJ5IGhvbGRpbmcgZGlyZWN0b3J5IGAnIC4gJGRlc3RpbmF0aW9uIC4gJ2AuJyApOwoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnQ2xlYW5lZCB1cCB0ZW1wb3JhcnkgZmlsZXMuJyApOwoJCQl9CgkJfQoJCQoJCQoJCWlmICggdHJ1ZSA9PT0gJHN1Y2Nlc3MgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0ZpbGUgcmV0cmlldmFsIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJyApOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJfSAvLyBFbmQgZnVuY3Rpb24gcmVzdG9yZSgpLgoKfSAvLyBFbmQgY2xhc3Mu
###PACKDATA,FILE_END,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
###PACKDATA,FILE_START,/classes/remote_api.php,importbuddy/classes/remote_api.php

###PACKDATA,FILE_END,/classes/remote_api.php,importbuddy/classes/remote_api.php
###PACKDATA,FILE_START,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
KGZ1bmN0aW9uKCQpewogCiAgICAkLmZuLmV4dGVuZCh7IAogICAgICAgICAKICAgICAgICBsZWFuTW9kYWw6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKIAkJCQogCQkJdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7CiAJCQkKICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0gewogICAgICAgICAgICAgICAgdG9wOiAxMDAsCiAgICAgICAgICAgICAgICBvdmVybGF5OiAwLjUsCiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbjogbnVsbAogICAgICAgICAgICB9OwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIG92ZXJsYXkgPSAkKCI8ZGl2IGlkPSdsZWFuX292ZXJsYXknPjwvZGl2PiIpOwogICAgICAgICAgICAKICAgICAgICAgICAgJCgiYm9keSIpLmFwcGVuZChvdmVybGF5KTsKICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgb3B0aW9ucyA9ICAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7CiAKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnM7CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljayhmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgCXZhciBtb2RhbF9pZCA9ICQodGhpcykuYXR0cigiaHJlZiIpOwoKCQkJCSQoIiNsZWFuX292ZXJsYXkiKS5jbGljayhmdW5jdGlvbigpIHsgCiAgICAgICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsKG1vZGFsX2lkKTsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICQoby5jbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24oKSB7IAogICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbChtb2RhbF9pZCk7ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgCQogICAgICAgICAgICAgIAl2YXIgbW9kYWxfaGVpZ2h0ID0gJChtb2RhbF9pZCkub3V0ZXJIZWlnaHQoZmFsc2UpOwogICAgICAgIAkgIAl2YXIgbW9kYWxfd2lkdGggPSAkKG1vZGFsX2lkKS5vdXRlcldpZHRoKGZhbHNlKTsKCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuY3NzKHsgJ2Rpc3BsYXknIDogJ2Jsb2NrJywgb3BhY2l0eSA6IDAgfSk7CgogICAgICAgIAkJJCgnI2xlYW5fb3ZlcmxheScpLmZhZGVUbygyMDAsby5vdmVybGF5KTsKCiAgICAgICAgCQkkKG1vZGFsX2lkKS5jc3MoeyAKICAgICAgICAJCQogICAgICAgIAkJCSdkaXNwbGF5JyA6ICdibG9jaycsCiAgICAgICAgCQkJJ3Bvc2l0aW9uJyA6ICdmaXhlZCcsCiAgICAgICAgCQkJJ29wYWNpdHknIDogMCwKICAgICAgICAJCQknei1pbmRleCc6IDExMDAwLAogICAgICAgIAkJCSdsZWZ0JyA6IDUwICsgJyUnLAogICAgICAgIAkJCSdtYXJnaW4tbGVmdCcgOiAtKG1vZGFsX3dpZHRoLzIpICsgInB4IiwKICAgICAgICAJCQkndG9wJyA6IG8udG9wICsgInB4IgogICAgICAgIAkJCiAgICAgICAgCQl9KTsKCiAgICAgICAgCQkkKG1vZGFsX2lkKS5mYWRlVG8oMjAwLDEpOwoKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIAl9KTsKICAgICAgICAgICAgIAogICAgICAgICAgICB9KTsKCgkJCWZ1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXsKCiAgICAgICAgCQkkKCIjbGVhbl9vdmVybGF5IikuZmFkZU91dCgyMDApOwoKICAgICAgICAJCSQobW9kYWxfaWQpLmNzcyh7ICdkaXNwbGF5JyA6ICdub25lJyB9KTsKCQkJCgkJCX0KICAgIAogICAgICAgIH0KICAgIH0pOwogICAgIAp9KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/css/animate.css,importbuddy/css/animate.css

###PACKDATA,FILE_END,/css/animate.css,importbuddy/css/animate.css
###PACKDATA,FILE_START,/images/working.gif,importbuddy/images/working.gif
R0lGODlhKwALAPEAAPn5+SiKt5LC2CiKtyH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAKwALAAACMoSOCMuW2diD88UKG95W88uF4DaGWFmhZid93pq+pwxnLUnXh8ou+sSz+T64oCAyTBUAACH5BAkKAAAALAAAAAArAAsAAAI9xI4IyyAPYWOxmoTHrHzzmGHe94xkmJifyqFKQ0pwLLgHa82xrekkDrIBZRQab1jyfY7KTtPimixiUsevAAAh+QQJCgAAACwAAAAAKwALAAACPYSOCMswD2FjqZpqW9xv4g8KE7d54XmMpNSgqLoOpgvC60xjNonnyc7p+VKamKw1zDCMR8rp8pksYlKorgAAIfkECQoAAAAsAAAAACsACwAAAkCEjgjLltnYmJS6Bxt+sfq5ZUyoNJ9HHlEqdCfFrqn7DrE2m7Wdj/2y45FkQ13t5itKdshFExC8YCLOEBX6AhQAADs=
###PACKDATA,FILE_END,/images/working.gif,importbuddy/images/working.gif
###PACKDATA,FILE_START,/images/bullet_go.png,importbuddy/images/bullet_go.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEsSURBVDjLY/j//z8DJZhhmBuQvdj8a+p8w//xc3U5yTIgeb7h18bNUf/DZ2j8958qz0nQgPyltv9zF5v/TV9o/Ddxrv7fmvWh/1ednvi/ZLX/f9d+8b+23YI8eA0AOvn/hnPT/q89OwWsccXpCf8n7Cn5v/B41/+MpW7/TdvZ/+o2M/LjNADoZLDmvl35/zt3ZP9v3Zb2v2Fz4v+mren/Zxxq/h+zwOa/aj3DH5wGRM/W/L/y1IT/S0/0/l94rOv/vKMdQEOy/k8/1PQ/banHf8VahlfSlQwGOA0InK74z3Oi9D/nftF/1t38/+LmW/2fdrDhf9Jit//ytQzPJSsZtEiKBe1mxq/xC53/y1czPAFqVic5GoFO/ipXzfxftJJBkeyUKFzOwDm48wIAh5XH+g7drOwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/bullet_go.png,importbuddy/images/bullet_go.png
###PACKDATA,FILE_START,/images/favicon.png,importbuddy/images/favicon.png
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
###PACKDATA,FILE_END,/images/favicon.png,importbuddy/images/favicon.png
###PACKDATA,FILE_START,/images/sort_down.png,importbuddy/images/sort_down.png
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAHBJREFUeNqMkD0OABEQRmcmVChIqN3/WBJHoLVYxK7GK4TvZwIMIcANrC0xxpJSOkzOOXjvASvUBOdcOxzBoXeDRhO11p+QlBKEEKtNc2OMAcbYKxL1aTsrWE201u4lPB4zUUphzrn8r9HA2+95BBgA3YASwqCieowAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/sort_down.png,importbuddy/images/sort_down.png
###PACKDATA,FILE_START,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
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
###PACKDATA,FILE_END,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
###PACKDATA,FILE_START,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php

###PACKDATA,FILE_END,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php
###PACKDATA,FILE_START,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
MS4wLjAgLSAyMDExLTA4LTE4IC0gRHVzdGluIEJvbHRvbgoJQ3JlYXRlZCBkYnJlcGxhY2UgY2xhc3Mu
###PACKDATA,FILE_END,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
###PACKDATA,FILE_START,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
###PACKDATA,FILE_START,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
###PACKDATA,FILE_START,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
PD9waHAKLy8gVE9ETzogRXZlbnR1YWxseSBwdWxsIG91dCBhbGwgY29tbWFuZCBsaW5lIGV4ZWN1dGlvbiB0byBydW4gdGhyb3VnaCB0aGlzIGxpYnJhcnkuCi8vCQlDdXJyZW50bHkgY29kZSBpcyBkdWNwbGljYXRlZCBiZXR3ZWVuIHRoZSBsaWJyYXJpZXMgdGhhdCBydW4gY29tbWFuZCBsaW5lIGNvbW1hbmRzLgoKY2xhc3MgcGJfYmFja3VwYnVkZHlfY29tbWFuZGJ1ZGR5IHsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewoJfQoJCgkvKglleGVjdXRlKCkKCSAqCQoJICoJRXhlY3V0ZSBhIGNvbW1hbmQgdmlhIHRoZSBjb21tYW5kIGxpbmUuCgkgKglFeGFtcGxlIHVzYWdlOgoJICoJCWxpc3QoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICkgPSAkdGhpcy0+ZXhlY3V0ZSggJ0NPTU1BTkRISEVSRScgKTsKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRjb21tYW5kCQlDb21tYW5kIGxpbmUgdG8gcnVuLgoJICoJQHJldHVybgkJYXJyYXkJCQkJCQlBc3NvY2lhdGl2ZSBhcnJheSBvZiB0aGUgcmVzcG9uc2Ugb3V0cHV0IGFuZCBleGlzdCBjb2RlLiBVc2Ugd2l0aCBsaXN0IHRvIGFzc2lnbiB2YXJpYWJsZXMuCgkgKgkJCQkJCQkJCQkJRm9ybWF0OiBhcnJheSggRVhFQ19PVVRQVVQsIEVYSVRfQ09ERSApOwoJICovCglwdWJsaWMgZnVuY3Rpb24gZXhlY3V0ZSggJGNvbW1hbmQgKSB7CgkJaWYgKCBzdHJpc3RyKCBQSFBfT1MsICdXSU4nICkgJiYgIXN0cmlzdHIoIFBIUF9PUywgJ0RBUldJTicgKSApIHsKCQkJLy8gV2luZG93czsgZG8gbm90aGluZy4KCQl9IGVsc2UgeyAvLyBMaW51eC9NYWMKCQkJaWYgKCAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPT0gZmFsc2UgKSAmJiAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPSAnJyApICkgeyAvLyBleGVjX2RpciBQSFAgcGF0Y2ggaW4gcGxhY2U6IGh0dHA6Ly93d3cua3liZXJkaWdpLmN6L3Byb2plY3RzL2V4ZWNkaXIvCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjX2RpciBkZXRlY3RlZC4gU2tpcHBpbmcgcGF0aCBhc3NpZ25tZW50LicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWNfZGlyIG5vdCBkZXRlY3RlZC4gUHJvY2VlZGluZyBub3JtYWxseS4nICk7CgkJCQkkY29tbWFuZCA9ICdQQVRIPSRQQVRIOi91c3IvYmluLzovdXNyL2xvY2FsL2Jpbi86dXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW4vOi91c3Ivc2Jpbi86L3NiaW4vOi91c3IvOi9iaW4vJyAuICc7ICcgLiAkY29tbWFuZDsKCQkJfQoJCX0KCQkKCQkvLyBPdXRwdXQgY29tbWFuZCAoc3RyaXBzIG15c3FsZHVtcCBwYXNzd29yZHMpLgoJCWlmICggc3Ryc3RyKCAkY29tbWFuZCwgJy0tcGFzc3dvcmQ9JyApICkgewoJCQkkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiA9IHN0cnBvcyggJGNvbW1hbmQsICctLXBhc3N3b3JkPScgKTsKCQkJJHBhc3N3b3JkX3BvcnRpb25fZW5kID0gc3RycG9zKCAkY29tbWFuZCwgJyAnLCAkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3Mgc3RhcnQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gLiAnYC4gcGFzcyBlbmQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fZW5kIC4gJ2AnICk7CgkJCSRwYXNzd29yZF9wb3J0aW9uID0gc3Vic3RyKCAkY29tbWFuZCwgJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4sICggJHBhc3N3b3JkX3BvcnRpb25fZW5kIC0gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gKSApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3MgcG9ydGlvbjogYCcgLiAkcGFzc3dvcmRfcG9ydGlvbiAuICdgLicgKTsKCQkJJHVucGFzc3dvcmRlZF9jb21tYW5kID0gc3RyX3JlcGxhY2UoICRwYXNzd29yZF9wb3J0aW9uLCAnLS1wYXNzd29yZD0qSElEREVOKicsICRjb21tYW5kICk7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWMoKSBjb21tYW5kIChwYXNzd29yZCBoaWRkZW4pIGAnIC4gJHVucGFzc3dvcmRlZF9jb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJCXVuc2V0KCAkdW5wYXNzd29yZGVkX2NvbW1hbmQgKTsKCQl9IGVsc2UgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjKCkgY29tbWFuZCBgJyAuICRjb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJfQoJCQoJCSRleGVjX291dHB1dCA9IGFycmF5KCk7CgkJQGV4ZWMoICRjb21tYW5kLCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnZXhlYygpIGNvbW1hbmQgb3V0cHV0OiBgJyAuIGltcGxvZGUoICcsJywgJGV4ZWNfb3V0cHV0ICkgLiAnYDsgRXhpdCBjb2RlOiBgJyAuICRleGVjX2V4aXRfY29kZSAuICdgOyBFeGl0IGNvZGUgZGVzY3JpcHRpb246IGAnIC4gcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT5leGl0X2NvZGVfbG9va3VwKCAkZXhlY19leGl0X2NvZGUgKSAuICdgJyApOwoJCQoJCXJldHVybiBhcnJheSggJGV4ZWNfb3V0cHV0LCAkZXhlY19leGl0X2NvZGUgKTsKCX0gLy8gRW5kIGV4ZWN1dGUoKS4KfQ==
###PACKDATA,FILE_END,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
###PACKDATA,FILE_START,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
Mi4wLjAgLSAyMDExLTEwLTA4IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgaGlzdG9yeS50eHQuCglBZGRlZCB1bnppcCBmdW5jdGlvbmFsaXR5Lg==
###PACKDATA,FILE_END,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5IENsYXNzCiAqCiAqCUhhbmRsZXMgemlwcGluZyBhbmQgdW56aXBwaW5nLCB1c2luZyB0aGUgYmVzdCBtZXRob2RzIGF2YWlsYWJsZSBhbmQgZmFsbGluZyBiYWNrIHRvIHdvcnNlIG1ldGhvZHMKICoJYXMgbmVlZGVkIGZvciBjb21wYXRpYmlsaXR5LiBBbGxvd3MgZm9yIGZvcmNpbmcgY29tcGF0aWJpbGl0eSBtb2Rlcy4KICoJCiAqCUBzaW5jZSAzLjAuMAogKglAYXV0aG9yIER1c3RpbiBCb2x0b24KICoKICoJJHRlbXBfZGlyCQlzdHJpbmcJCVRlbXBvcmFyeSBkaXJlY3RvcnkgYWJzb2x1dGUgcGF0aCBmb3IgdGVtcG9yYXJ5IGZpbGUgc3RvcmFnZS4gTXVzdCBiZSB3cml0YWJsZSEKICoJJHppcF9tZXRob2RzCWFycmF5CQlPcHRpb25hbC4gQXJyYXkgb2YgYXZhaWxhYmxlIHppcCBtZXRob2RzIHRvIHVzZS4gVXNlZnVsIGZvciBub3QgaGF2aW5nIHRvIHJlLXRlc3QgZXZlcnkgdGltZS4KICoJCQkJCQkJCUlmIG9taXR0ZWQgdGhlbiBhIHRlc3Qgd2lsbCBiZSBwZXJmb3JtZWQgdG8gZmluZCB0aGUgbWV0aG9kcyB0aGF0IHdvcmsgb24gdGhpcyBob3N0LgogKgkkbW9kZQkJCXN0cmluZwkJRnV0dXJlIHVzZSB0byBhbGxvdyBmb3Igb3RoZXIgY29tcHJlc3Npb24gbWV0aG9kcyBvdGhlciB0aGFuIHppcC4gQ3VycmVudGx5IG5vdCBpbiB1c2UuCiAqCiAqLwoKCgovLyBUcnkgYW5kIGxvYWQgdGhlIGV4cGVyaW1lbnRhbCB2ZXJzaW9uIC0gaWYgc3VjY2Vzc2Z1bCB0aGVuIGNsYXNzIHdpbGwgZXhpc3QgYW5kIHJlbWFpbmluZyBjb2RlIHdpbGwgYmUgaWdub3JlZAppZiAoCgkJKCBkZWZpbmVkKCAnVVNFX0VYUEVSSU1FTlRBTF9aSVBCVUREWScgKSAmJiAoIHRydWUgPT09IFVTRV9FWFBFUklNRU5UQUxfWklQQlVERFkgKSApCgkJfHwKCQkoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcCddICkgJiYgKCAnMScgPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydhbHRlcm5hdGl2ZV96aXAnXSApICkKCSkgewoJCXJlcXVpcmVfb25jZSggZGlybmFtZSggX19GSUxFX18gKSAuICcveC16aXBidWRkeS5waHAnICk7Cn0KCgoKaWYgKCAhY2xhc3NfZXhpc3RzKCAicGx1Z2luYnVkZHlfemlwYnVkZHkiICkgKSB7CgljbGFzcyBwbHVnaW5idWRkeV96aXBidWRkeSB7CgkJCgkJCgkJLyoqKioqKioqKiogUHJvcGVydGllcyAqKioqKioqKioqLwoJCQoJCQoJCWNvbnN0IFpJUF9NRVRIT0RTX1RSQU5TSUVOVCA9ICdwYl9iYWNrdXBidWRkeV9hdmFpbF96aXBfbWV0aG9kc19jbGFzc2ljJzsKCQljb25zdCBaSVBfRVhFQ1BBVEhfVFJBTlNJRU5UID0gJ3BiX2JhY2t1cGJ1ZGR5X2V4ZWNfcGF0aF9jbGFzc2ljJzsKCQljb25zdCBaSVBfVFJBTlNJRU5UX0xJRkUgPSA2MDsKCQljb25zdCBOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgPSAnLyc7CgkJY29uc3QgRElSRUNUT1JZX1NFUEFSQVRPUlMgPSAnL1xcJzsKCQkKCQlwcml2YXRlICRfY29tbWFuZGJ1ZGR5OwoJCXB1YmxpYyAkX3ppcF9tZXRob2RzOwkJLy8gQXJyYXkgb2YgYXZhaWxhYmxlIHppcCBtZXRob2RzLgoJCQoJCQoJCS8qKioqKioqKioqIE1ldGhvZHMgKioqKioqKioqKi8KCQkKCQkKCQlmdW5jdGlvbiBfX2NvbnN0cnVjdCggJHRlbXBfZGlyLCAkemlwX21ldGhvZHMgPSBhcnJheSgpLCAkbW9kZSA9ICd6aXAnICkgewoJCQkvLyR0aGlzLT5fc3RhdHVzID0gYXJyYXkoKTsKCQkJJHRoaXMtPl90ZW1wZGlyID0gJHRlbXBfZGlyOwoJCQkkdGhpcy0+X2V4ZWNwYXRoID0gJyc7CgkJCQoJCQkvLyBIYW5kbGVzIGNvbW1hbmQgbGluZSBleGVjdXRpb24uCgkJCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9jb21tYW5kYnVkZHkvY29tbWFuZGJ1ZGR5LnBocCcgKTsKCQkJJHRoaXMtPl9jb21tYW5kYnVkZHkgPSBuZXcgcGJfYmFja3VwYnVkZHlfY29tbWFuZGJ1ZGR5KCk7CgkJCQoJCQlpZiAoICFlbXB0eSggJHppcF9tZXRob2RzICkgJiYgKCBjb3VudCggJHppcF9tZXRob2RzICkgPiAwICkgKSB7CgkJCQkkdGhpcy0+X3ppcF9tZXRob2RzID0gJHppcF9tZXRob2RzOwoJCQl9IGVsc2UgewoJCQkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdnZXRfdHJhbnNpZW50JyApICkgeyAvLyBJbnNpZGUgV29yZFByZXNzCgkJCQkJCgkJCQkJaWYgKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2Rpc2FibGVfemlwbWV0aG9kX2NhY2hpbmcnXSA9PSAnMScgKSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1ppcCBtZXRob2QgY2FjaGluZyBkaXNhYmxlZCBiYXNlZCBvbiBzZXR0aW5ncy4nICk7CgkJCQkJCSRhdmFpbGFibGVfbWV0aG9kcyA9IGZhbHNlOwoJCQkJCQkkZXhlY19wYXRoID0gZmFsc2U7CgkJCQkJfSBlbHNlIHsgLy8gVXNlIGNhY2hpbmcuCgkJCQkJCSRhdmFpbGFibGVfbWV0aG9kcyA9IGdldF90cmFuc2llbnQoIHNlbGY6OlpJUF9NRVRIT0RTX1RSQU5TSUVOVCApOwoJCQkJCQkkZXhlY19wYXRoID0gZ2V0X3RyYW5zaWVudCggc2VsZjo6WklQX0VYRUNQQVRIX1RSQU5TSUVOVCApOwoJCQkJCX0KCQkJCQkKCQkJCQlpZiAoICggJGF2YWlsYWJsZV9tZXRob2RzID09PSBmYWxzZSApIHx8ICggJGV4ZWNfcGF0aCA9PT0gZmFsc2UgKSApIHsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnWmlwIG1ldGhvZHMgb3IgZXhlYyBwYXRoIHdlcmUgbm90IGNhY2hlZDsgZGV0ZWN0aW5nLi4uJyApOwoJCQkJCQkkdGhpcy0+X3ppcF9tZXRob2RzID0gJHRoaXMtPmF2YWlsYWJsZV96aXBfbWV0aG9kcyggZmFsc2UsICRtb2RlICk7CgkJCQkJCXNldF90cmFuc2llbnQoIHNlbGY6OlpJUF9NRVRIT0RTX1RSQU5TSUVOVCwgJHRoaXMtPl96aXBfbWV0aG9kcywgc2VsZjo6WklQX1RSQU5TSUVOVF9MSUZFICk7CgkJCQkJCXNldF90cmFuc2llbnQoIHNlbGY6OlpJUF9FWEVDUEFUSF9UUkFOU0lFTlQsICR0aGlzLT5fZXhlY3BhdGgsIHNlbGY6OlpJUF9UUkFOU0lFTlRfTElGRSApOyAvLyBDYWxjdWxhdGVkIGFuZCBzZXQgaW4gYXZhaWxhYmxlX3ppcF9tZXRob2RzKCkuCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NhY2hpbmcgemlwYnVkZHkgY2xhc3NpYyBtZXRob2RzICYgZXhlYyBwYXRoIGZvciBgJyAuIHNlbGY6OlpJUF9UUkFOU0lFTlRfTElGRSAuICdgIHNlY29uZHMuJyApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1VzaW5nIGNhY2hlZCB6aXBidWRkeSBjbGFzc2ljIG1ldGhvZHM6IGAnIC4gaW1wbG9kZSggJywnLCAkYXZhaWxhYmxlX21ldGhvZHMgKSAuICdgLicgKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVXNpbmcgY2FjaGVkIHppcGJ1ZGR5IGNsYXNzaWMgZXhlYyBwYXRoOiBgJyAuICRleGVjX3BhdGggLiAnYC4nICk7CgkJCQkJCSR0aGlzLT5femlwX21ldGhvZHMgPSAkYXZhaWxhYmxlX21ldGhvZHM7CgkJCQkJfQoJCQkJfSBlbHNlIHsgLy8gT3V0c2lkZSBXb3JkUHJlc3MKCQkJCQkkdGhpcy0+X3ppcF9tZXRob2RzID0gJHRoaXMtPmF2YWlsYWJsZV96aXBfbWV0aG9kcyggZmFsc2UsICRtb2RlICk7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnWmlwYnVkZHkgY2xhc3NpYyBtZXRob2RzIG5vdCBjYWNoZWQgZHVlIHRvIGJlaW5nIG91dHNpZGUgV29yZFByZXNzLicgKTsKCQkJCX0KCQkJfQoJCX0KCQkKCQkKCQkvLyBGdW5jdGlvbiB0byB0cmFuc2xhdGUgYSBaaXBBcmNoaXZlIGVycm9yIGNvZGUgaW50byBhbiBpbmZvcm1hdGl2ZSBzdHJpbmcgZGVzY3JpcHRpb24KCQlmdW5jdGlvbiB6aXBhcmNoaXZlX2Vycm9yX2luZm8oICRlcnJvciwgJGZ1bGwgPSB0cnVlICkgewoJCQoJCQkvLyBGb3Igc2FmZXR5IGxldCdzIGNoZWNrIHRoYXQgdGhlIGNsYXNzIGFjdHVhbGx5IGV4aXN0cy4uLgoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ1ppcEFyY2hpdmUnLCBmYWxzZSApICkgewoJCQkKCQkJCS8vIFdlIGNhbiBjaGVjayB0aGUgc3ltYm9saWMgdmFsdWVzCgkJCQlzd2l0Y2goIChpbnQpICRlcnJvciApIHsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX09LOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUlJfT0siOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiTm8gZXJyb3IiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX09QRU46CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX09QRU4iOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiQ2FuJ3Qgb3BlbiBmaWxlIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9NRU1PUlk6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX01FTU9SWSI7CgkJCQkgCSRlcnJvcl9kZXNjcmlwdGlvbiA9ICJNZW1vcnkgYWxsb2NhdGlvbiBmYWlsdXJlIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9FWElTVFM6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSUl9FWElTVFMiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiRmlsZSBhbHJlYWR5IGV4aXN0cyI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfSU5DT05TOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9JTkNPTlMiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiWmlwIGFyY2hpdmUgaW5jb25zaXN0ZW50IjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9JTlZBTDoKCQkJCSAJJGVycm9yX25hbWUgPSAiWklQQVJDSElWRTo6RVJfSU5WQUwiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiSW52YWxpZCBhcmd1bWVudCI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfTk9FTlQ6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX05PRU5UIjsKCQkJCSAJJGVycm9yX2Rlc2NyaXB0aW9uID0gIk5vIHN1Y2ggZmlsZSI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfTk9aSVA6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX05PWklQIjsKCQkJCSAJJGVycm9yX2Rlc2NyaXB0aW9uID0gIk5vdCBhIHppcCBhcmNoaXZlIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9SRUFEOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9SRUFEIjsKCQkJCSAJJGVycm9yX2Rlc2NyaXB0aW9uID0gIlJlYWQgZXJyb3IiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX1NFRUs6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX1NFRUsiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiU2VlayBlcnJvciI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfTVVMVElESVNLOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9NVUxUSURJU0siOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiTXVsdGktZGlzayB6aXAgYXJjaGl2ZXMgbm90IHN1cHBvcnRlZCI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfUkVOQU1FOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9SRU5BTUUiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiUmVuYW1pbmcgdGVtcG9yYXJ5IGZpbGUgZmFpbGVkIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9DTE9TRToKCQkJCSAJJGVycm9yX25hbWUgPSAiWklQQVJDSElWRTo6RVJfQ0xPU0UiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiQ2xvc2luZyB6aXAgYXJjaGl2ZSBmYWlsZWQiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX1dSSVRFOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9XUklURSI7CgkJCQkgCSRlcnJvcl9kZXNjcmlwdGlvbiA9ICJXcml0ZSBlcnJvciI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfQ1JDOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9DUkMiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiQ1JDIGVycm9yIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9aSVBDTE9TRUQ6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX1pJUENMT1NFRCI7CgkJCQkgCSRlcnJvcl9kZXNjcmlwdGlvbiA9ICJDb250YWluaW5nIHppcCBhcmNoaXZlIHdhcyBjbG9zZWQiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX1RNUE9QRU46CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX1RNUE9QRU4iOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiRmFpbHVyZSB0byBjcmVhdGUgdGVtcG9yYXJ5IGZpbGUiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX1pMSUI6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX1pMSUIiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiWmxpYiBlcnJvciI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfQ0hBTkdFRDoKCQkJCSAJJGVycm9yX25hbWUgPSAiWklQQVJDSElWRTo6RVJfQ0hBTkdFRCI7CgkJCQkgCSRlcnJvcl9kZXNjcmlwdGlvbiA9ICJFbnRyeSBoYXMgYmVlbiBjaGFuZ2VkIjsKCQkJCSAJYnJlYWs7CgkJCQkgY2FzZSBaSVBBUkNISVZFOjpFUl9DT01QTk9UU1VQUDoKCQkJCSAJJGVycm9yX25hbWUgPSAiWklQQVJDSElWRTo6RVJfQ09NUE5PVFNVUFAiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiQ29tcHJlc3Npb24gbWV0aG9kIG5vdCBzdXBwb3J0ZWQiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX0VPRjoKCQkJCSAJJGVycm9yX25hbWUgPSAiWklQQVJDSElWRTo6RVJfRU9GIjsKCQkJCSAJJGVycm9yX2Rlc2NyaXB0aW9uID0gIlByZW1hdHVyZSBFT0YiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX0lOVEVSTkFMOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9JTlRFUk5BTCI7CgkJCQkgCSRlcnJvcl9kZXNjcmlwdGlvbiA9ICJJbnRlcm5hbCBlcnJvciI7CgkJCQkgCWJyZWFrOwoJCQkJIGNhc2UgWklQQVJDSElWRTo6RVJfUkVNT1ZFOgoJCQkJIAkkZXJyb3JfbmFtZSA9ICJaSVBBUkNISVZFOjpFUl9SRU1PVkUiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiQ2FuJ3QgcmVtb3ZlIGZpbGUiOwoJCQkJIAlicmVhazsKCQkJCSBjYXNlIFpJUEFSQ0hJVkU6OkVSX0RFTEVURUQ6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSX0RFTEVURUQiOwoJCQkJIAkkZXJyb3JfZGVzY3JpcHRpb24gPSAiRW50cnkgaGFzIGJlZW4gZGVsZXRlZCI7CgkJCQkgCWJyZWFrOwoJCQkJIGRlZmF1bHQ6CgkJCQkgCSRlcnJvcl9uYW1lID0gIlpJUEFSQ0hJVkU6OkVSUl9VTktOT1dOIjsKCQkJCSAJJGVycm9yX2Rlc2NyaXB0aW9uID0gIlVua21vd24gZXJyb3IiOwoJCQkJfQoJCQkJCgkJCQkkZXJyb3Jfc3RyaW5nID0gJGVycm9yX25hbWUgLiAiKCIgLiAkZXJyb3IgLiAiKSA6ICIgLiAkZXJyb3JfZGVzY3JpcHRpb247CgkJCQoJCQl9IGVsc2UgewoJCQkKCQkJCS8vIElmIHRoZSBaaXBBcmNoaXZlIGNsYXNzIGRvZXNuJ3QgZXhpc3RzIGp1c3QgcmV0dXJuIGEgZ2VuZXJpYwoJCQkJJGVycm9yX3N0cmluZyA9ICJaSVBBUkNISVZFOjpFUl9VTktOT1dOKCIgLiAkZXJyb3IgLiAiKSA6IFVua25vd24gZXJyb3IiOwoJCQkKCQkJfQoJCQkKCQkJLy8gT25lIHdheSBvciBhbm90aGVyIHdlIGhhdmUgYSBzdHJpbmcgdG8gcmV0dXJuCgkJCXJldHVybiAkZXJyb3Jfc3RyaW5nOwoJCQoJCX0KCQkKCQkvLyBSZXR1cm5zIHRydWUgaWYgdGhlIGZpbGUgKHdpdGggcGF0aCkgZXhpc3RzIGluIHRoZSBaSVAuCgkJLy8gSWYgbGVhdmVfb3BlbiBpcyB0cnVlIHRoZW4gdGhlIHppcCBvYmplY3Qgd2lsbCBiZSBsZWZ0IG9wZW4gZm9yIGZhc3RlciBjaGVja2luZyBmb3Igc3Vic2VxdWVudCBmaWxlcyB3aXRoaW4gdGhpcyB6aXAKCQkvLyBOb3RlOiBsZWF2ZV9vcGVuIGZ1bmN0aW9uYWxpdHkgY3VycmVudGx5IG5vdCBpbXBsZW1lbnRlZAoJCWZ1bmN0aW9uIGZpbGVfZXhpc3RzKCAkemlwX2ZpbGUsICRsb2NhdGVfZmlsZSwgJGxlYXZlX29wZW4gPSBmYWxzZSApIHsKCgkJCS8vIFVzZSBaaXBBcmNoaXZlIGlmIGF2YWlsYWJsZQoJCQlpZiAoIGluX2FycmF5KCAnemlwYXJjaGl2ZScsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCgkJCQkvLyBNYWtlIGRvdWJseSBzdXJlIGl0IGlzIGF2YWlsYWJsZSAtIGlmIG5vdCB3ZSdsbCBqdXN0IGRyb3AgdGhyb3VnaAoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdaaXBBcmNoaXZlJywgZmFsc2UpICkgewoJCQkJCgkJCQkJJHphID0gbmV3IFppcEFyY2hpdmUoKTsKCQkJCQkkcmVzdWx0ID0gJHphLT5vcGVuKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgd2Ugb3BlbmVkIHRoZSB6aXAgb2sKCQkJCQlpZiAoICRyZXN1bHQgPT09IHRydWUgKSB7CgkJCQkJCgkJCQkJCS8vIE5vdyB0cnkgYW5kIGZpbmQgdGhlIGluZGV4IG9mIHRoZSBmaWxlCgkJCQkJCSRpbmRleCA9ICR6YS0+bG9jYXRlTmFtZSggJGxvY2F0ZV9maWxlICk7CgkJCQkJCQoJCQkJCQkvLyBXZSBoYXZlIGZpbmlzaGVkIHdpdGggdGhlIGFyY2hpdmUgKGxlYXZlX29wZW4gaWdub3JlZCBmb3Igbm93KQoJCQkJCQkkemEtPmNsb3NlKCk7CgkJCQkJCQoJCQkJCQkvLyBJZiB3ZSBnb3QgYW4gaW5kZXggd2UgZm91bmQgaXQgb3RoZXJ3aXNlIG5vdCBmb3VuZAoJCQkJCQlpZiAoICRpbmRleCAhPT0gZmFsc2UgKSB7CgkJCQkJCQoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmlsZSBmb3VuZCAoemlwYXJjaGl2ZSknLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzogJyAuICRsb2NhdGVfZmlsZSApOwoJCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJCQkKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCgkJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGaWxlIG5vdCBmb3VuZCAoemlwYXJjaGl2ZSknLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzogJyAuICRsb2NhdGVfZmlsZSApOwoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQkJCgkJCQkJCX0KCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gQ291bGRuJ3Qgb3BlbiBhcmNoaXZlIC0gZHJvcCB0aHJvdWdoIGFzIG1heWJlIG90aGVyIG1ldGhvZCB3aWxsIHN1Y2NlZWQ/CgkJCQkJCSRlcnJvcl9zdHJpbmcgPSAkdGhpcy0+emlwYXJjaGl2ZV9lcnJvcl9pbmZvKCAkcmVzdWx0ICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1ppcEFyY2hpdmUgZmFpbGVkIHRvIG9wZW4gZmlsZSB0byBjaGVjayBpZiBmaWxlIGV4aXN0cyAobG9va2luZyBmb3IgJTEkcyBpbiAlMiRzKSAtIEVycm9yIEluZm86ICUzJHMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGxvY2F0ZV9maWxlICwgJHppcF9maWxlLCAkZXJyb3Jfc3RyaW5nICkgKTsKCgkJCQkJfQoJCQkJCgkJCQl9IGVsc2UgewoJCQkJCgkJCQkJLy8gU29tZXRoaW5nIGZpc2h5IC0gdGhlIG1ldGhvZHMgaW5kaWNhdGVkIHppcGFyY2hpdmUgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnemlwYXJjaGl2ZSBpbmRpY2F0ZWQgYXMgYXZhaWxhYmxlIG1ldGhvZCBidXQgWmlwQXJjaGl2ZSBjbGFzcyBub24tZXhpc3RlbnQnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgoJCQkJfQoJCQkJCgkJCX0KCQkJCgkJCS8vIERyb3BwZWQgdGhyb3VnaCBiZWNhdXNlIFppcEFyY2hpdmUgbm90IGF2YWlsYWJsZSBvciBmYWlsZWQgdG8gb3BlbiBmaWxlCgkJCWlmICggaW5fYXJyYXkoICdwY2x6aXAnLCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgaXQKCQkJCWlmICggIWNsYXNzX2V4aXN0cyggJ1BjbFppcCcsIGZhbHNlICkgKSB7CgkJCQkKCQkJCQkvLyBJdCdzIG5vdCBhbHJlYWR5IGxvYWRlZCBzbyB0cnkgYW5kIGZpbmQvbG9hZCBpdCBmcm9tIHBvc3NpYmxlIGxvY2F0aW9ucwoJCQkJCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtYWRtaW4vaW5jbHVkZXMvY2xhc3MtcGNsemlwLnBocCcgKSApIHsKCQkJCQkKCQkJCQkJLy8gUnVubmluZyB1bmRlciBXb3JkUHJlc3MKCQkJCQkJQGluY2x1ZGVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9IGVsc2VpZiAoIGZpbGVfZXhpc3RzKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApICkgewoJCQkJCQoJCQkJCQkvLyBSdW5uaW5nIFN0YW5kYWxvbmUgKGltcG9ydGJ1ZGR5KQoJCQkJCQlAaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9CgkJCQkKCQkJCS8vIE1ha2Ugc3VyZSB3ZSBkaWQgbG9hZCBpdAoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdQY2xaaXAnLCBmYWxzZSApICkgewoJCQkJCgkJCQkJJHphID0gbmV3IFBjbFppcCggJHppcF9maWxlICk7CgkJCQkJCgkJCQkJLy8gTWFrZSBzdXJlIHdlIG9wZW5lZCB0aGUgemlwIG9rIGFuZCBpdCBoYXMgY29udGVudAoJCQkJCWlmICggKCAkY29udGVudF9saXN0ID0gJHphLT5saXN0Q29udGVudCgpICkgIT09IDAgKSB7CgkJCQkJCgkJCQkJCS8vIEdldCBlYWNoIGZpbGUgaW4gc2VxdWVuY2UgYnkgaW5kZXggYW5kIGdldCB0aGUgcHJvcGVydGllcwoJCQkJCQlmb3IgKCAkaSA9IDA7ICRpIDwgc2l6ZW9mKCAkY29udGVudF9saXN0ICk7ICRpKysgKSB7CgkJCQkJCQoJCQkJCQkJJHN0YXQgPSAkY29udGVudF9saXN0WyAkaSBdOwoJCQkJCQkJCgkJCQkJCQkvLyBBc3N1bWUgdGhlIGtleSBleGlzdHMgKGNvbnNpZGVyIHRlc3RpbmcpCgkJCQkJCQlpZiAoICRzdGF0WyAnZmlsZW5hbWUnIF0gPT0gJGxvY2F0ZV9maWxlICkgewoJCQkJCQkJCgkJCQkJCQkJLy8gRmlsZSBmb3VuZCBzbyB3ZSBjYW4ganVzdCByZXR1cm4KCQkJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGaWxlIGZvdW5kIChwY2x6aXApJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc6ICcgLiAkbG9jYXRlX2ZpbGUgKTsKCQkJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkJCQkKCQkJCQkJCX0KCQkJCQkJCQoJCQkJCQl9CgkJCQkJCQoJCQkJCQkvLyBPbmx5IGdldCBoZXJlIGlmIHRoZSBmaWxlIHdhc24ndCBmb3VuZAoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGaWxlIG5vdCBmb3VuZCAocGNsemlwKScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGxvY2F0ZV9maWxlICk7CgkJCQkJCXJldHVybiBmYWxzZTsKCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gQ291bGRuJ3Qgb3BlbiBhcmNoaXZlIC0gZHJvcCB0aHJvdWdoIGFzIG1heWJlIG90aGVyIG1ldGhvZCB3aWxsIHN1Y2NlZWQ/CgkJCQkJCSRlcnJvcl9zdHJpbmcgPSAkemEtPmVycm9ySW5mbyggdHJ1ZSApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdwY2x6aXAgZmFpbGVkIHRvIG9wZW4gZmlsZSB0byBjaGVjayBpZiBmaWxlIGV4aXN0cyAobG9va2luZyBmb3IgJTEkcyBpbiAlMiRzKSAtIEVycm9yIEluZm86ICUzJHMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGxvY2F0ZV9maWxlICwgJHppcF9maWxlLCAkZXJyb3Jfc3RyaW5nICkgKTsKCgkJCQkJfQoJCQkJCQkJCQoJCQkJfSBlbHNlIHsKCQkJCQoJCQkJCS8vIFNvbWV0aGluZyBmaXNoeSAtIHRoZSBtZXRob2RzIGluZGljYXRlZCBwY2x6aXAgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygncGNsemlwIGluZGljYXRlZCBhcyBhdmFpbGFibGUgbWV0aG9kIGJ1dCBjbGFzcyBQY2xaaXAgbm9uLWV4aXN0ZW50JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBubyBtZXRob2QgdG8gY2hlY2sgYmFja3VwIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSBvciB3b3JrZWQKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIGNoZWNrIGlmIGZpbGUgZXhpc3RzIChsb29raW5nIGZvciAlMSRzIGluICUyJHMpOiBObyBjb21wYXRpYmxlIHppcCBtZXRob2QgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGxvY2F0ZV9maWxlLCAkemlwX2ZpbGUgKSApOwoJCQlyZXR1cm4gZmFsc2U7CgoJCX0KCQkKCQkKCQkKCQkvKglzZXRfY29tbWVudCgpCgkJICoJCgkJICoJUmV0cmlldmUgYXJjaGl2ZSBjb21tZW50LgoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJJHppcF9maWxlCQlGaWxlbmFtZSBvZiBhcmNoaXZlIHRvIHNldCBjb21tZW50IG9uLgoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJJGNvbW1lbnQJCUNvbW1lbnQgdG8gYXBwbHkgdG8gYXJjaGl2ZS4KCQkgKglAcmV0dXJuCQlib29sZWFuL3N0cmluZwkJCQkJdHJ1ZSBvbiBzdWNjZXNzLCBlcnJvciBtZXNzYWdlIG90aGVyd2lzZS4KCQkgKi8KCQlmdW5jdGlvbiBzZXRfY29tbWVudCggJHppcF9maWxlLCAkY29tbWVudCApIHsKCQkKCQkJLy9Vc2UgWmlwQXJjaGl2ZSBpZiBhdmFpbGFibGUKCQkJaWYgKCBpbl9hcnJheSggJ3ppcGFyY2hpdmUnLCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gTWFrZSBkb3VibHkgc3VyZSBpdCBpcyBhdmFpbGFibGUKCQkJCWlmICggY2xhc3NfZXhpc3RzKCAnWmlwQXJjaGl2ZScsIGZhbHNlICkgKSB7CgkJCQkKCQkJCQkkemEgPSBuZXcgWmlwQXJjaGl2ZTsKCQkJCQkkcmVzdWx0ID0gJHphLT5vcGVuKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgYXQgbGVhc3QgdGhlIHppcCBmaWxlIG9wZW5lZCBvawoJCQkJCWlmICggJHJlc3VsdCA9PT0gdHJ1ZSApIHsKCQkJCQkKCQkJCQkJCS8vIFNldCB0aGUgY29tbWVudCAtIHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZQoJCQkJCQkJJHJlc3VsdCA9ICR6YS0+c2V0QXJjaGl2ZUNvbW1lbnQoICRjb21tZW50ICk7CgkJCQkJCQkkemEtPmNsb3NlKCk7CgkJCQkJCQkKCQkJCQkJCS8vIElmIHdlIGdvdCBiYWNrIHRydWUgdGhlbiBhbGwgaXMgd2VsbCB3aXRoIHRoZSB3b3JsZAoJCQkJCQkJaWYgKCAkcmVzdWx0ID09PSB0cnVlICkgewoJCQkJCQkJCgkJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnWmlwQXJjaGl2ZSBzZXQgY29tbWVudCBpbiBmaWxlICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOwoJCQkJCQkJCXJldHVybiB0cnVlOwoJCQkJCQkJCQoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQoJCQkJCQkJCS8vIElmIHdlIGZhaWxlZCB0byBzZXQgdGhlIGNvbW1uZW50IHRoZW4gbG9nIGl0ICg/KSBhbmQgZHJvcCB0aHJvdWdoCgkJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnWmlwQXJjaGl2ZSBmYWlsZWQgdG8gc2V0IGNvbW1lbnQgaW4gZmlsZSAlMSRzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlICkgKTsKCgkJCQkJCQl9CgkJCQkJCQkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBJZiB3ZSBjb3VsZG4ndCBvcGVuIHRoZSB6aXAgZmlsZSB0aGVuIGxvZyBpdCAoPykgYW5kIGRyb3AgdGhyb3VnaAoJCQkJCQkkZXJyb3Jfc3RyaW5nID0gJHRoaXMtPnppcGFyY2hpdmVfZXJyb3JfaW5mbyggJHJlc3VsdCApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdaaXBBcmNoaXZlIGZhaWxlZCB0byBvcGVuIGZpbGUgdG8gc2V0IGNvbW1lbnQgaW4gZmlsZSAlMSRzIC0gRXJyb3IgSW5mbzogJTIkcycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGVycm9yX3N0cmluZyApICk7CgkJCQkJCQoJCQkJCX0KCQkJCQkJCQkJCgkJCQl9IGVsc2UgewoJCQkJCgkJCQkJLy8gU29tZXRoaW5nIGZpc2h5IC0gdGhlIG1ldGhvZHMgaW5kaWNhdGVkIHppcGFyY2hpdmUgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnemlwYXJjaGl2ZSBpbmRpY2F0ZWQgYXMgYXZhaWxhYmxlIG1ldGhvZCBidXQgWmlwQXJjaGl2ZSBjbGFzcyBub24tZXhpc3RlbnQnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgoJCQkJfQoJCQkJCgkJCX0KCQkJCgkJCS8vIERyb3BwZWQgdGhyb3VnaCBiZWNhdXNlIFppcEFyY2hpdmUgbm90IGF2YWlsYWJsZSBvciBmYWlsZWQgZm9yIHNvbWUgcmVhc29uCgkJCWlmICggaW5fYXJyYXkoICdwY2x6aXAnLCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgaXQKCQkJCWlmICggIWNsYXNzX2V4aXN0cyggJ1BjbFppcCcsIGZhbHNlICkgKSB7CgkJCQkKCQkJCQkvLyBJdCdzIG5vdCBhbHJlYWR5IGxvYWRlZCBzbyB0cnkgYW5kIGZpbmQvbG9hZCBpdCBmcm9tIHBvc3NpYmxlIGxvY2F0aW9ucwoJCQkJCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtYWRtaW4vaW5jbHVkZXMvY2xhc3MtcGNsemlwLnBocCcgKSApIHsKCQkJCQkKCQkJCQkJLy8gUnVubmluZyB1bmRlciBXb3JkUHJlc3MKCQkJCQkJQGluY2x1ZGVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9IGVsc2VpZiAoIGZpbGVfZXhpc3RzKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApICkgewoJCQkJCQoJCQkJCQkvLyBSdW5uaW5nIFN0YW5kYWxvbmUgKGltcG9ydGJ1ZGR5KQoJCQkJCQlAaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9CgkJCQkKCQkJCS8vIE1ha2Ugc3VyZSB3ZSBkaWQgbG9hZCBpdAoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdQY2xaaXAnLCBmYWxzZSkgKSB7CgkJCQkKCQkJCQkkemEgPSBuZXcgUGNsWmlwKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgd2Ugb3BlbmVkIHRoZSB6aXAgb2sgYW5kIHdlIGFkZGVkIHRoZSBjb21tZW50IG9rCgkJCQkJLy8gTm90ZTogdXNpbmcgZW1wdHkgYXJyYXkgYXMgd2UgZG9uJ3QgYWN0dWFsbHkgd2FudCB0byBhZGQgYW55IGZpbGVzCgkJCQkJaWYgKCAoICRsaXN0ID0gJHphLT5hZGQoIGFycmF5KCksIFBDTFpJUF9PUFRfQ09NTUVOVCwgJGNvbW1lbnQgKSApICE9PSAwICkgewoJCQkJCQoJCQkJCQkvLyBXZSBnb3QgYSBsaXN0IGJhY2sgc28gYWRkaW5nIGNvbW1lbnQgc2hvdWxkIGhhdmUgYmVlbiBzdWNjZXNzZnVsCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1BjbFppcCBzZXQgY29tbWVudCBpbiBmaWxlICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOwoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gSWYgd2UgZmFpbGVkIHRvIHNldCB0aGUgY29tbW5lbnQgdGhlbiBsb2cgaXQgKD8pIGFuZCBkcm9wIHRocm91Z2gKCQkJCQkJJGVycm9yX3N0cmluZyA9ICR6YS0+ZXJyb3JJbmZvKCB0cnVlICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1BjbFppcCBmYWlsZWQgdG8gc2V0IGNvbW1lbnQgaW4gZmlsZSAlMSRzIC0gRXJyb3IgSW5mbzogJTIkcycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGVycm9yX3N0cmluZyApICk7CgkJCQkJCQoJCQkJCX0KCQkJCQoJCQkJfSBlbHNlIHsKCQkJCQoJCQkJCS8vIFNvbWV0aGluZyBmaXNoeSAtIHRoZSBtZXRob2RzIGluZGljYXRlZCBwY2x6aXAgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygncGNsemlwIGluZGljYXRlZCBhcyBhdmFpbGFibGUgbWV0aG9kIGJ1dCBjbGFzcyBQY2xaaXAgbm9uLWV4aXN0ZW50JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBXZSBjb3VsZG4ndCBzZXQgYSBjb21tZW50IGF0IGFsbCAtIGVpdGhlciBubyBhdmFpbGFibGUgbWV0aG9kIG9yIGFsbCBtZXRob2RzIGZhaWxlZAoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gc2V0IGNvbW1lbnQgaW4gZmlsZSAlMSRzOiBObyBjb21wYXRpYmxlIHppcCBtZXRob2QgZm91bmQgb3IgYWxsIG1ldGhvZHMgZmFpbGVkIC0gbm90ZSBzdG9yZWQgaW50ZXJuYWxseSBvbmx5LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSApICk7CgoJCQkvLyBSZXR1cm4gbWVzc2FnZSBmb3IgZGlzcGxheSAtIG1heWJlIHNob3VsZCByZXR1cm4gZmFsc2UgYW5kIGhhdmUgY2FsbGVyIGRpc3BsYXkgaXQncyBvd24gbWVzc2FnZT8KCQkJJG1lc3NhZ2UgPSAiXG5cblVuYWJsZSB0byBzZXQgbm90ZSBpbiBmaWxlLlxuVGhlIG5vdGUgd2lsbCBvbmx5IGJlIHN0b3JlZCBpbnRlcm5hbGx5IGluIHlvdXIgc2V0dGluZ3MgYW5kIG5vdCBpbiB0aGUgemlwIGZpbGUgaXRzZWxmLiI7CgkJCXJldHVybiAkbWVzc2FnZTsKCQkJCgkJfSAvLyBFbmQgc2V0X2NvbW1lbnQoKS4KCQkKCQkKCQkKCQkvKglnZXRfY29tbWVudCgpCgkJICoJCgkJICoJUmV0cmlldmUgYXJjaGl2ZSBjb21tZW50LgoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkkemlwX2ZpbGUJCUZpbGVuYW1lIG9mIGFyY2hpdmUgdG8gcmV0cmlldmUgY29tbWVudCBmcm9tLgoJCSAqCUByZXR1cm4JCXN0cmluZwkJCQkJCVppcCBjb21tZW50LgoJCSAqLwoJCWZ1bmN0aW9uIGdldF9jb21tZW50KCAkemlwX2ZpbGUgKSB7CgkJCgkJCS8vIFVzZSBaaXBBcmNoaXZlIGlmIGF2YWlsYWJsZQoJCQlpZiAoIGluX2FycmF5KCAnemlwYXJjaGl2ZScsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCgkJCQkvLyBNYWtlIGRvdWJseSBzdXJlIGl0IGlzIGF2YWlsYWJsZQoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdaaXBBcmNoaXZlJywgZmFsc2UgKSApIHsKCQkJCQoJCQkJCSR6YSA9IG5ldyBaaXBBcmNoaXZlKCk7CgkJCQkJJHJlc3VsdCA9ICR6YS0+b3BlbiggJHppcF9maWxlICk7CgkJCQkJCgkJCQkJLy8gTWFrZSBzdXJlIHRoYXQgYXQgbGVhc3QgdGhlIHppcCBmaWxlIG9wZW5lZCBvawoJCQkJCWlmICggJHJlc3VsdCA9PT0gdHJ1ZSApIHsKCQkJCQkKCQkJCQkJLy8gR2V0IHRoZSBjb21tZW50IG9yIGZhbHNlIG9uIGZhaWx1cmUgZm9yIHNvbWUgcmVhc29uCgkJCQkJCSRjb21tZW50ID0gJHphLT5nZXRBcmNoaXZlQ29tbWVudCgpOwoJCQkJCQkkemEtPmNsb3NlKCk7CgkJCQkJCQoJCQkJCQkvLyBJZiB3ZSBoYXZlIGEgY29tbWVudCAoZXZlbiBpZiBlbXB0eSkgdGhlbiByZXR1cm4gaXQKCQkJCQkJaWYgKCAkY29tbWVudCAhPT0gZmFsc2UgKSB7CgkJCQkJCQoJCQkJCQkJLy8gTm90ZTogbmV3IGFyY2hpdmVzIHdpbGwgcmV0dXJuIGFuIGVtcHR5IGNvbW1lbnQgaWYgb25lIHdhcyBub3QgYWRkZWQgYXQgY3JlYXRpb24KCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1ppcEFyY2hpdmUgcmV0cmlldmVkIGNvbW1lbnQgaW4gZmlsZSAlMSRzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlICkgKTsKCgkJCQkJCQkvLyBGb3JtYXQgaGFzIGNoYW5nZWQgYW5kIG5vIGxvbmdlciBlbmNvZGluZyBhcyBodG1sZW10aXRpZXMgd2hlbiBzZXR0aW5nIGNvbW1lbnQKCQkJCQkJCS8vIEZvciBvbGRlciBiYWNrdXBzIG1heSBuZWVkIHRvIHJlbW92ZSBlbmNvZGluZyAtIGFjdGlvbiBfc2hvdWxkXyBiZSBudWxsIGlmIE4vQQoJCQkJCQkJLy8gT25seSBzcGFubmVyIHdvdWxkIGJlIGlmIHNvbWVvbmUgaGFkIHB1dCBhbiBlbnRpdHkgaW4gdGhlaXIgY29tbWVudCBidXQgdGhhdCBpcwoJCQkJCQkJLy8gcmVhbGx5IGFuIG91dHNpZGVyIGFuZCBpbiBhbnkgY2FzZSB0aGUgY29ycmVjdGlvbiBpcyBzaW1wbHkgdG8gZWRpdCBhbmQgcmVzYXZlCgkJCQkJCQkvLyBUT0RPOiBSZW1vdmUgdGhpcyB3aGVuIG5ldyBmb3JtYXQgaGFzIGJlZW4gaW4gdXNlIGZvciBzb21lIHRpbWUKCQkJCQkJCSRjb21tZW50ID0gaHRtbF9lbnRpdHlfZGVjb2RlKCAkY29tbWVudCApOwkJCQkKCgkJCQkJCQlyZXR1cm4gJGNvbW1lbnQ7CgkJCQkJCQkKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCgkJCQkJCQkvLyBJZiB3ZSBmYWlsZWQgdG8gZ2V0IHRoZSBjb21tbmVudCB0aGVuIGxvZyBpdCAoPykgYW5kIGRyb3AgdGhyb3VnaAoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnWmlwQXJjaGl2ZSBmYWlsZWQgdG8gcmV0cmlldmUgY29tbWVudCBpbiBmaWxlICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBJZiB3ZSBjb3VsZG4ndCBvcGVuIHRoZSB6aXAgZmlsZSB0aGVuIGxvZyBpdCAoPykgYW5kIGRyb3AgdGhyb3VnaAoJCQkJCQkkZXJyb3Jfc3RyaW5nID0gJHRoaXMtPnppcGFyY2hpdmVfZXJyb3JfaW5mbyggJHJlc3VsdCApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdaaXBBcmNoaXZlIGZhaWxlZCB0byBvcGVuIGZpbGUgdG8gcmV0cmlldmUgY29tbWVudCBpbiBmaWxlICUxJHMgLSBFcnJvciBJbmZvOiAlMiRzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlLCAkZXJyb3Jfc3RyaW5nICkgKTsKCgkJCQkJfQoJCQkJCgkJCQl9IGVsc2UgewoJCQkJCgkJCQkJLy8gU29tZXRoaW5nIGZpc2h5IC0gdGhlIG1ldGhvZHMgaW5kaWNhdGVkIHppcGFyY2hpdmUgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnemlwYXJjaGl2ZSBpbmRpY2F0ZWQgYXMgYXZhaWxhYmxlIG1ldGhvZCBidXQgWmlwQXJjaGl2ZSBjbGFzcyBub24tZXhpc3RlbnQnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgoJCQkJfQoJCQkJCgkJCX0KCQkJCgkJCS8vIERyb3BwZWQgdGhyb3VnaCBiZWNhdXNlIFppcEFyY2hpdmUgbm90IGF2YWlsYWJsZSBvciBmYWlsZWQgZm9yIHNvbWUgcmVhc29uCgkJCWlmICggaW5fYXJyYXkoICdwY2x6aXAnLCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgaXQKCQkJCWlmICggIWNsYXNzX2V4aXN0cyggJ1BjbFppcCcsIGZhbHNlICkgKSB7CgkJCQkKCQkJCQkvLyBJdCdzIG5vdCBhbHJlYWR5IGxvYWRlZCBzbyB0cnkgYW5kIGZpbmQvbG9hZCBpdCBmcm9tIHBvc3NpYmxlIGxvY2F0aW9ucwoJCQkJCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtYWRtaW4vaW5jbHVkZXMvY2xhc3MtcGNsemlwLnBocCcgKSApIHsKCQkJCQkKCQkJCQkJLy8gUnVubmluZyB1bmRlciBXb3JkUHJlc3MKCQkJCQkJQGluY2x1ZGVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9IGVsc2VpZiAoIGZpbGVfZXhpc3RzKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApICkgewoJCQkJCQoJCQkJCQkvLyBSdW5uaW5nIFN0YW5kYWxvbmUgKGltcG9ydGJ1ZGR5KQoJCQkJCQlAaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9CgkJCQkKCQkJCS8vIE1ha2Ugc3VyZSB3ZSBkaWQgbG9hZCBpdAoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdQY2xaaXAnLCBmYWxzZSkgKSB7CgkJCQkKCQkJCQkkemEgPSBuZXcgUGNsWmlwKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgd2Ugb3BlbmVkIHRoZSB6aXAgb2sgYW5kIGl0IGhhcyBwcm9wZXJ0aWVzCgkJCQkJaWYgKCAoICRwcm9wZXJ0aWVzID0gJHphLT5wcm9wZXJ0aWVzKCkgKSAhPT0gMCApIHsKCQkJCQkKCQkJCQkJLy8gV2UgZ290IHByb3BlcnRpZXMgc28gc2hvdWxkIGhhdmUgYSBjb21tZW50IHRvIHJldHVybiwgZXZlbiBpZiBlbXB0eQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdQY2xaaXAgcmV0cmlldmVkIGNvbW1lbnQgaW4gZmlsZSAlMSRzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlICkgKTsKCQkJCQkJJGNvbW1lbnQgPSAkcHJvcGVydGllc1sgJ2NvbW1lbnQnIF07CgoJCQkJCQkvLyBGb3JtYXQgaGFzIGNoYW5nZWQgYW5kIG5vIGxvbmdlciBlbmNvZGluZyBhcyBodG1sZW10aXRpZXMgd2hlbiBzZXR0aW5nIGNvbW1lbnQKCQkJCQkJLy8gRm9yIG9sZGVyIGJhY2t1cHMgbWF5IG5lZWQgdG8gcmVtb3ZlIGVuY29kaW5nIC0gYWN0aW9uIF9zaG91bGRfIGJlIG51bGwgaWYgTi9BCgkJCQkJCS8vIE9ubHkgc3Bhbm5lciB3b3VsZCBiZSBpZiBzb21lb25lIGhhZCBwdXQgYW4gZW50aXR5IGluIHRoZWlyIGNvbW1lbnQgYnV0IHRoYXQgaXMKCQkJCQkJLy8gcmVhbGx5IGFuIG91dHNpZGVyIGFuZCBpbiBhbnkgY2FzZSB0aGUgY29ycmVjdGlvbiBpcyBzaW1wbHkgdG8gZWRpdCBhbmQgcmVzYXZlCgkJCQkJCS8vIFRPRE86IFJlbW92ZSB0aGlzIHdoZW4gbmV3IGZvcm1hdCBoYXMgYmVlbiBpbiB1c2UgZm9yIHNvbWUgdGltZQoJCQkJCQkkY29tbWVudCA9IGh0bWxfZW50aXR5X2RlY29kZSggJGNvbW1lbnQgKTsKCQkJCQkKCQkJCQkJcmV0dXJuICRjb21tZW50OwoJCQkJCQkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBJZiB3ZSBmYWlsZWQgdG8gZ2V0IHRoZSBjb21tbmVudCB0aGVuIGxvZyBpdCAoPykgYW5kIGRyb3AgdGhyb3VnaAoJCQkJCQkkZXJyb3Jfc3RyaW5nID0gJHphLT5lcnJvckluZm8oIHRydWUgKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnUGNsWmlwIGZhaWxlZCB0byByZXRyaWV2ZSBjb21tZW50IGluIGZpbGUgJTEkcyAtIEVycm9yIEluZm86ICUyJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRlcnJvcl9zdHJpbmcgKSApOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0gZWxzZSB7CgkJCQkKCQkJCQkvLyBTb21ldGhpbmcgZmlzaHkgLSB0aGUgbWV0aG9kcyBpbmRpY2F0ZWQgcGNsemlwIGJ1dCB3ZSBjb3VsZG4ndCBmaW5kIHRoZSBjbGFzcwoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ3BjbHppcCBpbmRpY2F0ZWQgYXMgYXZhaWxhYmxlIG1ldGhvZCBidXQgY2xhc3MgUGNsWmlwIG5vbi1leGlzdGVudCcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJLy8gV2UgY291bGRuJ3QgZ2V0IGEgY29tbWVudCBhdCBhbGwgLSBlaXRoZXIgbm8gYXZhaWxhYmxlIG1ldGhvZCBvciBhbGwgbWV0aG9kcyBmYWlsZWQKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVW5hYmxlIHRvIGdldCBjb21tZW50OiBObyBjb21wYXRpYmxlIHppcCBtZXRob2QgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQlyZXR1cm4gZmFsc2U7CgkJCQoJCX0gLy8gRW5kIGdldF9jb21tZW50KCkuCgkJCgkJCgkJCgkJLy8gRk9SIEZVVFVSRSBVU0U7IE5PVCBZRVQgSU1QTEVNRU5URUQuIFVzZSB0byBjaGVjayAuc3FsIGZpbGUgaXMgbm9uLWVtcHR5LgoJCWZ1bmN0aW9uIGZpbGVfc3RhdHMoICR6aXBfZmlsZSwgJGxvY2F0ZV9maWxlLCAkbGVhdmVfb3BlbiA9IGZhbHNlICkgewoJCQlpZiAoIGluX2FycmF5KCAnemlwYXJjaGl2ZScsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCSR0aGlzLT5femlwID0gbmV3IFppcEFyY2hpdmU7CgkJCQlpZiAoICR0aGlzLT5femlwLT5vcGVuKCAkemlwX2ZpbGUgKSA9PT0gdHJ1ZSApIHsKCQkJCQlpZiAoICggJHN0YXRzID0gJHRoaXMtPl96aXAtPnN0YXROYW1lKCAkbG9jYXRlX2ZpbGUgKSApID09PSBmYWxzZSApIHsgLy8gRmlsZSBub3QgZm91bmQgaW4gemlwLgoJCQkJCQkkdGhpcy0+X3ppcC0+Y2xvc2UoKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmlsZSBub3QgZm91bmQgKHppcGFyY2hpdmUpIGZvciBzdGF0cycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGxvY2F0ZV9maWxlICk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQkJJHRoaXMtPl96aXAtPmNsb3NlKCk7CgkJCQkJcmV0dXJuICRzdGF0czsKCQkJCX0gZWxzZSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnWmlwQXJjaGl2ZSBmYWlsZWQgdG8gb3BlbiBmaWxlIHRvIGNoZWNrIHN0YXRzIChsb29raW5nIGluICUxJHMpLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSApICk7CgkJCQkJCgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBtYWRlIGl0IHRoaXMgZmFyIHRoZW4gemlwYXJjaGl2ZSBub3QgYXZhaWxhYmxlL2ZhaWxlZC4KCQkJaWYgKCBpbl9hcnJheSggJ3BjbHppcCcsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCXJlcXVpcmVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJJHRoaXMtPl96aXAgPSBuZXcgUGNsWmlwKCAkemlwX2ZpbGUgKTsKCQkJCWlmICggKCAkZmlsZV9saXN0ID0gJHRoaXMtPl96aXAtPmxpc3RDb250ZW50KCkgKSA9PSAwICkgeyAvLyBJZiB6ZXJvLCB6aXAgaXMgY29ycnVwdCBvciBlbXB0eS4KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICR0aGlzLT5femlwLT5lcnJvckluZm8oIHRydWUgKSApOwoJCQkJfSBlbHNlIHsKCQkJCQlmb3JlYWNoKCAkZmlsZV9saXN0IGFzICRmaWxlICkgewoJCQkJCQlpZiAoICRmaWxlWydmaWxlbmFtZSddID09ICRsb2NhdGVfZmlsZSApIHsgLy8gRm91bmQgZmlsZS4KCQkJCQkJCXJldHVybiB0cnVlOwoJCQkJCQl9CgkJCQkJfQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZpbGUgbm90IGZvdW5kIChwY2x6aXApJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc6ICcgLiAkbG9jYXRlX2ZpbGUgKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdVbmFibGUgdG8gY2hlY2sgaWYgZmlsZSBleGlzdHM6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9CgkJCgkJCgkJCgkJLyoJZ2V0X3ppcF9tZXRob2RzKCkKCQkgKgkKCQkgKglHZXQgYW4gYXJyYXkgb2YgdGhlIHppcCBtZXRob2RzLiBVc2VmdWwgZm9yIHRyYW5zaWVudCBjYWNoaW5nIGZvciBjb25zdHJ1Y3Rvci4KCQkgKgkKCQkgKglAcmV0dXJuCQlhcnJheQkJQXJyYXkgb2YgbWV0aG9kcy4KCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3ppcF9tZXRob2RzKCkgewoJCQkkdGhpcy0+X3ppcF9tZXRob2RzOwoJCX0gLy8gRW5kIGdldF96aXBfbWV0aG9kcygpOwoJCQoJCQoJCQoJCS8qKgoJCSAqCWFkZF9kaXJlY3RvcnlfdG9femlwKCkKCQkgKgoJCSAqCUFkZHMgYSBkaXJlY3RvcnkgdG8gYSBuZXcgb3IgZXhpc3RpbmcgKFRPRE86IG5vdCB5ZXQgYXZhaWxhYmxlKSBaSVAgZmlsZS4KCQkgKgoJCSAqCSR6aXBfZmlsZQkJCQkJc3RyaW5nCQkJCQkJRnVsbCBwYXRoICYgZmlsZW5hbWUgb2YgWklQIGZpbGUgdG8gY3JlYXRlLgoJCSAqCSRhZGRfZGlyZWN0b3J5CQkJCXN0cmluZwkJCQkJCUZ1bGwgZGlyZWN0b3J5IHRvIGFkZCB0byB6aXAgZmlsZS4KCQkgKgkkY29tcHJlc3Npb24JCQkJYm9vbGVhbgkJCQkJCVRydWUgdG8gZW5hYmxlIFpJUCBjb21wcmVzc2lvbiwKCQkgKgkJCQkJCQkJCQkJCQkJCShpZiBwb3NzaWJsZSB3aXRoIGF2YWlsYWJsZSB6aXAgbWV0aG9kcykKCQkgKgkkZXhjbHVkZXMJCQkJCWFycmF5KHN0cmluZ3MpCQkJCUFycmF5IG9mIHN0cmluZ3Mgb2YgcGF0aHMvZmlsZXMgdG8gZXhjbHVkZSBmcm9tIHppcHBpbmcsCgkJICoJCQkJCQkJCQkJCQkJCQkoaWYgcG9zc2libGUgd2l0aCBhdmFpbGFibGUgemlwIG1ldGhvZHMpLgoJCSAqCSR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeQlzdHJpbmcJCQkJCQlPcHRpb25hbC4gRnVsbCBkaXJlY3RvcnkgcGF0aCB0byBkaXJlY3RvcnkgdG8gdGVtcG9yYXJpbHkgcGxhY2UgWklQCgkJICoJCQkJCQkJCQkJCQkJCQlmaWxlIHdoaWxlIGNyZWF0aW5nLiBVc2VzIHNhbWUgZGlyZWN0b3J5IGlmIG9taXR0ZWQuCgkJICoJJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZQlib29sZWFuCQkJCQkJVHJ1ZTogb25seSB1c2UgUENMWmlwLiBGYWxzZTogdHJ5IGV4ZWMgZmlyc3QgaWYgYXZhaWxhYmxlLAoJCSAqCQkJCQkJCQkJCQkJCQkJYW5kIGZhbGxiYWNrIHRvIGxlc3NlciBtZXRob2RzIGFzIHJlcXVpcmVkLgoJCSAqCgkJICoJQHJldHVybgkJCQkJCQkJCQkJCQl0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJZnVuY3Rpb24gYWRkX2RpcmVjdG9yeV90b196aXAoICR6aXBfZmlsZSwgJGFkZF9kaXJlY3RvcnksICRjb21wcmVzc2lvbiwgJGV4Y2x1ZGVzID0gYXJyYXkoKSwgJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ID0gJycsICRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUgPSBmYWxzZSApIHsKCQkJaWYgKCAkZm9yY2VfY29tcGF0aWJpbGl0eV9tb2RlID09PSB0cnVlICkgewoJCQkJJHppcF9tZXRob2RzID0gYXJyYXkoICdwY2x6aXAnICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgY29tcGF0aWJpbGl0eSBtb2RlIChQQ0xaaXApIGJhc2VkIG9uIHNldHRpbmdzLiBUaGlzIGlzIHNsb3dlciBhbmQgbGVzcyByZWxpYWJsZS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCX0gZWxzZSB7CgkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVXNpbmcgYWxsIGF2YWlsYWJsZSB6aXAgbWV0aG9kcyBpbiBwcmVmZXJyZWQgb3JkZXIuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQl9CgkJCQoJCQkkYXBwZW5kID0gZmFsc2U7IC8vIFBvc3NpYmxlIGZ1dHVyZSBvcHRpb24gdG8gYWxsb3cgYXBwZW5kaW5nIGlmIGZpbGUgZXhpc3RzLgoJCQkKCQkJLy8gTm9ybWFsaXplICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSB0byBmb3JtYXQ6IC94eHgveXl5L3p6ei8uCgkJCSR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSA9IHJ0cmltKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnksICcvXFwnICkgLiAnLyc7CgkJCQoJCQlpZiAoICFlbXB0eSggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7CgkJCQlpZiAoICFmaWxlX2V4aXN0cyggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7IC8vIENyZWF0ZSB0ZW1wIGRpciBpZiBpdCBkb2VzIG5vdCBleGlzdC4KCQkJCQlta2RpciggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICk7CgkJCQl9CgkJCX0KCQkJCgkJCWlmICggaXNfYXJyYXkoICRleGNsdWRlcyApICkgewoJCQkJJGV4Y2x1ZGVzX3RleHQgPSBpbXBsb2RlKCAnLCcsICRleGNsdWRlcyApOwoJCQl9IGVsc2UgewoJCQkJJGV4Y2x1ZGVzX3RleHQgPSAnKGluIGZpbGU6IGAnIC4gJGV4Y2x1ZGVzIC4gJ2ApJzsKCQkJfQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdDcmVhdGluZyBaSVAgZmlsZScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJHppcF9maWxlIC4gJ2AuICcgLiBfXygnQWRkaW5nIGRpcmVjdG9yeScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJGFkZF9kaXJlY3RvcnkgLiAnYC4gJyAuIF9fKCdDb21wcmVzc2lvbicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGNvbXByZXNzaW9uIC4gJzsgJyAuIF9fKCdFeGNsdWRlcycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGV4Y2x1ZGVzX3RleHQgKTsKCQkJdW5zZXQoICRleGNsdWRlc190ZXh0ICk7CgkJCQoJCQlpZiAoIGluX2FycmF5KCAnZXhlYycsICR6aXBfbWV0aG9kcyApICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVXNpbmcgZXhlYygpIG1ldGhvZCBmb3IgWklQLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJJGNvbW1hbmQgPSAnemlwIC1xIC1yJzsKCQkJCQoJCQkJaWYgKCAkY29tcHJlc3Npb24gIT09IHRydWUgKSB7CgkJCQkJJGNvbW1hbmQgLj0gJyAtMCc7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRXhlYyBjb21wcmVzc2lvbiBkaXNhYmxlZCBiYXNlZCBvbiBzZXR0aW5ncy4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQl9CgkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkemlwX2ZpbGUgKSApIHsKCQkJCQlpZiAoICRhcHBlbmQgPT09IHRydWUgKSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1pJUCBmaWxlIGV4aXN0cy4gQXBwZW5kaW5nIGJhc2VkIG9uIG9wdGlvbnMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQkkY29tbWFuZCAuPSAnIC1nJzsKCQkJCQl9IGVsc2UgewoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaSVAgZmlsZSBleGlzdHMuIERlbGV0aW5nICYgd3JpdGluZyBiYXNlZCBvbiBvcHRpb25zLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJdW5saW5rKCAkemlwX2ZpbGUgKTsKCQkJCQl9CgkJCQl9CgkJCQkKCQkJCS8vJGNvbW1hbmQgLj0gIiAtciI7CgkJCQkKCQkJCS8vIFNldCB0ZW1wb3JhcnkgZGlyZWN0b3J5IHRvIHN0b3JlIFpJUCB3aGlsZSBpdCdzIGJlaW5nIGdlbmVyYXRlZC4KCQkJCWlmICggIWVtcHR5KCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsKCQkJCQkkY29tbWFuZCAuPSAiIC1iICd7JHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5fSciOwoJCQkJfQoJCQkJCgkJCQkkY29tbWFuZCAuPSAiICd7JHppcF9maWxlfScgLiI7CgkJCQkvLyAtaSAnKiciOyAvLyBOb3QgbmVlZGVkLiBaaXAgZGVmYXVsdHMgdG8gZG9pbmcgdGhpcy4gUmVtb3ZlZCBKdWx5IDEwLCAyMDEyIGZvciB2My4wLjQxLgoJCQkJCgkJCQkJCQkJCgkJCQkvLyBIYW5kbGUgZXhjbHVzaW9ucyBieSBwbGFjaW5nIHRoZW0gaW4gYW4gZXhjbHVzaW9uIHRleHQgZmlsZS4KCQkJCSRleGNsdXNpb25fZmlsZSA9ICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSAuICdleGNsdXNpb25zLnR4dCc7CgkJCQkkdGhpcy0+X3JlbmRlcl9leGNsdXNpb25zX2ZpbGUoICRleGNsdXNpb25fZmlsZSwgJGV4Y2x1ZGVzLCAkYWRkX2RpcmVjdG9yeSApOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVXNpbmcgZXhjbHVzaW9uIGZpbGUgYCcgLiAkZXhjbHVzaW9uX2ZpbGUgLiAnYC4nICk7CgkJCQkkY29tbWFuZCAuPSAnIC14QCcgLiAiJ3skZXhjbHVzaW9uX2ZpbGV9JyI7CgkJCQkKCQkJCQoJCQkJJGNvbW1hbmQgLj0gJyAyPiYxJzsgLy8gIDI+JjEgcmVkaXJlY3RzIFNUREVSUiB0byBTVERPVVQKCQkJCQoJCQkJJHdvcmtpbmdfZGlyID0gZ2V0Y3dkKCk7CgkJCQljaGRpciggJGFkZF9kaXJlY3RvcnkgKTsgLy8gQ2hhbmdlIGRpcmVjdG9yeSB0byB0aGUgcGF0aCB3ZSBhcmUgYWRkaW5nLgoJCQkJCgkJCQlpZiAoICR0aGlzLT5fZXhlY3BhdGggIT0gJycgKSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ1VzaW5nIGN1c3RvbSBleGVjKCkgcGF0aDogJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkdGhpcy0+X2V4ZWNwYXRoICk7CgkJCQl9CgkJCQkKCQkJCS8vIFJ1biBaSVAgY29tbWFuZC4KCQkJCWlmICggc3RyaXN0ciggUEhQX09TLCAnV0lOJyApICYmICFzdHJpc3RyKCBQSFBfT1MsICdEQVJXSU4nICkgKSB7IC8vIFJ1bm5pbmcgV2luZG93cy4gKG5vdCBkYXJ3aW4pCgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd6aXAuZXhlJyApICkgewoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdBdHRlbXB0aW5nIHRvIHVzZSBwcm92aWRlZCBXaW5kb3dzIHppcC5leGUuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQkkY29tbWFuZCA9IHN0cl9yZXBsYWNlKCAnXCcnLCAnIicsICRjb21tYW5kICk7IC8vIFdpbmRvd3Mgd2FudHMgZG91YmxlIHF1b3RlcwoJCQkJCQkkY29tbWFuZCA9IEFCU1BBVEggLiAkY29tbWFuZDsKCQkJCQl9CgkJCQkJCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRXhlYyBjb21tYW5kIChXaW5kb3dzKScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGNvbW1hbmQgKTsKCQkJCQlsaXN0KCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSApID0gJHRoaXMtPl9jb21tYW5kYnVkZHktPmV4ZWN1dGUoICR0aGlzLT5fZXhlY3BhdGggLiAkY29tbWFuZCApOwoJCQkJfSBlbHNlIHsgLy8gQWxsb3cgZXhlYyB3YXJuaW5ncyBub3QgaW4gV2luZG93cwoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0V4ZWMgY29tbWFuZCAoTGludXgpJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc6ICcgLiAkY29tbWFuZCApOwoJCQkJCWxpc3QoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICkgPSAkdGhpcy0+X2NvbW1hbmRidWRkeS0+ZXhlY3V0ZSggJHRoaXMtPl9leGVjcGF0aCAuICRjb21tYW5kICk7CgkJCQl9CgkJCQkKCQkJCQoJCQkJLy8gQ2xlYW51cCBleGNsdXNpb25zIGZpbGUgaWYgaXQgZXhpc3RzLgoJCQkJaWYgKCBmaWxlX2V4aXN0cyggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5IC4gJ2V4Y2x1c2lvbnMudHh0JyApICkgewoJCQkJCUB1bmxpbmsoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSAuICdleGNsdXNpb25zLnR4dCcgKTsKCQkJCX0KCQkJCQoJCQkJCgkJCQlzbGVlcCggMSApOwoJCQkJCgkJCQkvLyBXZSBtYXkgbm90IGhhdmUgYSB6aXAgZmlsZSBvciB3ZSBtYXkgaGF2ZSBvbmUgYnV0IHRoZXJlIHdhcyBlcnJvci93YXJuaW5nIHdoZW4gcHJvZHVjaW5nIGl0CgkJCQkvLyBOb3RlOiBJbiBldmVudCBvZiB3YXJuaW5ncyB3ZSBjb3VsZCBzdGlsbCBnZXQgYSB6aXAgZmlsZSBpZiB0aGUgc2NyaXB0IHRlcm1pbmF0ZXMgd2hpbHN0IHppcCBjb21tYW5kIHN0aWxsIHJ1bm5pbmcKCQkJCQoJCQkJaWYgKCAoICEgZmlsZV9leGlzdHMoICR6aXBfZmlsZSApICkgfHwgKCAkZXhlY19leGl0X2NvZGUgIT0gMCApICkgewoJCQkJCQoJCQkJCS8vIExvZyB0aGUgZmFpbHVyZQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgX18oICdGdWxsIHNwZWVkIG1vZGUgZGlkIG5vdCBjb21wbGV0ZS4gVHJ5aW5nIGNvbXBhdGliaWxpdHkgbW9kZSBuZXh0LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkKCQkJCQkvLyBDaGVjayB3aGV0aGVyIGEgemlwIGZpbGUgd2FzIGFjdHVhbGx5IHByb2R1Y2VkIGluIHRoZSBiYWNrdXBzIGRpcmVjdG9yeSAoYXMgb3Bwb3NlZCB0byB0aGUgdGVtcCB6aXAgZGlyZWN0b3J5KQoJCQkJCWlmICggISBmaWxlX2V4aXN0cyggJHppcF9maWxlICkgKSB7CgkJCQkJCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oICdFeGVjIGNvbW1hbmQgcmFuIGJ1dCBaSVAgZmlsZSBkaWQgbm90IGV4aXN0LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJCS8vIFdlIGRpZCBnZXQgYSB6aXAgZmlsZSBidXQgY2Fubm90IHRydWVzdCBpdCBzbyBtdXN0IGRlbGV0ZSBpdAoJCQkJCWlmICggZmlsZV9leGlzdHMoICR6aXBfZmlsZSApICkgewoJCQkJCQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnQ2xlYW5pbmcgdXAgZGFtYWdlZCBaSVAgZmlsZS4gSXNzdWUgIzM0ODkzMjg5OTguJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQl1bmxpbmsoICR6aXBfZmlsZSApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQkJLy8gTmVlZCB0byBjbGVhbiB1cCBhbnkgdGVtcG9yYXJ5IHppcCBkaXJlY3RvcnkKCQkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsKCQkJCQkKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ0NsZWFuaW5nIHVwIGluY29tcGxldGUgdGVtcG9yYXJ5IFpJUCBmaWxlLiBJc3N1ZSAjMzQzODk0LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJaWYgKCAhKCAkdGhpcy0+ZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICkgKSB7CgkJCQkJCQoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ1VuYWJsZSB0byBkZWxldGUgdGVtcG9yYXJ5IHppcCBkaXJlY3RvcnknLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJCQoJCQkJCQl9CgkJCQkJCQoJCQkJCX0KCQkJCQkKCQkJCX0gZWxzZSB7CgkJCQkKCQkJCQkvLyBXZSBnb3QgYSB6aXAgZmlsZSBhbmQgbm8gZXJyb3JzL3dhcm5pbmdzIHNvIGdvb2QgdG8gZ28KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCAnRnVsbCBzcGVlZCBtb2RlIGNvbXBsZXRlZCAmIGdlbmVyYXRlZCBaSVAgZmlsZS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJaWYgKCAhKCAkdGhpcy0+ZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICkgKSB7CgkJCQkJCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oICdVbmFibGUgdG8gZGVsZXRlIHRlbXBvcmFyeSB6aXAgZGlyZWN0b3J5JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQoJCQkJCX0KCQkJCQkKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkKCQkJCX0KCQkJCQoJCQkJY2hkaXIoICR3b3JraW5nX2RpciApOwoJCQkJCgkJCQl1bnNldCggJGNvbW1hbmQgKTsKCQkJCXVuc2V0KCAkZXhjbHVkZSApOwoJCQkJdW5zZXQoICRleGNsdWRpbmdfYWRkaXRpb25hbCApOwoJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdFeGVjIGNvbW1hbmQgZGlkIG5vdCBzdWNjZWVkLiBGYWxsaW5nIGJhY2suJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCgkJCX0KCQkJCgkJCWlmICggaW5fYXJyYXkoICdwY2x6aXAnLCAkemlwX21ldGhvZHMgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgX18oJ1VzaW5nIENvbXBhdGliaWxpdHkgTW9kZSBmb3IgWklQLiBUaGlzIGlzIHNsb3dlciBhbmQgbGVzcyByZWxpYWJsZS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdJZiB5b3VyIGJhY2t1cCB0aW1lcyBvdXQgaW4gY29tcGF0aWJpbGl0eSBtb2RlIHRyeSBkaXNhYmxlZCB6aXAgY29tcHJlc3Npb24uJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnV0FSTklORzogRGlyZWN0b3J5L2ZpbGUgZXhjbHVzaW9uIHVuYXZhaWxhYmxlIGluIENvbXBhdGliaWxpdHkgTW9kZS4gRXZlbiBleGlzdGluZyBvbGQgYmFja3VwcyB3aWxsIGJlIGJhY2tlZCB1cC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkKCQkJCXJlcXVpcmVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJCgkJCQkvLyBEZXRlcm1pbmUgemlwIGZpbGUgbmFtZSAvIHBhdGguCgkJCQlpZiAoICFlbXB0eSggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7CgkJCQkJJHBjbHppcF9maWxlID0gJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5IC4gYmFzZW5hbWUoICR6aXBfZmlsZSApOwoJCQkJfSBlbHNlIHsKCQkJCQkkcGNsemlwX2ZpbGUgPSAkemlwX2ZpbGU7CgkJCQl9CgkJCQkKCQkJCWlmICggIWZpbGVfZXhpc3RzKCBkaXJuYW1lKCAkcGNsemlwX2ZpbGUgKSApICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NyZWF0aW5nIFBDTFppcCBmaWxlIGRpcmVjdG9yeSBgJyAuIGRpcm5hbWUoICRwY2x6aXBfZmlsZSApIC4gJ2AuJyApOwoJCQkJCW1rZGlyKCBkaXJuYW1lKCAkcGNsemlwX2ZpbGUgKSApOwoJCQkJfQoJCQkJCgkJCQkvLyBJbnN0YW50aWF0ZSBQY2xaaXAgT2JqZWN0LgoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUGNsWmlwIHppcCBmaWxlbmFtZTogYCcgLiAkcGNsemlwX2ZpbGUgLiAnYC4nICk7CgkJCQkkcGNsemlwID0gbmV3IFBjbFppcCggJHBjbHppcF9maWxlICk7CgkJCQkKCQkJCWlmICggJGNvbXByZXNzaW9uICE9PSB0cnVlICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1BDTFppcCBjb21wcmVzc2lvbiBkaXNhYmxlZCBiYXNlZCBvbiBzZXR0aW5ncy4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJJGFyZ3VtZW50cyA9IGFycmF5KCAkYWRkX2RpcmVjdG9yeSwgUENMWklQX09QVF9OT19DT01QUkVTU0lPTiwgUENMWklQX09QVF9SRU1PVkVfUEFUSCwgJGFkZF9kaXJlY3RvcnkgKTsKCQkJCX0gZWxzZSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnUENMWmlwIGNvbXByZXNzaW9uIGVuYWJsZWQgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCSRhcmd1bWVudHMgPSBhcnJheSggJGFkZF9kaXJlY3RvcnksIFBDTFpJUF9PUFRfUkVNT1ZFX1BBVEgsICRhZGRfZGlyZWN0b3J5ICk7CgkJCQl9CgkJCQkKCQkJCSRtb2RlID0gJ2NyZWF0ZSc7CgkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkemlwX2ZpbGUgKSAmJiAoICRhcHBlbmQgPT09IHRydWUgKSApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaSVAgZmlsZSBleGlzdHMuIEFwcGVuZGluZyBiYXNlZCBvbiBvcHRpb25zLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkkbW9kZSA9ICdhcHBlbmQnOwoJCQkJfQoJCQkJCgkJCQlpZiAoICRtb2RlID09ICdhcHBlbmQnICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0FwcGVuZGluZyB0byBaSVAgZmlsZSB2aWEgUENMWmlwLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkkcmV0dmFsID0gY2FsbF91c2VyX2Z1bmNfYXJyYXkoIGFycmF5KCAmJHBjbHppcCwgJ2FkZCcgKSwgJGFyZ3VtZW50cyApOwoJCQkJfSBlbHNlIHsgLy8gY3JlYXRlCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ0NyZWF0aW5nIFpJUCBmaWxlIHZpYSBQQ0xaaXAnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzonIC4gaW1wbG9kZSggJzsnLCAkYXJndW1lbnRzICkgKTsKCQkJCQkvL2Vycm9yX2xvZyggJ3BjbHppcCBhcmdzOiAnIC4gcHJpbnRfciggJGFyZ3VtZW50cywgdHJ1ZSApIC4gIlxuIiApOwoJCQkJCSRyZXR2YWwgPSBjYWxsX3VzZXJfZnVuY19hcnJheSggYXJyYXkoICYkcGNsemlwLCAnY3JlYXRlJyApLCAkYXJndW1lbnRzICk7CgkJCQl9CgkJCQkKCQkJCS8vIE1vdmUgdGhlIHppcCBmaWxlIGlmIHdlIHdlcmUgY3JlYXRpbmcgaXQgaW4gYSB0ZW1wb3JhcnkgZGlyZWN0b3J5CgkJCQlpZiAoICFlbXB0eSggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7CgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5IC4gYmFzZW5hbWUoICR6aXBfZmlsZSApICkgKSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1JlbmFtaW5nIFBDTFppcCBGaWxlLi4uJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQlyZW5hbWUoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSAuIGJhc2VuYW1lKCAkemlwX2ZpbGUgKSwgJHppcF9maWxlICk7CgkJCQkJCWlmICggZmlsZV9leGlzdHMoICR6aXBfZmlsZSApICkgewoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnUmVuYW1pbmcgUENMWmlwIHN1Y2Nlc3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnUmVuYW1pbmcgUENMWmlwIGZhaWx1cmUuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQl9CgkJCQkJfSBlbHNlIHsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVGVtcG9yYXJ5IFBDTFppcCBhcmNoaXZlIGZpbGUgZXhwZWN0ZWQgYnV0IG5vdCBmb3VuZC4gUGxlYXNlIHZlcmlmeSBwZXJtaXNzaW9ucyBvbiB0aGUgWklQIGFyY2hpdmUgZGlyZWN0b3J5LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQl9CgkJCQl9CgkJCQkKCQkJCS8vIFdvcmsgb3V0IHdoZXRoZXIgd2UgaGF2ZSBhIHByb2JsZW0gb3Igbm90CgkJCQlpZiAoIGlzX2FycmF5KCAkcmV0dmFsICkgKSB7CgkJCQkKCQkJCQkvLyBJdCdzIGFuIGFycmF5IHNvIGEgZ29vZCByZXN1bHQKCQkJCQkkZXhpdGNvZGUgPSAwOwoJCQkJCgkJCQl9IGVsc2UgewoJCQkJCgkJCQkJLy8gTm90IGFuIGFycmF5IHNvIGEgYmFkIGVycm9yIGNvZGUKCQkJCQkkZXhpdGNvZGUgPSAkcGNsemlwLT5lcnJvckNvZGUoKTsKCQkJCQoJCQkJfQoJCQkJCgkJCQkvLyBDb252ZW5pZW5jZSBmb3IgaGFuZGxpbmcgZGlmZmVyZW50IHNjYW5hcmlvcwoJCQkJJHJlc3VsdCA9IGZhbHNlOwoJCQkJCgkJCQkvLyBTZWUgaWYgd2UgY2FuIGZpZ3VyZSBvdXQgd2hhdCBoYXBwZW5lZCAtIG5vdGUgdGhhdCAkZXhpdGNvZGUgY291bGQgYmUgbm9uLXplcm8gZm9yIGEgd2FybmluZyBvciBlcnJvcgoJCQkJLy8gVGhlcmUgbWF5IGJlIG5vIHppcCBmaWxlIGF0IGFsbCBpZiB0aGVyZSB3YXMgYSBwcm9ibGVtIGNyZWF0aW5nIGl0IG9yIGl0IG1heSBiZSBsZWZ0IGluIHRoZSB0ZW1wCgkJCQkvLyBkaXJlY3RvcnkgaWYgaXQgY291bGRuJ3QgYmUgbW92ZWQKCQkJCWlmICggKCAhIGZpbGVfZXhpc3RzKCAkemlwX2ZpbGUgKSApIHx8ICggJGV4aXRjb2RlICE9IDAgKSApIHsKCQkJCQoJCQkJCS8vIElmIHdlIGhhZCBhIG5vbi16ZXJvIGV4aXQgY29kZSB0aGVuIHNob3VsZCByZXBvcnQgaXQgKGZpbGUgbWF5IG9yIG1heSBub3QgYmUgY3JlYXRlZCkKCQkJCQlpZiAoICRleGl0Y29kZSAhPSAwICkgewoJCQkJCQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaaXAgcHJvY2VzcyBleGl0IGNvZGU6ICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkZXhpdGNvZGUgKTsKCQkJCQkJCgkJCQkJfQoJCgkJCQkJLy8gUmVwb3J0IHdoZXRoZXIgb3Igbm90IHRoZSB6aXAgZmlsZSB3YXMgY3JlYXRlZAkJCQkKCQkJCQlpZiAoICEgZmlsZV9leGlzdHMoICR6aXBfZmlsZSApICkgewoJCQkJCQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnWmlwIEFyY2hpdmUgZmlsZSBub3QgY3JlYXRlZCAtIGNoZWNrIHByb2Nlc3MgZXhpdCBjb2RlLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkJCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oICdaaXAgQXJjaGl2ZSBmaWxlIGNyZWF0ZWQgYnV0IHdpbGwgYmUgcmVtb3ZlZCAtIGNoZWNrIHByb2Nlc3MgZXhpdCBjb2RlLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQoJCQkJCQlAdW5saW5rKCAkemlwX2ZpbGUgKTsKCQkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJCS8vIFB1dCB0aGUgZXJyb3IgaW5mb3JtYXRpb24gaW50byBhbiBhcnJheSBmb3IgY29uc2lzdGVuY3kKCQkJCQkkemlwX291dHB1dFtdID0gJHBjbHppcC0+ZXJyb3JJbmZvKCB0cnVlICk7CgkJCQkJCgkJCQkJLy8gTm93IHdlIGRvbid0IG1vdmUgaXQgKGJlY2F1c2UgZWl0aGVyIGl0IGRvZXNuJ3QgZXhpc3Qgb3IgbWF5IGJlIGluY29tcGxldGUpIGJ1dCB3ZSdsbCBzaG93IGFueSBlcnJvci93YXJ0bmluZyBvdXRwdXQKCQkJCQlpZiAoICFlbXB0eSggJHppcF9vdXRwdXQgKSApIHsKCQkJCQkKCQkJCQkJLy8gQXNzdW1lIHdlIGRvbid0IGhhdmUgYSBsb3Qgb2YgbGluZXMgZm9yIG5vdyAtIGNvdWxkIGJlIHJpc2t5IGFzc3VtcHRpb24hCgkJCQkJCWZvcmVhY2ggKCAkemlwX291dHB1dCBhcyAkbGluZSApIHsKCQkJCQkJCgkJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnWmlwIHByb2Nlc3MgcmVwb3J0ZWQ6ICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbGluZSApOwoJCQkJCQkKCQkJCQkJfQoJCQkJCQoJCQkJCQkvLyBFeHRyYSBkZXRhaWxzIGZvciBwYXJ0aWN1bGFyIGVycm9yCgkJCQkJCWlmICggZmFsc2UgIT09IHN0cnBvcyggJHBjbHppcC0+ZXJyb3JJbmZvKCB0cnVlICksICdQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMJyApICkgewoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ1BDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwgZGV0YWlsczogVGhpcyBlcnJvciBpbmRpY2F0ZXMgdGhhdCBmb3BlbiBmYWlsZWQgKHJldHVybmVkIGZhbHNlKSB3aGVuIHRyeWluZyB0byBvcGVuIHRoZSBmaWxlIGluIHRoZSBtb2RlIHNwZWNpZmllZC4gVGhpcyBpcyBhbG1vc3QgYWx3YXlzIGR1ZSB0byBwZXJtaXNzaW9ucy4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQl9CgkJCQkJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQkJLy8gT25lIHdheSBvciBhbm90aGVyIHdlIGZhaWxlZAoJCQkJCSRyZXN1bHQgPSBmYWxzZTsKCQkJCQkKCQkJCX0gZWxzZSB7CgkJCQkKCQkJCQkvLyBHb3QgZmlsZSB3aXRoIG5vIGVycm9yIG9yIHdhcm5pbmdzIGF0IGFsbCBzbyBpdCBzaG91bGQgYmUgZ29vZCB0byBnbwoJCQkJCQoJCQkJCWlmICggZmlsZV9leGlzdHMoICR6aXBfZmlsZSApICkgewoJCQkJCQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaaXAgQXJjaGl2ZSBmaWxlIG1vdmVkIHRvIGxvY2FsIGFyY2hpdmUgZGlyZWN0b3J5LicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXyggJ1ppcCBBcmNoaXZlIGZpbGUgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgd2l0aCBubyBlcnJvcnMgb3Igd2FybmluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQkkcmVzdWx0ID0gdHJ1ZTsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnWmlwIEFyY2hpdmUgZmlsZSBjb3VsZCBub3QgYmUgbW92ZWQgdG8gbG9jYWwgYXJjaGl2ZSBkaXJlY3RvcnkuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQkkcmVzdWx0ID0gZmFsc2U7CgkJCQkJCQoJCQkJCX0KCQkJCQkJCQkJCgkJCQl9CQkJCgkKCQkJCWlmICggIWVtcHR5KCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsKCQkJCQoJCQkJCS8vIENsZWFudXAgdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkgdGhhdCB3aWxsIGhhdmUgYWxsIGRldHJpdHVzIGFuZCBtYXliZSBpbmNvbXBsZXRlIHppcCBmaWxlCQkJCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnUmVtb3ZpbmcgdGVtcG9yYXJ5IGRpcmVjdG9yeS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJCgkJCQkJaWYgKCAhKCAkdGhpcy0+ZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICkgKSB7CgkJCQkJCgkJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdUZW1wb3JhcnkgZGlyZWN0b3J5IGNvdWxkIG5vdCBiZSBkZWxldGVkOiAnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICk7CgkJCQkJCgkJCQkJfQoJCQkJCgkJCQl9CgkJCQkKCQkJCWlmICggJHJlc3VsdCApIHJldHVybiAkcmVzdWx0OwoJCQkJCgkJCX0KCQkJCgkJCS8vIElmIHdlIG1hZGUgaXQgdGhpcyBmYXIgdGhlbiBzb21ldGhpbmcgZGlkbnQgcmVzdWx0IGluIGEgc3VjY2Vzcy4KCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkKCQkKCQkvKioKCQkgKgl1bnppcCgpCgkJICoKCQkgKglFeHRyYWN0cyB0aGUgY29udGVudHMgb2YgYSB6aXAgZmlsZSB0byB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeSB1c2luZyB0aGUgYmVzdCB1bnppcCBtZXRob2RzIHBvc3NpYmxlLgoJCSAqCgkJICoJJHppcF9maWxlCQkJCQlzdHJpbmcJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBmaWxlIHRvIGNyZWF0ZS4KCQkgKgkkZGVzdGluYXRpb25fZGlyZWN0b3J5CQlzdHJpbmcJCUZ1bGwgZGlyZWN0b3J5IHBhdGggdG8gZXh0cmFjdCBpbnRvLgoJCSAqCSRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUJbWl4ZWQJCWZhbHNlIChkZWZhdWx0KTogdXNlIGJlc3QgbWV0aG9kcyBhdmFpbGFibGUgKHppcCBleGVjIGZpcnN0KSwgZmFsbGluZyBiYWNrIGFzIG5lZWRlZC4KCQkgKgkJCQkJCQkJCQkJemlwYXJjaGl2ZTogZmlyc3QgZmFsbGJhY2sgbWV0aG9kLiAoTWVkaXVtIHBlcmZvcm1hbmNlKQoJCSAqCQkJCQkJCQkJCQlwY2x6aXA6IHNlY29uZCBmYWxsYmFjayBtZXRob2QuIChXb3JzdCBwZXJmb3JtYW5jZTsgYnVnZ3kpCgkJICoKCQkgKglAcmV0dXJuYGAJCQkJCQkJCXRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlCgkJICovCgkJZnVuY3Rpb24gdW56aXAoICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZSA9IGZhbHNlICkgewoJCQkKCQkJJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSA9IHJ0cmltKCAkZGVzdGluYXRpb25fZGlyZWN0b3J5LCAnXFwvJyApIC4gJy8nOyAvLyBNYWtlIHN1cmUgdHJhaWxpbmcgc2xhc2ggZXhpc3RzIHRvIG5vcm1hbGl6ZS4KCQkJCgkJCWlmICggJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZSA9PSAnemlwYXJjaGl2ZScgKSB7CgkJCQkkemlwX21ldGhvZHMgPSBhcnJheSggJ3ppcGFyY2hpdmUnICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgY29tcGF0aWJpbGl0eSBtb2RlIChaaXBBcmNoaXZlOyBtZWRpdW0gc3BlZWQpIGJhc2VkIG9uIHNldHRpbmdzLiBUaGlzIGlzIHNsb3dlciBhbmQgbGVzcyByZWxpYWJsZS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCX0gZWxzZWlmICggJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZSA9PSAncGNsemlwJyApIHsKCQkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCAncGNsemlwJyApOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnRm9yY2VkIGNvbXBhdGliaWxpdHkgbW9kZSAoUENMWmlwOyBzbG93IHNwZWVkKSBiYXNlZCBvbiBzZXR0aW5ncy4gVGhpcyBpcyBzbG93ZXIgYW5kIGxlc3MgcmVsaWFibGUuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQl9IGVsc2UgewoJCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPl96aXBfbWV0aG9kczsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1VzaW5nIGFsbCBhdmFpbGFibGUgemlwIG1ldGhvZHMgaW4gcHJlZmVycmVkIG9yZGVyLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJfQoJCQkKCQkJaWYgKCBpbl9hcnJheSggJ2V4ZWMnLCAkemlwX21ldGhvZHMgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgICdTdGFydGluZyBoaWdoc3BlZWQgZXh0cmFjdGlvbiAoZXhlYykuLi4gVGhpcyBtYXkgdGFrZSBhIG1vbWVudC4uLicgKTsKCQkJCQoJCQkJJGNvbW1hbmQgPSAndW56aXAgLXFvJzsgLy8gcSA9IHF1aWV0LCBvID0gb3ZlcndyaXRlIHdpdGhvdXQgcHJvbXB0LgoJCQkJJGNvbW1hbmQgLj0gIiAnJHppcF9maWxlJyAtZCAnJGRlc3RpbmF0aW9uX2RpcmVjdG9yeScgLXggJ2ltcG9ydGJ1ZGR5LnBocCciOyAvLyB4IGV4Y2x1ZGVzIGltcG9ydGJ1ZGR5IHNjcmlwdCB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIG5ld2VyIGltcG9ydGJ1ZGR5IG9uIGV4dHJhY3Qgc3RlcC4KCQkJCgkJCQkvLyBIYW5kbGUgd2luZG93cy4KCQkJCWlmICggc3RyaXN0ciggUEhQX09TLCAnV0lOJyApICYmICFzdHJpc3RyKCBQSFBfT1MsICdEQVJXSU4nICkgKSB7IC8vIFJ1bm5pbmcgV2luZG93cy4gKG5vdCBkYXJ3aW4pCgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd1bnppcC5leGUnICkgKSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgICdBdHRlbXB0aW5nIHRvIHVzZSBXaW5kb3dzIHVuemlwLmV4ZS4nICk7CgkJCQkJCSRjb21tYW5kID0gc3RyX3JlcGxhY2UoICdcJycsICciJywgJGNvbW1hbmQgKTsgLy8gV2luZG93cyB3YW50cyBkb3VibGUgcXVvdGVzCgkJCQkJCSRjb21tYW5kID0gQUJTUEFUSCAuICRjb21tYW5kOwoJCQkJCX0KCQkJCX0KCQkJCQoJCQkJJGNvbW1hbmQgLj0gJyAgMj4mMSc7IC8vIFJlZGlyZWN0IFNUREVSUiB0byBTVERPVVQuCgkJCQkKCQkJCWlmICggJHRoaXMtPl9leGVjcGF0aCAhPSAnJyApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnVXNpbmcgY3VzdG9tIGV4ZWMoKSBwYXRoOiAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICR0aGlzLT5fZXhlY3BhdGggKTsKCQkJCX0KCQkJCQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUnVubmluZyBaSVAgY29tbWFuZC4gVGhpcyBtYXkgdGFrZSBhIG1vbWVudC4nICk7CgkJCQlsaXN0KCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSApID0gJHRoaXMtPl9jb21tYW5kYnVkZHktPmV4ZWN1dGUoICR0aGlzLT5fZXhlY3BhdGggLiAkY29tbWFuZCApOwoJCQkJCgkJCQkkZmFpbGVkID0gZmFsc2U7IC8vIERlZmF1bHQuCgkJCQkKCQkJCWlmICggIWZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb25fZGlyZWN0b3J5IC4gJ3dwLWxvZ2luLnBocCcgKSAmJiAhZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgLiAnZGJfMS5zcWwnICkgJiYgIWZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb25fZGlyZWN0b3J5IC4gJ3dvcmRwcmVzcy93cC1sb2dpbi5waHAnICkgKSB7IC8vIHdwLWxvZ2luLnBocCBmb3IgV29yZFByZXNzLCBkYl8xLnNxbCBmb3IgREIgYmFja3VwLCB3b3JkcHJlc3Mvd3AtbG9naW4ucGhwIGZvciBmcmVzaCBXb3JkUHJlc3MgZG93bmxvYWRlZCBmcm9tIHdwLm9yZyBmb3IgTVMgZXhwb3J0CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0JvdGggd3AtbG9naW4ucGhwIChmdWxsIGJhY2t1cHMpIGFuZCBkYl8xLnNxbCAoZGF0YWJhc2Ugb25seSBiYWNrdXBzKSBhcmUgbWlzc2luZyBhZnRlciBleHRyYWN0aW9uLiBVbnppcCBwcm9jZXNzIGFwcGVhcnMgdG8gaGF2ZSBmYWlsZWQuJyApOwoJCQkJCSRmYWlsZWQgPSB0cnVlOwoJCQkJfQoJCQkJCgkJCQlpZiAoICRleGVjX2V4aXRfY29kZSAhPSAnMCcgKSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgICdFeGl0IGNvZGUgYCcgLiAkZXhlY19leGl0X2NvZGUgLiAnYCBpbmRpY2F0ZXMgYSBwcm9ibGVtIHdhcyBlbmNvdW50ZXJlZC4nICk7CgkJCQkJJGZhaWxlZCA9IHRydWU7CgkJCQl9CgkJCQkKCQkJCS8vIFNvbWV0aW1lcyBleGVjIHJldHVybnMgc3VjY2VzcyBjb2RlcyBidXQgbmV2ZXIgZXh0cmFjdGVkIGFjdHVhbCBmaWxlcy4gRG8gYSBjaGVjayB0byBtYWtlIHN1cmUga25vd24gZmlsZXMgd2VyZSBleHRyYWN0ZWQgdG8gdmVyaWZ5IGFnYWluc3QgdGhhdC4KCQkJCWlmICggJGZhaWxlZCA9PT0gZmFsc2UgKSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnRmlsZSBleHRyYWN0aW9uIGNvbXBsZXRlLicgKTsKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0gZWxzZSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAgJ0ZhbGxpbmcgYmFjayB0byBuZXh0IGNvbXBhdGliaWxpdHkgbW9kZS4nICk7CgkJCQl9CgkJCX0KCQkJCgkJCWlmICggaW5fYXJyYXkoICd6aXBhcmNoaXZlJywgJHppcF9tZXRob2RzICkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICAnU3RhcnRpbmcgbWVkaXVtIHNwZWVkIGV4dHJhY3Rpb24gKHppcGFyY2hpdmUpLi4uIFRoaXMgbWF5IHRha2UgYSBtb21lbnQuLi4nICk7CgkJCQkKCQkJCSR6aXAgPSBuZXcgWmlwQXJjaGl2ZTsKCQkJCWlmICggJHppcC0+b3BlbiggJHppcF9maWxlICkgPT09IHRydWUgKSB7CgkJCQkJaWYgKCB0cnVlID09PSAkemlwLT5leHRyYWN0VG8oICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSApIHsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAgJ1ppcEFyY2hpdmUgZXh0cmFjdGlvbiBzdWNjZXNzLicgKTsKCQkJCQkJJHppcC0+Y2xvc2UoKTsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJHppcC0+Y2xvc2UoKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAgJ0Vycm9yOiBaaXBBcmNoaXZlIHdhcyBhdmFpbGFibGUgYnV0IGZhaWxlZCBleHRyYWN0aW5nIGZpbGVzLiAgRmFsbGluZyBiYWNrIHRvIG5leHQgY29tcGF0aWJpbGl0eSBtb2RlLicgKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgICdFcnJvcjogVW5hYmxlIHRvIG9wZW4gemlwIGZpbGUgdmlhIFppcEFyY2hpdmUuIEZhbGxpbmcgYmFjayB0byBuZXh0IGNvbXBhdGliaWxpdHkgbW9kZS4nICk7CgkJCQl9CgkJCX0KCQkJCgkJCWlmICggaW5fYXJyYXkoICdwY2x6aXAnLCAkemlwX21ldGhvZHMgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgICdTdGFydGluZyBsb3cgc3BlZWQgZXh0cmFjdGlvbiAocGNsemlwKS4uLiBUaGlzIG1heSB0YWtlIGEgbW9tZW50Li4uJyApOwoJCQkJCgkJCQlpZiAoICFjbGFzc19leGlzdHMoICdQY2xaaXAnICkgKSB7CgkJCQkJJHBjbHppcF9maWxlID0gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9wY2x6aXAvcGNsemlwLnBocCc7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUENMWmlwIGNsYXNzIG5vdCBmb3VuZC4gQXR0ZW1wdGluZyB0byBsb2FkIGZyb20gYCcgLiAkcGNsemlwX2ZpbGUgLiAnYC4nICk7CgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggJHBjbHppcF9maWxlICkgKSB7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0xvYWRpbmcgYCcgLiAkcGNsemlwX2ZpbGUgLiAnYC4nICk7CgkJCQkJCXJlcXVpcmVfb25jZSggJHBjbHppcF9maWxlICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUENMWmlwIGZpbGUgbm90IGZvdW5kOiBgJyAuICRwY2x6aXBfZmlsZSAuICdgLicgKTsKCQkJCQl9CgkJCQl9CgkJCQkKCQkJCSRhcmNoaXZlID0gbmV3IFBjbFppcCggJHppcF9maWxlICk7CgkJCQkkcmVzdWx0ID0gJGFyY2hpdmUtPmV4dHJhY3QoKTsgLy8gRXh0cmFjdCB0byBjdXJyZW50IGRpcmVjdG9yeS4gRXhwbGljaXR5IHVzaW5nIFBDTFpJUF9PUFRfUEFUSCByZXN1bHRzIGluIGV4dHJhY3Rpb24gdG8gYSBQQ0xaSVBfT1BUX1BBVEggc3ViZm9sZGVyLgoJCQkJCgkJCQlpZiAoIDAgPT0gJHJlc3VsdCApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICAnUENMWmlwIEZhaWx1cmU6ICcgLiAkYXJjaGl2ZS0+ZXJyb3JJbmZvKCB0cnVlICkgKTsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICAnTG93IHNwZWVkIChQQ0xaaXApIGV4dHJhY3Rpb24gZmFpbGVkLicsICRhcmNoaXZlLT5lcnJvckluZm8oIHRydWUgKSApOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0KCQkJfQoJCQkKCQkJLy8gTm90aGluZyBzdWNjZWVkZWQgaWYgd2UgbWFkZSBpdCB0aGlzIGZhci4uLgoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCQoJCQoJCS8vIFRlc3QgYXZhaWxhYmlsaXR5IG9mIFppcEFyY2hpdmUgYW5kIHRoYXQgaXQgYWN0dWFsbHkgd29ya3MuCgkJZnVuY3Rpb24gdGVzdF96aXBhcmNoaXZlKCkgewoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ1ppcEFyY2hpdmUnICkgKSB7CgkJCQkkdGVzdF9maWxlID0gJHRoaXMtPl90ZW1wZGlyIC4gJ3RlbXBfdGVzdF8nIC4gdW5pcWlkKCkgLiAnLnppcCc7CgkJCQkKCQkJCSR6aXAgPSBuZXcgWmlwQXJjaGl2ZTsKCQkJCWlmICggJHppcC0+b3BlbiggJHRlc3RfZmlsZSwgWklQQVJDSElWRTo6Q1JFQVRFIHwgWklQQVJDSElWRTo6T1ZFUldSSVRFICkgPT09IHRydWUgKSB7CgkJCQkJJHppcC0+YWRkRmlsZSggX19GSUxFX18sICd0aGlzX2lzX2FfdGVzdC50eHQnKTsKCQkJCQkkemlwLT5jbG9zZSgpOwoJCQkJCWlmICggZmlsZV9leGlzdHMoICR0ZXN0X2ZpbGUgKSApIHsKCQkJCQkJdW5saW5rKCAkdGVzdF9maWxlICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1ppcEFyY2hpdmUgdGVzdCBwYXNzZWQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQl9IGVsc2UgewoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaaXBBcmNoaXZlIHRlc3QgZmFpbGVkOiBaaXAgZmlsZSBub3QgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdaaXBBcmNoaXZlIHRlc3QgRkFJTEVEOiBVbmFibGUgdG8gY3JlYXRlL29wZW4gemlwIGZpbGUuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfQoJCX0KCQkKCQkKCQkKCQkvKglnZXRfZmlsZV9saXN0KCkKCQkgKgkKCQkgKglHZXQgYW4gYXJyYXkgb2YgYWxsIGZpbGVzIGluIGEgemlwIGZpbGUuCgkJICoJCgkJICoJQHBhcmFtCQkKCQkgKglAcmV0dXJuCQlhcnJheQkKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2ZpbGVfbGlzdCggJHppcF9maWxlICkgewoJCQoJCQkkZmlsZV9saXN0ID0gYXJyYXkoKTsKCQkJCgkJCS8vIFVzZSBaaXBBcmNoaXZlIGlmIGF2YWlsYWJsZQoJCQlpZiAoIGluX2FycmF5KCAnemlwYXJjaGl2ZScsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCgkJCQkvLyBNYWtlIGRvdWJseSBzdXJlIGl0IGlzIGF2YWlsYWJsZQoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdaaXBBcmNoaXZlJywgZmFsc2UpICkgewoJCQkJCgkJCQkJJHphID0gbmV3IFppcEFyY2hpdmUoKTsKCQkJCQkkcmVzdWx0ID0gJHphLT5vcGVuKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgd2Ugb3BlbmVkIHRoZSB6aXAgb2sgYW5kIGl0IGhhcyBjb250ZW50CgkJCQkJaWYgKCAkcmVzdWx0ID09PSB0cnVlICkgewoJCQkJCQoJCQkJCQlpZiAoICggJGZpbGVfY291bnQgPSAkemEtPm51bUZpbGVzICkgPiAwICkgewoJCQkJCQoJCQkJCQkJLy8gR2V0IGVhY2ggZmlsZSBpbiBzZXF1ZW5jZSBieSBpbmRleCBhbmQgZ2V0IHRoZSBwcm9wZXJ0aWVzCgkJCQkJCQlmb3IoICRpID0gMDsgJGkgPCAkZmlsZV9jb3VudDsgJGkrKyApewoJCQkJCQkJCgkJCQkJCQkJJHN0YXQgPSAkemEtPnN0YXRJbmRleCggJGkgKTsKCQkJCQkJCQkKCQkJCQkJCQkvLyBBc3N1bWUgYWxsIHRoZXNlIGtleXMgZG8gZXhpc3QgKGNvbnNpZGVyIHRlc3RpbmcpCgkJCQkJCQkJJGZpbGVfbGlzdFtdID0gYXJyYXkoCgkJCQkJCQkJCSRzdGF0WyduYW1lJ10sCgkJCQkJCQkJCSRzdGF0WydzaXplJ10sCgkJCQkJCQkJCSRzdGF0Wydjb21wX3NpemUnXSwKCQkJCQkJCQkJJHN0YXRbJ210aW1lJ10sCgkJCQkJCQkJKTsKCQkJCQkJCQkKCQkJCQkJCX0KCQkJCQkJCQoJCQkJCQl9CgkJCQkJCQoJCQkJCQkkemEtPmNsb3NlKCk7CgkJCQkJCQoJCQkJCQlyZXR1cm4gJGZpbGVfbGlzdDsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gQ291bGRuJ3Qgb3BlbiBhcmNoaXZlIC0gZHJvcCB0aHJvdWdoIGFzIG1heWJlIG90aGVyIG1ldGhvZCB3aWxsIHN1Y2NlZWQ/CgkJCQkJCSRlcnJvcl9zdHJpbmcgPSAkdGhpcy0+emlwYXJjaGl2ZV9lcnJvcl9pbmZvKCAkcmVzdWx0ICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1ppcEFyY2hpdmUgZmFpbGVkIHRvIG9wZW4gZmlsZSB0byBsaXN0IGNvbnRlbnQgaW4gZmlsZSAlMSRzIC0gRXJyb3IgSW5mbzogJTIkcy4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRlcnJvcl9zdHJpbmcgKSApOwoJCQkJCQoJCQkJCX0KCQkJCQoJCQkJfSBlbHNlIHsKCQkJCQoJCQkJCS8vIFNvbWV0aGluZyBmaXNoeSAtIHRoZSBtZXRob2RzIGluZGljYXRlZCB6aXBhcmNoaXZlIGJ1dCB3ZSBjb3VsZG4ndCBmaW5kIHRoZSBjbGFzcwoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ3ppcGFyY2hpdmUgaW5kaWNhdGVkIGFzIGF2YWlsYWJsZSBtZXRob2QgYnV0IFppcEFyY2hpdmUgY2xhc3Mgbm9uLWV4aXN0ZW50JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJLy8gRHJvcHBlZCB0aHJvdWdoIGJlY2F1c2UgWmlwQXJjaGl2ZSBub3QgYXZhaWxhYmxlIG9yIGZhaWxlZCB0byBvcGVuIGZpbGUKCQkJaWYgKCBpbl9hcnJheSggJ3BjbHppcCcsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCgkJCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBpdAoJCQkJaWYgKCAhY2xhc3NfZXhpc3RzKCAnUGNsWmlwJywgZmFsc2UgKSApIHsKCQkJCQoJCQkJCS8vIEl0J3Mgbm90IGFscmVhZHkgbG9hZGVkIHNvIHRyeSBhbmQgZmluZC9sb2FkIGl0IGZyb20gcG9zc2libGUgbG9jYXRpb25zCgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApICkgewoJCQkJCQoJCQkJCQkvLyBSdW5uaW5nIHVuZGVyIFdvcmRQcmVzcwoJCQkJCQlAaW5jbHVkZV9vbmNlKCBBQlNQQVRIIC4gJ3dwLWFkbWluL2luY2x1ZGVzL2NsYXNzLXBjbHppcC5waHAnICk7CgkJCQkJCQoJCQkJCX0gZWxzZWlmICggZmlsZV9leGlzdHMoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvcGNsemlwL3BjbHppcC5waHAnICkgKSB7CgkJCQkJCgkJCQkJCS8vIFJ1bm5pbmcgU3RhbmRhbG9uZSAoaW1wb3J0YnVkZHkpCgkJCQkJCUBpbmNsdWRlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvcGNsemlwL3BjbHppcC5waHAnICk7CgkJCQkJCQoJCQkJCX0KCQkJCQkKCQkJCX0KCQkJCQoJCQkJLy8gTWFrZSBzdXJlIHdlIGRpZCBsb2FkIGl0CgkJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ1BjbFppcCcsIGZhbHNlICkgKSB7CgkJCQkKCQkJCQkkemEgPSBuZXcgUGNsWmlwKCAkemlwX2ZpbGUgKTsKCQkJCQkKCQkJCQkvLyBNYWtlIHN1cmUgd2Ugb3BlbmVkIHRoZSB6aXAgb2sgYW5kIGl0IGhhcyBjb250ZW50CgkJCQkJaWYgKCAoICRjb250ZW50X2xpc3QgPSAkemEtPmxpc3RDb250ZW50KCkgKSAhPT0gMCApIHsKCQkJCQkKCQkJCQkJJGZpbGVfY291bnQgPSBzaXplb2YoICRjb250ZW50X2xpc3QgKTsKCQkJCQkJCgkJCQkJCS8vIEdldCBlYWNoIGZpbGUgaW4gc2VxdWVuY2UgYnkgaW5kZXggYW5kIGdldCB0aGUgcHJvcGVydGllcwoJCQkJCQlmb3IgKCAkaSA9IDA7ICRpIDwgJGZpbGVfY291bnQ7ICRpKysgKSB7CgkJCQkJCQoJCQkJCQkJJHN0YXQgPSAkY29udGVudF9saXN0WyAkaSBdOwoJCQkJCQkJCgkJCQkJCQkvLyBBc3N1bWUgYWxsIHRoZXNlIGtleXMgZG8gZXhpc3QgKGNvbnNpZGVyIHRlc3RpbmcpCgkJCQkJCQkkZmlsZV9saXN0W10gPSBhcnJheSgKCQkJCQkJCQkkc3RhdFsgJ2ZpbGVuYW1lJyBdLAoJCQkJCQkJCSRzdGF0WyAnc2l6ZScgXSwKCQkJCQkJCQkkc3RhdFsgJ2NvbXByZXNzZWRfc2l6ZScgXSwKCQkJCQkJCQkkc3RhdFsgJ210aW1lJyBdCgkJCQkJCQkpOwoJCQkJCQkJCgkJCQkJCX0KCQkJCQkJCgkJCQkJCXJldHVybiAkZmlsZV9saXN0OwoKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBDb3VsZG4ndCBvcGVuIGFyY2hpdmUgLSBkcm9wIHRocm91Z2ggYXMgbWF5YmUgb3RoZXIgbWV0aG9kIHdpbGwgc3VjY2VlZD8KCQkJCQkJJGVycm9yX3N0cmluZyA9ICR6YS0+ZXJyb3JJbmZvKCB0cnVlICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1BjbFppcCBmYWlsZWQgdG8gb3BlbiBmaWxlIHRvIGxpc3QgY29udGVudCBpbiBmaWxlICUxJHMgLSBFcnJvciBJbmZvOiAlMiRzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGVycm9yX3N0cmluZyApICk7CgkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJfSBlbHNlIHsKCQkJCQoJCQkJCS8vIFNvbWV0aGluZyBmaXNoeSAtIHRoZSBtZXRob2RzIGluZGljYXRlZCBwY2x6aXAgYnV0IHdlIGNvdWxkbid0IGZpbmQgdGhlIGNsYXNzCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygncGNsemlwIGluZGljYXRlZCBhcyBhdmFpbGFibGUgbWV0aG9kIGJ1dCBjbGFzcyBQY2xaaXAgbm9uLWV4aXN0ZW50JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCgkJCQl9CgkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBubyBtZXRob2QgdG8gbGlzdCBiYWNrdXAgY29udGVudCB3YXMgYXZhaWxhYmxlIG9yIHdvcmtlZAoJCQlyZXR1cm4gZmFsc2U7CgkJCQoJCX0gLy8gRW5kIGdldF9maWxlX2xpc3QoKS4KCQkKCQkKCQkJCQkJCQkKCQkvKglhdmFpbGFibGVfemlwX21ldGhvZHMoKQoJCSAqCQoJCSAqCVRlc3QgYXZhaWxhYmlsaXR5IG9mIHppcCBtZXRob2RzIHRvIGRldGVybWluZSB3aGljaCBleGlzdCBhbmQgYWN0dWFsbHkgd29yay4KCQkgKglEZXRlY3RzIHRoZSBhdmFpbGFibGUgemlwcGluZyBtZXRob2RzIG9uIHRoaXMgc2VydmVyLiBUZXN0cyBjb21tYW5kIGxpbmUgemlwIHZpYSBleGVjKCksIFBIUCdzIFppcEFyY2hpdmUsIG9yIGVtdWxhdGVkIHppcCB2aWEgdGhlIFBIUCBQQ0xaaXAgbGlicmFyeS4KCQkgKglUT0RPOiBBY3R1YWxseSB0ZXN0IHVuemlwcGluZyBpbiB1bnppcCBtb2RlIG5vdCBqdXN0IHppcHBpbmcgYW5kIGFzc3VtaW5nIHRoZSBvdGhlciB3aWxsIHdvcmsKCQkgKgkKCQkgKglAcGFyYW0JCWJvb2xlYW4JCSRyZXR1cm5fYmVzdAkKCQkgKglAcGFyYW0JCXN0cmluZwkJJG1vZGUJCQlQb3NzaWJsZSB2YWx1ZXM6IHppcCwgdW56aXAKCQkgKglAcmV0dXJuCQlhcnJheQkJCQkJCVBvc3NpYmxlIHJldHVybiB2YWx1ZXM6IGV4ZWMsIHppcGFyY2hpdmUsIHBjbHppcAoJCSAqLwoJCWZ1bmN0aW9uIGF2YWlsYWJsZV96aXBfbWV0aG9kcyggJHJldHVybl9iZXN0ID0gdHJ1ZSwgJG1vZGUgPSAnemlwJyApIHsKCQkJJHJldHVybiA9IGFycmF5KCk7CgkJCSR0ZXN0X2ZpbGUgPSAkdGhpcy0+X3RlbXBkaXIgLiAndGVtcF8nIC4gdW5pcWlkKCkgLiAnLnppcCc7CgkJCQoJCQkvLyBUZXN0IGNvbW1hbmQtbGluZSBaSVAuCgkJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnZXhlYycgKSApIHsKCQkJCSRjb21tYW5kID0gJ3ppcCc7CgkJCQkkcnVuX2V4ZWNfemlwX3Rlc3QgPSB0cnVlOwoJCQkJCgkJCQkvLyBIYW5kbGUgd2luZG93cy4KCQkJCWlmICggc3RyaXN0ciggUEhQX09TLCAnV0lOJyApICYmICFzdHJpc3RyKCBQSFBfT1MsICdEQVJXSU4nICkgKSB7IC8vIFJ1bm5pbmcgV2luZG93cy4gKG5vdCBkYXJ3aW4pCgkJCQkJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd6aXAuZXhlJyApICkgewoJCQkJCQkkY29tbWFuZCA9IEFCU1BBVEggLiAkY29tbWFuZDsKCQkJCQl9CgkJCQkJLy8gSWYgdW56aXAgbW9kZSBhbmQgdW56aXAuZXhlIGlzIGZvdW5kIHRoZW4gYXNzdW1lIHdlIGhhdmUgdGhhdCBvcHRpb24gZm9yIHVuemlwcGluZyBzaW5jZSB3ZSBhcmVudCBhY3R1YWxseSB0ZXN0aW5nIHVuemlwLgoJCQkJCWlmICggJG1vZGUgPT0gJ3VuemlwJyApIHsKCQkJCQkJJHJ1bl9leGVjX3ppcF90ZXN0ID0gZmFsc2U7CgkJCQkJCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAndW56aXAuZXhlJyApICkgewoJCQkJCQkJYXJyYXlfcHVzaCggJHJldHVybiwgJ2V4ZWMnICk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJCgkJCQkJJGV4ZWNfcGF0aHMgPSBhcnJheSggJycgKTsKCQkJCX0gZWxzZSB7IC8vICpOSVggc3lzdGVtLgoJCQkJCSRleGVjX3BhdGhzID0gYXJyYXkoICcnLCAnL3Vzci9iaW4vJywgJy91c3IvbG9jYWwvYmluLycsICcvdXNyL2xvY2FsL3NiaW4vJywgJy91c3Ivc2Jpbi8nLCAnL3NiaW4vJywgJy9iaW4vJyApOyAvLyBJbmNsdWRlIHByZWNlZWRpbmcgJiB0cmFpbGluZyBzbGFzaC4KCQkJCX0KCQkJCQoJCQkJaWYgKCAkcnVuX2V4ZWNfemlwX3Rlc3QgPT09IHRydWUgKSB7CgkJCQkJLy8gUG9zc2libGUgbG9jYXRpb25zIHRvIGZpbmQgdGhlIFpJUCBleGVjdXRhYmxlLiBTdGFydCB3aXRoIGEgYmxhbmsgc3RyaW5nIHRvIGF0dGVtcHQgdG8gcnVuIGluIGN1cnJlbnQgZGlyZWN0b3J5LgoJCQkJCQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1RyeWluZyBleGVjKCkgaW4gdGhlIGZvbGxvd2luZyBwYXRoczogYCcgLiBpbXBsb2RlKCAnLCcsICRleGVjX3BhdGhzICkgLiAnYCcgKTsKCQkJCQkKCQkJCQkkZXhlY19jb21wbGV0aW9uID0gZmFsc2U7IC8vIGRlZmF1bHQgc3RhdGUuCgkJCQkJd2hpbGUoICRleGVjX2NvbXBsZXRpb24gPT09IGZhbHNlICkgeyAvLyBDaGVjayBhbGwgcG9zc2libGUgemlwIHBhdGggbG9jYXRpb25zIHN0YXJ0aW5nIHdpdGggY3VycmVudCBkaXIuIFVzdWFsbHkgdGhlIHBhdGggaXMgc2V0IHRvIG1ha2UgdGhpcyB3b3JrIHdpdGhvdXQgaHVudGluZy4KCQkJCQkJaWYgKCBlbXB0eSggJGV4ZWNfcGF0aHMgKSApIHsKCQkJCQkJCSRleGVjX2NvbXBsZXRpb24gPSB0cnVlOwoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgX18oICdFeGhhdXN0ZWQgYWxsIGtub3duIGV4ZWMoKSBwYXRoIHBvc3NpYmlsaXRpZXMgd2l0aCBubyBzdWNjZXNzLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCQkkcGF0aCA9IGFycmF5X3NoaWZ0KCAkZXhlY19wYXRocyApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnVHJ5aW5nIGV4ZWMoKSBaSVAgcGF0aDonLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICcgYCcgLiAkcGF0aCAuICdgLicgKTsKCQkJCQkJCgkJCQkJCSRleGVjX2NvbW1hbmQgPSAkcGF0aCAuICRjb21tYW5kIC4gJyAiJyAuICR0ZXN0X2ZpbGUgLiAnIiAiJyAuIF9fRklMRV9fIC4gJyIgIDI+JjEnOyAvLyAgMj4mMSB0byByZWRpcmVjdCBTVFJFUlIgdG8gU1RET1VULgoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdaaXAgdGVzdCBleGVjKCkgY29tbWFuZDogYCcgLiAkZXhlY19jb21tYW5kIC4gJ2AnICk7CgkJCQkJCWxpc3QoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICkgPSAkdGhpcy0+X2NvbW1hbmRidWRkeS0+ZXhlY3V0ZSggJGV4ZWNfY29tbWFuZCApOwoJCQkJCQkKCQkJCQkJaWYgKCAoICFmaWxlX2V4aXN0cyggJHRlc3RfZmlsZSApICkgfHwgKCAkZXhlY19leGl0X2NvZGUgPT0gJy0xJyApICkgeyAvLyBGaWxlIG5vdCBtYWRlIG9yIGVycm9yIHJldHVybmVkLgoJCQkJCQkJJGV4ZWNfY29tcGxldGlvbiA9IGZhbHNlOwoJCQkJCQkJCgkJCQkJCQlpZiAoICRleGVjX2V4aXRfY29kZSA9PSAnLTEnICkgewoJCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oICdFeGVjIGNvbW1hbmQgcmV0dXJuZWQgLTEuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJCX0KCQkJCQkJCWlmICggIWZpbGVfZXhpc3RzKCAkdGVzdF9maWxlICkgKSB7CgkJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ0V4ZWMgY29tbWFuZCByYW4gYnV0IFpJUCBmaWxlIGRpZCBub3QgZXhpc3QuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJCX0KCQkJCQkJCWlmICggZmlsZV9leGlzdHMoICR0ZXN0X2ZpbGUgKSApIHsgLy8gSWYgZmlsZSB3YXMgc29tZWhvdyBjcmVhdGVkLCBkbyBjbGVhbnVwIG9uIGl0LgoJCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oICdDbGVhbmluZyB1cCBkYW1hZ2VkIFpJUCBmaWxlLiBJc3N1ZSAjMzQ4OTMyODk5OC4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQkJCXVubGluayggJHRlc3RfZmlsZSApOwoJCQkJCQkJfQoJCQkJCQl9IGVsc2UgeyAvLyBTdWNjZXNzLgoJCQkJCQkJJGV4ZWNfY29tcGxldGlvbiA9IHRydWU7CgkJCQkJCQkKCQkJCQkJCWlmICggIXVubGluayggJHRlc3RfZmlsZSApICkgewoJCQkJCQkJCWVjaG8gc3ByaW50ZiggX18oICdFcnJvciAjNTY0NjM0LiBVbmFibGUgdG8gZGVsZXRlIHRlc3QgZmlsZSAoJXMpIScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkdGVzdF9maWxlICk7CgkJCQkJCQl9CgkJCQkJCQlhcnJheV9wdXNoKCAkcmV0dXJuLCAnZXhlYycgKTsKCQkJCQkJCSR0aGlzLT5fZXhlY3BhdGggPSAkcGF0aDsKCQkJCQkJCQoJCQkJCQkJYnJlYWs7CgkJCQkJCX0KCQkJCQl9IC8vIGVuZCB3aGlsZQoJCQkJfSAvLyBFbmQgJHJ1bl9leGVjX3Rlc3QgPT09IHRydWUuCgkJCX0gLy8gRW5kIGZ1bmN0aW9uX2V4aXN0cyggJ2V4ZWMnICkuCgkJCQoJCQkvLyBUZXN0IFppcEFyY2hpdmUKCQkJaWYgKCBjbGFzc19leGlzdHMoICdaaXBBcmNoaXZlJyApICkgewoJCQkJaWYgKCAkdGhpcy0+dGVzdF96aXBhcmNoaXZlKCkgPT09IHRydWUgKSB7CgkJCQkJYXJyYXlfcHVzaCggJHJldHVybiwgJ3ppcGFyY2hpdmUnICk7CgkJCQl9CgkJCX0KCQkJCgkJCS8vIFRlc3QgUENMWmlwCgkJCWlmICggY2xhc3NfZXhpc3RzKCAnUGNsWmlwJyApICkgeyAvLyBDbGFzcyBhbHJlYWR5IGxvYWRlZC4KCQkJCWFycmF5X3B1c2goICRyZXR1cm4sICdwY2x6aXAnICk7CgkJCX0gZWxzZSB7IC8vIENsYXNzIG5vdCBsb2FkZWQuIFNlZWsgaXQgb3V0LgoJCQkJCgkJCQlpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ3dwLWFkbWluL2luY2x1ZGVzL2NsYXNzLXBjbHppcC5waHAnICkgKSB7IC8vIEluc2lkZSBXUC4KCQkJCQlyZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnd3AtYWRtaW4vaW5jbHVkZXMvY2xhc3MtcGNsemlwLnBocCcgKTsKCQkJCQlhcnJheV9wdXNoKCAkcmV0dXJuLCAncGNsemlwJyApOwoJCQkJfSBlbHNlaWYgKCBmaWxlX2V4aXN0cyggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9wY2x6aXAvcGNsemlwLnBocCcgKSApIHsgLy8gSW1wb3J0QnVkZHkuCgkJCQkJcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3BjbHppcC9wY2x6aXAucGhwJyApOwoJCQkJCWFycmF5X3B1c2goICRyZXR1cm4sICdwY2x6aXAnICk7CgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJcmV0dXJuICRyZXR1cm47CgkJfSAvLyBFbmQgYXZhaWxhYmxlX3ppcF9tZXRob2RzKCkuCgkJCgkJCgkJCgkJLy8gUmVjdXJzaXZlbHkgZGVsZXRlIGEgZGlyZWN0b3J5IGFuZCBhbGwgY29udGVudCB3aXRoaW4uCgkJZnVuY3Rpb24gZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICRkaXJlY3RvcnkgKSB7CgkJCWlmICggJycgPT0gJGRpcmVjdG9yeSApIHsKCQkJCWVycm9yX2xvZyggJ0JhY2t1cEJ1ZGR5IEVycm9yICM0NzM4NDNiOiBIYWx0ZWQgZW1wdHkgZGlyZWN0b3J5IGRlbGV0aW9uLicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQkKCQkJJGRpcmVjdG9yeSA9IHByZWdfcmVwbGFjZSggJ3xbL1xcXFxdKyR8JywgJycsICRkaXJlY3RvcnkgKTsKCQkJCgkJCSRmaWxlcyA9IGdsb2IoICRkaXJlY3RvcnkgLiAnLyonLCBHTE9CX01BUksgKTsKCQkJaWYgKCBpc19hcnJheSggJGZpbGVzICkgJiYgIWVtcHR5KCAkZmlsZXMgKSApIHsKCQkJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsKCQkJCQlpZiggJy8nID09PSBzdWJzdHIoICRmaWxlLCAtMSApICkKCQkJCQkJJHRoaXMtPmRlbGV0ZV9kaXJlY3RvcnlfcmVjdXJzaXZlKCAkZmlsZSApOwoJCQkJCWVsc2UKCQkJCQkJdW5saW5rKCAkZmlsZSApOwoJCQkJfQoJCQl9CgkJCQoJCQlpZiAoIGlzX2RpciggJGRpcmVjdG9yeSApICkgcm1kaXIoICRkaXJlY3RvcnkgKTsKCQkJCgkJCWlmICggaXNfZGlyKCAkZGlyZWN0b3J5ICkgKQoJCQkJcmV0dXJuIGZhbHNlOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9IC8vIEVuZCBkZWxldGVfZGlyZWN0b3J5X3JlY3Vyc2l2ZSgpLgoJCQoJCQoJCQoJCWZ1bmN0aW9uIHNldF96aXBfbWV0aG9kcyggJG1ldGhvZHMgKSB7CgkJCSR0aGlzLT5femlwX21ldGhvZHMgPSAkbWV0aG9kczsKCQl9IC8vIEVuZCBzZXRfemlwX21ldGhvZHMoKS4KCQkKCQkKCQkKCQkvKglfcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSgpCgkJICoJCgkJICoJZnVuY3Rpb24gZGVzY3JpcHRpb24KCQkgKgkKCQkgKglAcGFyYW0JCXN0cmluZwkJJGZpbGUJCQlGaWxlIHRvIHdyaXRlIGV4Y2x1c2lvbnMgaW50by4KCQkgKglAcGFyYW0JCWFycmF5CQkkZXhjbHVzaW9ucwkJQXJyYXkgb2YgZGlyZWN0b3JpZXMvcGF0aHMgdG8gZXhjbHVkZS4gT25lIHBlciBsaW5lLgoJCSAqCUBwYXJhbQkJYXRyaW5nCQkkcm9vdAkJCVJvb3QgZGlyZWN0b3J5IHRvIGV4Y2x1ZGUgcmVsYXRpdmUgdG8uCgkJICoJQHJldHVybgkJbnVsbAoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBfcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSggJGZpbGUsICRleGNsdXNpb25zLCAkcm9vdCA9ICcnICkgewoJCQlpZiAoICcnID09ICRyb290ICkgewoJCQkJJHJvb3QgPSBBQlNQQVRIOwoJCQl9IGVsc2UgewoJCQkJJHJvb3QgPSBydHJpbSggJHJvb3QsIERJUkVDVE9SWV9TRVBBUkFUT1IgKSAuIERJUkVDVE9SWV9TRVBBUkFUT1I7CgkJCX0KCgkJCS8vIEFycmF5IGZvciBjbGVhbmVkIHVwIGV4Y2x1c2lvbnMgbGlzdAoJCQkkc2FuaXRpemVkX2V4Y2x1c2lvbnMgPSBhcnJheSgpOwoJCQkKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnQ3JlYXRpbmcgYmFja3VwIGV4Y2x1c2lvbnMgZmlsZSBgJyAuICRmaWxlIC4gJ2AuJyApOwoJCQkvLyRleGNsdXNpb25zID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X2RpcmVjdG9yeV9leGNsdXNpb25zKCk7CgkJCQoJCQkvLyBUZXN0IGVhY2ggZXhjbHVzaW9uIGZvciB2YWxpZGl0eSAocHJlc2VuY2UpIGFuZCBkcm9wIHRob3NlIG5vdCBhY3R1YWxseSBwcmVzZW50CgkJCWZvcmVhY2goICRleGNsdXNpb25zIGFzICRleGNsdXNpb24gKSB7CgkJCQkKCQkJCS8vIE1ha2Ugc3VyZSBwbGF0Zm9ybSBzcGVjaWZpYyBkaXJlY3Rvcnkgc2VwYXJhdG9ycyBhcmUgdXNlZCAoY291bGQgaGF2ZSBtaWdyYXRlZCBmcm9tIGRpZmZlcmVudCBwbGF0Zm9ybSkKCQkJCSRleGNsdXNpb24gPSBwcmVnX3JlcGxhY2UoICd8WycgLiBhZGRzbGFzaGVzKCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApIC4gJ10rfCcsIERJUkVDVE9SWV9TRVBBUkFUT1IsICRleGNsdXNpb24gKTsKCQkJCQoJCQkJLy8gRElSRUNUT1JZLgoJCQkJaWYgKCBpc19kaXIoICRyb290IC4gbHRyaW0oICRleGNsdXNpb24sIERJUkVDVE9SWV9TRVBBUkFUT1IgKSApICkgewoJCQkJCQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0V4Y2x1ZGluZyBkaXJlY3RvcnkgYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOwoJCQkJCQoJCQkJCS8vIE5lZWQgdG8gYWRkIHRoZSB3aWxkY2FyZCBzbyB0aGF0IHppcCB3aWxsIGV4Y2x1ZGUgdGhlIGRpcmVjdG9yeSBhbmQgY29udGVudAoJCQkJCSRleGNsdXNpb24gPSBydHJpbSggJGV4Y2x1c2lvbiwgRElSRUNUT1JZX1NFUEFSQVRPUiApIC4gRElSRUNUT1JZX1NFUEFSQVRPUiAuICcqJzsKCQkJCQoJCQkJLy8gRklMRS4KCQkJCX0gZWxzZWlmICggaXNfZmlsZSggJHJvb3QgLiBsdHJpbSggJGV4Y2x1c2lvbiwgRElSRUNUT1JZX1NFUEFSQVRPUiApICkgKSB7CgkJCQkJCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRXhjbHVkaW5nIGZpbGUgYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOwoJCQkJCgkJCQkvLyBTWU1CT0xJQyBMSU5LLgoJCQkJfSBlbHNlaWYgKCBpc19saW5rKCAkcm9vdCAuIGx0cmltKCAkZXhjbHVzaW9uLCBESVJFQ1RPUllfU0VQQVJBVE9SICkgKSApIHsKCQkJCQkKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdFeGNsdWRpbmcgc3ltYm9saWMgbGluayBgJyAuICRleGNsdXNpb24gLiAnYC4nICk7CgkJCQkKCQkJCS8vIERPRVMgTk9UIEVYSVNULgoJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdPbWl0dGluZyBleGNsdXNpb24gYXMgZmlsZS9kaXJlY3RvcnkgZG9lcyBub3QgY3VycmVudGx5IGV4aXN0OiBgJyAuICRleGNsdXNpb24gLiAnYC4nICk7CgkJCQkJCgkJCQkJLy8gU2tpcCB0byBuZXh0IGV4Y2x1c2lvbgoJCQkJCWNvbnRpbnVlOwoJCQkJCQoJCQkJfQoJCQkJCgkJCQkvLyBXZSBoYXZlIGEgdmFsaWQgZXhjbHVkZSBzbyBhZGQgaXQKCQkJCSRzYW5pdGl6ZWRfZXhjbHVzaW9uc1tdID0gJGV4Y2x1c2lvbjsKCQkJCQoJCQl9CgkJCQoJCQkvLyBQdXQgdGhlIGV4Y2x1c2lvbnMgdG8gYSBmaWxlIGFzIGEgc3RyaW5nCgkJCWZpbGVfcHV0X2NvbnRlbnRzKCAkZmlsZSwgaW1wbG9kZSggUEhQX0VPTCwgJHNhbml0aXplZF9leGNsdXNpb25zICkgLiBQSFBfRU9MICk7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0JhY2t1cCBleGNsdXNpb25zIGZpbGUgY3JlYXRlZC4nICk7CgkJCQoJCX0gLy8gRW5kIHJlbmRlcl9leGNsdXNpb25zX2ZpbGUoKS4KCQkKCQkKCQkKCX0gLy8gRW5kIGNsYXNzCgkKfQo/Pg==
###PACKDATA,FILE_END,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
UEsDBAoAAAAAAC8ELUHj5ZWwDAAAAAwAAAAIABwAdGVzdC50eHRVVAkAA8obUVDjG1FQdXgLAAEE+AEAAAQUAAAASGVsbG8gV29ybGQKUEsBAh4DCgAAAAAALwQtQePllbAMAAAADAAAAAgAGAAAAAAAAQAAAKSBAAAAAHRlc3QudHh0VVQFAAPKG1FQdXgLAAEE+AEAAAQUAAAAUEsFBgAAAAABAAEATgAAAE4AAAAAAA==
###PACKDATA,FILE_END,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
###PACKDATA,FILE_START,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php

###PACKDATA,FILE_END,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php

###PACKDATA,FILE_END,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php
###PACKDATA,FILE_START,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php

###PACKDATA,FILE_END,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
###PACKDATA,FILE_START,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
###PACKDATA,FILE_START,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
PD9waHAKCgoKLyoJcGx1Z2luYnVkZHkgY2xhc3MKICoJCiAqCUZyYW1ld29yayBmb3IgaGFuZGxpbmcgYWxsIHBsdWdpbiBmdW5jdGlvYWxpdHksIGFyY2hpdGVjdHVyZSwgZXRjLgogKgkkc2V0dGluZ3MgdmFyaWFibGUgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIHNhbWUgc2NvcGUgb2YgdGhpcyBmaWxlIGFuZCBwcmV2aW91c2x5IHBvcHVsYXRlZCB3aXRoIGFsbCBwbHVnaW4gc2V0dGluZ3MuCiAqCQogKglAYXV0aG9yIER1c3RpbiBCb2x0b24KICovCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5IHsKCXByaXZhdGUgc3RhdGljICRwYmZyYW1ld29ya192ZXJzaW9uID0gJzEuMC4yOCc7CgkKCQoJLy8gKioqKioqKioqKiBQVUJMSUMgUFJPUEVSVElFUyAqKioqKioqKioqCglwdWJsaWMgc3RhdGljICRzdGFydF90aW1lOwkJCQkJLy8gbWljcm90aW1lIHdoZW4gaW5pdCgpIHdhcyBmaXJzdCBydW4uCgkKCQoJcHVibGljIHN0YXRpYyAkb3B0aW9uczsJCQkJCQkvLyBTdG9yZXMgYWxsIG9wdGlvbnMgZm9yIHBsdWdpbiB0aGF0IHdpbGwgY2hhbmdlIHN1Y2ggYXMgdXNlciBkZWZpbmVkIHNldHRpbmdzLgoJcHVibGljIHN0YXRpYyAkdWk7CQkJCQkJCS8vIFVzZXIgaW50ZXJmYWNlIGNsYXNzIGZvciByYXBpZGx5IGNvbnN0cnVjdGluZyBXUC1zdHlsZWQgR1VJcy4gUkVNT1ZFRC4gTm93IGFkZGVkIGF0IHJ1bnRpbWUgd2hlbiBpbml0X2NsYXNzX2NvbnRyb2xsZXIoKSBjYWxsZWQKCXB1YmxpYyBzdGF0aWMgJGZpbGVzeXN0ZW07CQkJCQkvLyBDbGFzcyBmb3IgbWFuaXB1bGF0aW5nICYgaW50ZXJmYWNpbmcgZmlsZSBzeXN0ZW0uCglwdWJsaWMgc3RhdGljICRmb3JtYXQ7CQkJCQkJLy8gQ2xhc3MgZm9yIGZvcm1hdHRpbmcgZGF0YSBvciB0ZXh0IGluIGh1bWFuIGZyaWVuZGx5IGZvcm1zLgoJcHVibGljIHN0YXRpYyAkY2xhc3NlcyA9IGFycmF5KCk7CQkJLy8gQXJyYXkgaG9sZGVyIGZvciB1c2VyLWRlZmluZWQgY2xhc3NlcyBuZWVkZWQgZ2xvYmFsbHkgYnkgcGx1Z2luLiBTZXQvZ2V0IHdpdGggJGNsYXNzWydjbGFzc19zbHVnJ10uCglwdWJsaWMgc3RhdGljICR2YXJpYWJsZXMgPSBhcnJheSgpOwkJCS8vIEFycmF5IGhvbGRlciBmb3IgdXNlci1kZWZpbmVkIHZhcmlhYmxlcyBuZWVkZWQgZ2xvYmFsbHkgYnkgcGx1Z2luLiBTZXQvZ2V0IHdpdGggJHZhcmlhYmxlc1sndmFyX25hbWUnXS4gVXNlZnVsIGZvciB0aGluZ3Mgc3VjaCBhcyBhbiBpbnN0YW5jZSBjb3VudGVyIHRoYXQgaW5jcmVtZW50cy4KCQoJCgkvLyAqKioqKioqKioqIFBSSVZBVEUgUFJPUEVSVElFUyAqKioqKioqKioqCgkKCQoJCglwcml2YXRlIHN0YXRpYyAkX3NldHRpbmdzID0gYXJyYXkgKAkJCS8vIERlZmF1bHQgZnJhbWV3b3JrIHNldHRpbmdzIGZvciB0aGlzIHBsdWdpbi4gTk9UIHRoZSBzYW1lIGFzIG9wdGlvbnMuIEFjY2VzcyB2aWEgc2VsZjo6c2V0dGluZ3MoKS4KCQknc2x1ZycJCQkJPT4JCScnLAoJCSdzZXJpZXMnCQkJPT4JCScnLAoJCSdkZWZhdWx0X29wdGlvbnMnCT0+CQknJywKCQknbG9nX3NlcmlhbCcgCQk9PiAgCScnLAoJCSdpbml0JwkJCQk9PgkJJycsCgkpOwoJcHJpdmF0ZSBzdGF0aWMgJF9wYWdlX3NldHRpbmdzOwkJCQkvLyBIb2xkcyBhZG1pbiBwYWdlIHNldHRpbmdzIGZvciBhZGRpbmcgdG8gdGhlIGFkbWluIG1lbnUgb24gYSBob29rIGxhdGVyLgoJcHVibGljIHN0YXRpYyAkX3N0YXR1c19zZXJpYWwgPSAnJzsJCQkvLyBTZXJpYWwgZm9yIHdyaXRpbmcgdGhlIHN0YXR1cyBmb3IgdGhpcyBwYWdlIGxvYWQuIFN0cmluZy4KCXByaXZhdGUgc3RhdGljICRfaGFzX2ZsdXNoZWQgPSBmYWxzZTsJCS8vLyBXaGV0aGVyIG9yIG5vdCBmbHVzaCgpIGhhcyBiZWVuIGNhbGxlZCB5ZXQgb3Igbm90LgoKCS8vIENvbnRyb2xsZXIgb2JqZWN0cy4gU2VlOiAvY29udHJvbGxlcnMvIGRpcmVjdG9yeS4KCXByaXZhdGUgc3RhdGljICRfYWN0aW9uczsJCQkJCS8vIENvbnRyb2xsZXIgZm9yIFdvcmRQcmVzcyBhY3Rpb25zLgoJcHVibGljIHN0YXRpYyAkX2FqYXg7CQkJCQkJLy8gQ29udHJvbGxlciBmb3IgV29yZFByZXNzIEFKQVggYWN0aW9ucy4KCXByaXZhdGUgc3RhdGljICRfY3JvbjsJCQkJCQkvLyBDb250cm9sbGVyIGZvciBXb3JkUHJlc3Mgc2NoZWR1bGVkIGNyb25zLgoJcHJpdmF0ZSBzdGF0aWMgJF9kYXNoYm9hcmQ7CQkJCQkvLyBDb250cm9sbGVyIGZvciBXb3JkUHJlc3MgYWRtaW4gZGFzaGJvYXJkIGl0ZW1zLgoJcHJpdmF0ZSBzdGF0aWMgJF9maWx0ZXJzOwkJCQkJLy8gQ29udHJvbGxlciBmb3IgV29yZFByZXNzIGZpbHRlcnMuCglwcml2YXRlIHN0YXRpYyAkX3Nob3J0Y29kZXM7CQkJCS8vIENvbnRyb2xsZXIgZm9yIFdvcmRQcmVzcyBzaG9ydGNvZGVzLgoJLy9wcml2YXRlIHN0YXRpYyAkX3dpZGdldHM7CQkJCQkvLyBDb250cm9sbGVyIGZvciBXb3JkUHJlc3Mgd2lkZ2V0cy4KCXByaXZhdGUgc3RhdGljICRfcGFnZXM7CQkJCQkJLy8gQ29udHJvbGxlciBmb3IgV29yZFByZXNzIHBhZ2VzLiBTZWUgL2NvbnRyb2xsZXJzL3BhZ2VzLyBkaXJlY3RvcnkuCgkKCS8vIE1pc2MgdmFyaWFibGVzLgoJcHJpdmF0ZSBzdGF0aWMgJF9wbHVnaW5fcGF0aDsJCQkJLy8gTG9jYWwgcGF0aCB0byBwbHVnaW4uIEV4OiAvdXNlcnMvcGIvd3d3L3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4gKG5vIHRyYWlsaW5nIHNsYXNoKSBAc2VlIHBsdWdpbmJ1ZGR5OnBsdWdpbl9wYXRoKCkKCXByaXZhdGUgc3RhdGljICRfcGx1Z2luX3VybDsJCQkJLy8gVVJMIHRvIHBsdWdpbiBkaXJlY3RvcnkuIEV4OiBodHRwOi8vcGx1Z2luYnVkZHkuY29tL3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4vICh3aXRoIHRyYWlsaW5nIHNsYXNoKSBAc2VlIHNlbGY6OnBsdWdpbl91cmwoKQoJcHJpdmF0ZSBzdGF0aWMgJF9zZWxmX2xpbms7CQkJCQkvLyBSZXR1cm5zIFVSTCB0byB0aGUgY3VycmVudCBhZG1pbiBwYWdlIGlmIG9uIGEgcGx1Z2luIHBhZ2UuIEV4OiBodHRwOi8vcGx1Z2luYnVkZHkuY29tL3dwLWFkbWluL2luZGV4LnBocD9wYWdlPXBiX215cGx1Z2luIEBzZWUgc2VsZjo6cGFnZV9saW5rKCkKCS8vcHJpdmF0ZSBzdGF0aWMgJF9jYWxsYmFja3M7CQkJCS8vIERJU0FCTEVELiBVc2luZyBjcmVhdGVfZnVuY3Rpb24oKSB0byBieXBhc3MgbmVlZCBmb3IgdGhpcy4gQ3VycmVudGx5IG9ubHkgaG9sZGluZyBjYWxsYmFjayBmb3IgdGhlIGFkbWluIG1lbnUgLiBAc2VlIHBsdWdpbmJ1ZGR5X2NhbGxiYWNrcyBjbGFzcwoJcHVibGljIHN0YXRpYyAkX2Rhc2hib2FyZF93aWRnZXRzOyAgIAkJLy8gSG9sZHMgdGFnIGFuZCB0aXRsZSBmb3IgdW5jb25zdHJ1Y3RlZCBkYXNoYm9hcmQgd2lkZ2V0cyB0ZW1wb3JhcmlseS4KCXB1YmxpYyBzdGF0aWMgJF91cGRhdGVyOwkJCQkJLy8gQ29udGFpbnMgdXBkYXRlciBvYmplY3QgKGlmIGVuYWJsZWQpIG9mIHRoZSBtb3N0IHVwIHRvIGRhdGUgdXBkYXRlciBmb3VuZC4gUG9wdWxhdGVkIG9uIGluaXQgaG9vay4KCXByaXZhdGUgc3RhdGljICRfc2tpcGxvZzsJCQkJCS8vIGlmIHVuYWJsZSB0byB3cml0ZSB0byBsb2cgdGhlbiBza2lwIGFsbCBmdXR1cmUgYXR0ZW1wdHMuCgkKCQoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKgoJCgkKCQoJLyoJc2VsZjo6aW5pdCgpCgkgKgkKCSAqCUNvbnN0cnVjdG9yIGZvciB0aGlzIHN0YXRpYyBjbGFzcy4gQ2FsbGVkIGZyb20gdGhlIHBsdWdpbidzIGluaXQgKG9yIG90aGVyIGRlZmluZWQgaW4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSkgZmlsZS4KCSAqCQoJICoJQHBhcmFtCQlhcnJheQkJJHBsdWdpbmJ1ZGR5X3NldHRpbmdzCQlBcnJheSBvZiBwbHVnaW4gc2V0dGluZ3Mgc3VjaCBhcyBzbHVnLCBkZWZhdWx0IG9wdGlvbnMsCgkgKgkJCQkJCQkJCQkJCQkJcGx1Z2luLXNwZWNpZmljIG9wdGlvbnMsIGV0Yy4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpbml0KCAkcGx1Z2luYnVkZHlfc2V0dGluZ3MsICRwbHVnaW5idWRkeV9pbml0ID0gJ2luaXQucGhwJyApIHsKCQlzZWxmOjokc3RhcnRfdGltZSA9IG1pY3JvdGltZSggdHJ1ZSApOwoJCXNlbGY6OiRfc2V0dGluZ3MgPSBhcnJheV9tZXJnZSggKGFycmF5KXNlbGY6OiRfc2V0dGluZ3MsIChhcnJheSkkcGx1Z2luYnVkZHlfc2V0dGluZ3MgKTsgLy8gTWVyZ2Ugc2V0dGluZ3Mgb3ZlciBmcmFtZXdvcmsgZGVmYXVsdHMuCgkJCgkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdwbHVnaW5fZGlyX3VybCcgKSApIHsgLy8gVVJMIGFuZCBwYXRoIGZ1bmN0aW9ucyBhdmFpbGFibGUgKG5vdCBpbiBJbXBvcnRCdWRkeSBidXQgaW5zaWRlIFdvcmRQcmVzcykuCgkJCXNlbGY6OiRfcGx1Z2luX3BhdGggPSBydHJpbSggcGx1Z2luX2Rpcl9wYXRoKCBkaXJuYW1lKCBfX0ZJTEVfXyApICksICcvXFwnICk7CgkJCXNlbGY6OiRfcGx1Z2luX3VybCA9IHJ0cmltKCBwbHVnaW5fZGlyX3VybCggZGlybmFtZSggX19GSUxFX18gKSApLCAnL1xcJyApOwoJCX0gZWxzZSB7IC8vIEdlbmVyYXRlIFVSTCBhbmQgcGF0aHMgb2xkIHdheSAob2xkIFdvcmRQcmVzcyB2ZXJzaW9ucyBvciBpbnNpZGUgSW1wb3J0QnVkZHkpLgoJCQlzZWxmOjokX3BsdWdpbl9wYXRoID0gZGlybmFtZSggZGlybmFtZSggX19GSUxFX18gKSApOwoJCQkkcmVsYXRpdmVfcGF0aCA9IGx0cmltKCBzdHJfcmVwbGFjZSggJ1xcJywgJy8nLCBzdHJfcmVwbGFjZSggcnRyaW0oIEFCU1BBVEgsICdcXFwvJyApLCAnJywgc2VsZjo6JF9wbHVnaW5fcGF0aCApICksICdcXFwvJyApOwoJCQlpZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSB7CgkJCQlzZWxmOjokX3BsdWdpbl91cmwgPSAnaW1wb3J0YnVkZHknOyAvLyBSZWxhdGl2ZSBpbXBvcnRidWRkeSBwYXRoLgoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgZnVsbCBwYXRoLgoJCQkJc2VsZjo6JF9wbHVnaW5fdXJsID0gc2l0ZV91cmwoKSAuICcvJyAuIGx0cmltKCAkcmVsYXRpdmVfcGF0aCwgJy8nICk7CgkJCQlpZiAoIGlzc2V0KCAkX1NFUlZFUlsnSFRUUFMnXSApICYmICRfU0VSVkVSWydIVFRQUyddID09ICdvbicgKSB7IC8vIEhhbmRsZSBodHRwcyBVUkxzIHByb3Blcmx5LgoJCQkJCXNlbGY6OiRfcGx1Z2luX3VybCA9IHN0cl9yZXBsYWNlKCAnaHR0cDovLycsICdodHRwczovLycsIHNlbGY6OiRfcGx1Z2luX3VybCApOwoJCQkJfQoJCQl9CgkJfQoJCQoJCWlmICggaXNzZXQoICRfR0VUWydwYWdlJ10gKSApIHsgLy8gSWYgaW4gYW4gYWRtaW4gcGFnZSB0aGVuIGFwcGVuZCBwYWdlIHF1ZXJ5c3RyaW5nLgoJCQkkYXJyID0gZXhwbG9kZSggJz8nLCAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSApOyAvLyBhdm9pZCByZWZlcmVuY2UgZXJyb3IgYnkgc2V0dGluZyBoZXJlLgoJCQlzZWxmOjokX3NlbGZfbGluayA9IGFycmF5X3NoaWZ0KCAkYXJyICkgLiAnP3BhZ2U9JyAuIGh0bWxlbnRpdGllcyggJF9HRVRbJ3BhZ2UnXSApOwoJCQl1bnNldCggJGFyciApOwoJCX0KCQkKCQkvLyBTZXQgdGhlIGluaXQgZmlsZS4KCQlzZWxmOjokX3NldHRpbmdzWydpbml0J10gPSAkcGx1Z2luYnVkZHlfaW5pdDsKCQkKCQkvLyBmaWxlc3lzdGVtIGNsYXNzIGNvbnRyb2xsZXIuCgkJaWYgKCBpc3NldCggc2VsZjo6JF9zZXR0aW5nc1snbW9kdWxlcyddWydmaWxlc3lzdGVtJ10gKSAmJiAoIHNlbGY6OiRfc2V0dGluZ3NbJ21vZHVsZXMnXVsnZmlsZXN5c3RlbSddID09PSB0cnVlICkgKSB7CgkJCXNlbGY6OmluaXRfY2xhc3NfY29udHJvbGxlciggJ2ZpbGVzeXN0ZW0nICk7CgkJfQoJCS8vIGZvcm1hdCBjbGFzcyBjb250cm9sbGVyLgoJCWlmICggaXNzZXQoIHNlbGY6OiRfc2V0dGluZ3NbJ21vZHVsZXMnXVsnZm9ybWF0J10gKSAmJiAoIHNlbGY6OiRfc2V0dGluZ3NbJ21vZHVsZXMnXVsnZm9ybWF0J10gPT09IHRydWUgKSApIHsKCQkJc2VsZjo6aW5pdF9jbGFzc19jb250cm9sbGVyKCAnZm9ybWF0JyApOwoJCX0KCQkKCQlpZiAoIGlzX2FkbWluKCkgKSB7CgkJCQoJCQkvLyBMb2FkIFVJIHN5c3RlbS4KCQkJc2VsZjo6aW5pdF9jbGFzc19jb250cm9sbGVyKCAndWknICk7CgkJCQoJCQkvLyBMb2FkIGFjdGl2YXRpb24gaG9vayBpZiBpbiBhZG1pbiBhbmQgYWN0aXZhdGlvbiBmaWxlIGV4aXN0cy4KCQkJaWYgKCBmaWxlX2V4aXN0cyggc2VsZjo6JF9wbHVnaW5fcGF0aCAuICcvY29udHJvbGxlcnMvYWN0aXZhdGlvbi5waHAnICkgKSB7CgkJCQkkZXNjYXBlZF9wbHVnaW5fcGF0aCA9IHByZWdfcmVwbGFjZSggJyNeXFxcXFxcXFwjJywgJ1xcXFxcXFxcXFxcXFxcXFwnLCBzZWxmOjokX3BsdWdpbl9wYXRoICk7IC8vIFJlcGxhY2UgYSBwYXRoIHN0YXJ0aW5nIHdpdGggXFwgdG8gYmUgXFxcXCBzbyB0aGF0IHdoZW4gY3JlYXRlX2Z1bmN0aW9uIHBhcnNlcyB0aGUgYmFja3NsYXNoIGl0IHdpbGwgcmV0dXJuIGJhY2sgdG8gXFwuCgkJCQlyZWdpc3Rlcl9hY3RpdmF0aW9uX2hvb2soIHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnLycgLiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdpbml0JyApLCBjcmVhdGVfZnVuY3Rpb24oICcnLCAicmVxdWlyZV9vbmNlKCciIC4gJGVzY2FwZWRfcGx1Z2luX3BhdGggLiAiL2NvbnRyb2xsZXJzL2FjdGl2YXRpb24ucGhwJyk7IiApICk7IC8vIFJ1biBzb21lIGNvZGUgd2hlbiBwbHVnaW4gaXMgYWN0aXZhdGVkIGluIGRhc2hib2FyZC4KCQkJfQoJCX0gZWxzZSB7IC8vIFB1YmxpYyBzaWRlLgoJCQkvLyBEbyBub3RoaW5nLgoJCX0KCQkKCX0gLy8gRW5kIGluaXQoKS4KCQoJCgkKCS8qCXNlbGY6OnBsdWdpbl9wYXRoKCkKCSAqCQoJICoJUmV0dXJucyBsb2NhbCBwYXRoIHRvIHBsdWdpbi4gRXg6IC91c2Vycy9wYi93d3cvd3AtY29udGVudC9wbHVnaW5zL215X3BsdWdpbiAobm8gdHJhaWxpbmcgc2xhc2gpCgkgKgkKCSAqCUByZXR1cm4JCXN0cmluZwkJUGx1Z2luIHBhdGggZGlyZWN0b3J5IChubyB0cmFpbGluZyBzbGFzaCkuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcGx1Z2luX3BhdGgoKSB7CgkJcmV0dXJuIHNlbGY6OiRfcGx1Z2luX3BhdGg7Cgl9IC8vIEVuZCBwbHVnaW5fcGF0aCgpLgoJCgkKCQoJLyoJc2VsZjo6cGx1Z2luX3VybCgpCgkgKgkKCSAqCVJldHVybnMgVVJMIHRvIHBsdWdpbiBkaXJlY3RvcnkuIEV4OiBodHRwOi8vcGx1Z2luYnVkZHkuY29tL3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4vICh3aXRoIHRyYWlsaW5nIHNsYXNoKQoJICoJCgkgKglAcmV0dXJuCQlzdHJpbmcJCVBsdWdpbiBwYXRoIFVSTCAod2l0aCB0cmFpbGluZyBzbGFzaCkuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcGx1Z2luX3VybCgpIHsKCQlyZXR1cm4gc2VsZjo6JF9wbHVnaW5fdXJsOwoJfSAvLyBFbmQgcGx1Z2luX3VybCgpLgoJCgkKCQoJLyoJc2VsZjo6cGFnZV91cmwoKQoJICoJCgkgKglSZXR1cm5zIFVSTCB0byB0aGUgY3VycmVudCBhZG1pbiBwYWdlIGlmIG9uIGEgcGx1Z2luIHBhZ2UuIEV4OiBodHRwOi8vcGx1Z2luYnVkZHkuY29tL3dwLWFkbWluL2luZGV4LnBocD9wYWdlPXBiX215cGx1Z2luCgkgKgkKCSAqCUByZXR1cm4JCXN0cmluZwkJUGx1Z2luIHBhZ2UgVVJMICh3aXRoIHRyYWlsaW5nIHNsYXNoKS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwYWdlX3VybCgpIHsKCQlyZXR1cm4gc2VsZjo6JF9zZWxmX2xpbms7Cgl9IC8vIEVuZCBwYWdlX3VybCgpLgoJCgkKCQoJLyoJc2VsZjo6YWpheF91cmwoKQoJICoJCgkgKglSZXR1cm5zIHRoZSBhZG1pbi1zaWRlIEFKQVggVVJMLiBQcm9wZXJseSBoYW5kbGVzIHByZWZpeGluZyBhbmQgZXZlcnl0aGluZyBmb3IgUEIgZnJhbWV3b3JrLgoJICoJVG9kbzogcHJvdmlkZSBub24tYWRtaW4tc2lkZSBmdW5jdGlvbmFsaXR5PwoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHRhZwkJVGFnIC8gc2x1ZyBvZiBBSkFYLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlVUkwgZm9yIEFKQVguCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWpheF91cmwoICR0YWcgKSB7CgkJcmV0dXJuIGFkbWluX3VybCggJ2FkbWluLWFqYXgucGhwP2FjdGlvbj1wYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApIC4gJ19iYWNrdXBidWRkeSZmdW5jdGlvbj0nIC4gJHRhZyApOwoJfSAvLyBFbmQgYWpheF91cmwoKS4KCQoJCgkKCS8qCXNlbGY6OnNldHRpbmdzKCkKCSAqCQoJICoJUmV0cmlldmVzIG1pc2MgcGx1Z2luIHNldHRpbmdzIGJvdGggcGFzc2VkIGZyb20gdGhlIGluaXQgZmlsZSAoIGRlZmluZWQgaW4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSApIGludG8gc2VsZjo6JF9zZXR0aW5ncwoJICoJYW5kIGFsc28gcGx1Z2luIHNldHRpbmdzIGRlZmluZWQgaW4gdGhlIGluaXQgZmlsZSAoIGRlZmluZWQgaW4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSApIGhlYWRlciBpbmNsdWRpbmc6CgkgKgluYW1lLCB0aXRsZSwgZGVzY3JpcHRpb24sIGF1dGhvciwgYXV0aG9ydXJpLCB2ZXJzaW9uLCBwbHVnaW51cmkgT1IgdXJsLCB0ZXh0ZG9tYWluLCBkb21haW5wYXRoLCBuZXR3b3JrLgoJICoJQHNlZSBzZWxmOjppbml0KCkKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSR0eXBlCQlUeXBlIG9mIHNldHRpbmcgdG8gcmV0cmlldmUuCgkgKglAcmV0dXJuCQltaXhlZAkJCQkJVmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoYXQgc2V0dGluZ3MuIE51bGwgaWYgbm90IGZvdW5kLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNldHRpbmdzKCAkdHlwZSApIHsKCQkvL2lmICggIXNlbGY6OmJsYW5rKCBAc2VsZjo6JF9zZXR0aW5nc1skdHlwZV0gKSApIHsgLy8gUmV0dXJuIHZhbHVlIGlmIGl0IGFscmVhZHkgZXhpc3RzLgoJCWlmICggaXNzZXQoIHNlbGY6OiRfc2V0dGluZ3NbJHR5cGVdICkgKSB7CgkJCXJldHVybiBzZWxmOjokX3NldHRpbmdzWyR0eXBlXTsKCQl9CgkJCgkJaWYgKCBkZWZpbmVkKCAnUEJfU1RBTkRBTE9ORScgKSAmJiAoIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSApIHsKCQkJaWYgKCAndmVyc2lvbicgPT0gJHR5cGUgKSB7CgkJCQlyZXR1cm4gUEJfQkJfVkVSU0lPTjsKCQkJfQoJCX0KCQkKCQkvLyBUaGUgdmFyaWFibGUgZG9lcyBub3QgZXhpc3Qgc28gY2hlY2sgdG8gc2VlIGlmIGl0IGNhbiBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgcGx1Z2luJ3MgaGVhZGVyLgoJCS8vaWYgKCBzZWxmOjpibGFuayggQHNlbGY6OiRfc2V0dGluZ3NbJ25hbWUnXSApICkgewoJCWlmICggIWlzc2V0KCBzZWxmOjokX3NldHRpbmdzWyduYW1lJ10gKSB8fCAoIHNlbGY6OiRfc2V0dGluZ3NbJ25hbWUnXSA9PSAnJyApICkgewoJCQlpZiAoICFmdW5jdGlvbl9leGlzdHMoICdnZXRfcGx1Z2luX2RhdGEnICkgKSB7CgkJCQlyZXF1aXJlX29uY2UgQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9wbHVnaW4ucGhwJzsKCQkJfQoJCQkkaW5mbyA9IGFycmF5X2NoYW5nZV9rZXlfY2FzZSggZ2V0X3BsdWdpbl9kYXRhKCBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy8nIC4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSwgZmFsc2UsIGZhbHNlICksIENBU0VfTE9XRVIgKTsKCQkJJGluZm9bJ3VybCddID0gJGluZm9bJ3BsdWdpbnVyaSddOwoJCQl1bnNldCggJGluZm9bJ3BsdWdpbnVyaSddICk7CgkJCXNlbGY6OiRfc2V0dGluZ3MgPSBhcnJheV9tZXJnZSggc2VsZjo6JF9zZXR0aW5ncywgJGluZm8gKTsKCQl9CgoJCS8vIFRyeSB0byByZXR1cm4gc2V0dGluZyBvdGhlcndpc2UgdGhyb3cgYW4gZXJyb3IuCgkJaWYgKCBpc3NldCggc2VsZjo6JF9zZXR0aW5nc1skdHlwZV0gKSApIHsKCQkJcmV0dXJuIHNlbGY6OiRfc2V0dGluZ3NbJHR5cGVdOwoJCX0gZWxzZSB7CgkJCXJldHVybiAne1Vua25vd24gc2V0dGluZ3MoKSB2YXJpYWJsZSBgJyAuICR0eXBlIC4gJ2B9JzsKCQl9Cgl9IC8vIEVuZCBzZXR0aW5ncygpLgoJCgkKCQoJLyoJc2VsZjo6YmxhbmsoKQoJICoJCgkgKglSZXR1cm5zIHdoZXRoZXIgYSBub3QgYSB2YXJpYWJsZSBpcyBibGFuayAoZW1wdHkgc3RyaW5nLCBudWxsLCB1bmRlZmluZWQpIG9yIG5vdC4KCSAqCUJlIHN1cmUgdG8gc3VwcHJlc3MgZXJyb3JzIGlmIHVzaW5nIHRoaXMgZnVuY3Rpb24gd2hlcmUgaW5kZXhlcyBtYXkgYmUgbm9uLWV4aXN0YW50IHdpdGggQCBzaWduLgoJICoJCgkgKglAcGFyYW0JCW1peGVkCQlWYXJpYWJsZSB0byBkZXRlcm1pbmUgaWYgaXQgaXMgYmxhbmsgb3Igbm90LgoJICoJQHJldHVybgkJYm9vbGVhbgkJVHJ1ZSBpZiB2YXJpYWJsZSBpcyBzZXQgYW5kIGlzIG5vdCBhbiBlbXB0eSBzdHJpbmcuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYmxhbmsoICR2YWx1ZSApIHsKCQlyZXR1cm4gZW1wdHkoICR2YWx1ZSApICYmICFpc19udW1lcmljKCAkdmFsdWUgKTsKCX0gLy8gRW5kIGJsYW5rKCkuCgkKCQoJCgkvKglzZWxmOjpfUE9TVCgpCgkgKgkKCSAqCVJldHVybnMgJF9QT1NUIHZhbHVlIGlmIGF2YWlsYWJsZSwgZWxzZSByZXR1cm5zIGEgYmxhbmsuIFByZXZlbnRzIGhhdmluZyB0byBjaGVjayBpc3NldCBmaXJzdC4gU3RyaXBzIFdQJ3MgYWRkZWQgc2xhc2hlcy4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCUtleSBvZiBQT1NUIHZhcmlhYmxlIHRvIGNoZWNrLgoJICoJQHJldHVybgkJbWl4ZWQJCVZhbHVlIG9mIFBPU1QgdmFyaWFibGUgaWYgc2V0LiBJZiBub3Qgc2V0IHJldHVybnMgYSBibGFuayBzdHJpbmcgJycuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gX1BPU1QoICR2YWx1ZSA9IG51bGwgKSB7CgkJaWYgKCAoICR2YWx1ZSA9PSAnJyApIHx8ICggbnVsbCA9PSAkdmFsdWUgKSApIHsgLy8gUmVxdWVzdGluZyAkX1BPU1QgdmFyaWFibGUuCgkJCWlmICggZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgJiYgKCBQQl9TVEFOREFMT05FID09PSB0cnVlICkgJiYgIWdldF9tYWdpY19xdW90ZXNfZ3BjKCkgKSB7IC8vIElmIGluIEltcG9ydEJ1ZGR5IG1vZGUgQU5EIG1hZ2ljIHF1b3RlcyBpcyBub3Qgb24sIGRvbnQgc3RyaXAuIFdQIGVzY2FwZXMgZm9yIHVzIGlmIG1hZ2ljIHF1b3RlcyBhcmUgb2ZmLgoJCQkJcmV0dXJuICRfUE9TVDsKCQkJfQoJCQlyZXR1cm4gc3RyaXBzbGFzaGVzX2RlZXAoICRfUE9TVCApOwoJCX0gZWxzZSB7CgkJCSRwb3N0VmFsdWUgPSAnJzsKCQkJaWYgKCBpc3NldCggJF9QT1NUWyR2YWx1ZV0gKSApIHsKCQkJCSRwb3N0VmFsdWUgPSAkX1BPU1RbJHZhbHVlXTsKCQkJfQoJCQlpZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmICggUEJfU1RBTkRBTE9ORSA9PT0gdHJ1ZSApICYmICFnZXRfbWFnaWNfcXVvdGVzX2dwYygpICkgeyAvLyBJZiBpbiBJbXBvcnRCdWRkeSBtb2RlIEFORCBtYWdpYyBxdW90ZXMgaXMgbm90IG9uLCBkb250IHN0cmlwLiBXUCBlc2NhcGVzIGZvciB1cyBpZiBtYWdpYyBxdW90ZXMgYXJlIG9mZi4KCQkJCXJldHVybiAkcG9zdFZhbHVlOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHN0cmlwc2xhc2hlc19kZWVwKCAkcG9zdFZhbHVlICk7IC8vIFJlbW92ZSBXb3JkUHJlc3MnIG1hZ2ljLXF1b3Rlcy1zdHlsZSBlc2NhcGluZyBvZiBkYXRhLgoJCQl9CgkJfQoJfSAvLyBFbmQgX1BPU1QoKS4KCQoJCgkKCS8qCXNlbGY6Ol9HRVQoKQoJICoJCgkgKglSZXR1cm5zICRfUE9TVCB2YWx1ZSBpZiBhdmFpbGFibGUsIGVsc2UgcmV0dXJucyBhIGJsYW5rLiBQcmV2ZW50cyBoYXZpbmcgdG8gY2hlY2sgaXNzZXQgZmlyc3QuCgkgKglUT0RPOiBEbyB3ZSBuZWVkIHRvIHN0cmlwc2xhc2hlc19kZWVwKCkgb24gR0VUIHZhcnMgYWxzbyBsaWtlIFBPU1RzPwoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJS2V5IG9mIFBPU1QgdmFyaWFibGUgdG8gY2hlY2suCgkgKglAcmV0dXJuCQltaXhlZAkJVmFsdWUgb2YgUE9TVCB2YXJpYWJsZSBpZiBzZXQuIElmIG5vdCBzZXQgcmV0dXJucyBhIGJsYW5rIHN0cmluZyAnJy4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBfR0VUKCAkdmFsdWUgPSAnJyApIHsKCQlpZiAoICggJHZhbHVlID09ICcnICkgfHwgKCBudWxsID09ICR2YWx1ZSApICkgeyAvLyBSZXF1ZXN0aW5nICRfR0VUIHZhcmlhYmxlLgoJCQlpZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmICggUEJfU1RBTkRBTE9ORSA9PT0gdHJ1ZSApICYmICFnZXRfbWFnaWNfcXVvdGVzX2dwYygpICkgeyAvLyBJZiBpbiBJbXBvcnRCdWRkeSBtb2RlIEFORCBtYWdpYyBxdW90ZXMgaXMgbm90IG9uLCBkb250IHN0cmlwLiBXUCBlc2NhcGVzIGZvciB1cyBpZiBtYWdpYyBxdW90ZXMgYXJlIG9mZi4KCQkJCXJldHVybiAkX0dFVDsKCQkJfQoJCQlyZXR1cm4gc3RyaXBzbGFzaGVzX2RlZXAoICRfR0VUICk7CgkJfSBlbHNlIHsKCQkJJGdldFZhbHVlID0gJyc7CgkJCWlmICggaXNzZXQoICRfR0VUWyR2YWx1ZV0gKSApIHsKCQkJCSRnZXRWYWx1ZSA9ICRfR0VUWyR2YWx1ZV07CgkJCX0KCQkJaWYgKCBkZWZpbmVkKCAnUEJfU1RBTkRBTE9ORScgKSAmJiAoIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSAmJiAhZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSApIHsgLy8gSWYgaW4gSW1wb3J0QnVkZHkgbW9kZSBBTkQgbWFnaWMgcXVvdGVzIGlzIG5vdCBvbiwgZG9udCBzdHJpcC4gV1AgZXNjYXBlcyBmb3IgdXMgaWYgbWFnaWMgcXVvdGVzIGFyZSBvZmYuCgkJCQlyZXR1cm4gJGdldFZhbHVlOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHN0cmlwc2xhc2hlc19kZWVwKCAkZ2V0VmFsdWUgKTsgLy8gUmVtb3ZlIFdvcmRQcmVzcycgbWFnaWMtcXVvdGVzLXN0eWxlIGVzY2FwaW5nIG9mIGRhdGEuCgkJCX0KCQl9Cgl9IC8vIEVuZCBfR0VUKCkuCgkKCQoJCgkvKglzZWxmOjpnZXRfZ3JvdXAoKQoJICoKCSAqCUdyYWJzICYgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBhIHNwZWNpZmllZCBwb2ludCBpbiB0aGUgb3B0aW9ucyBhcnJheS4KCSAqCUV4IHVzYWdlOiAkZ3JvdXAgPSAmc2VsZjo6Z2V0X2dyb3VwKCAnZ3JvdXBzIycgLiAkX0dFVFsnZWRpdCddICk7CgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCSRzYXZlcG9pbnRfcm9vdAkJUGF0aCBpbiB0aGUgYXJyYXkgdG8gcmV0dXJuIGEgcmVmZXJlbmNlIHRvLgoJICoJCQkJCQkJCQkJCUV4OiBncm91cHMjNSB3aWxsIGdyYWIgc2VsZjo6JG9wdGlvbnNbJ2dyb3VwcyddWzVdCgkgKglAcmV0dXJuCQltaXhlZAkJCQkJCVZhbHVlIHdpdGhpbiB0aGUgYXJyYXkgYXQgdGhlIHNwZWNpZmllZCBwb2ludC4KCSAqCQkJCQkJCQkJCQlDYW4gYmUgdXNlZCBhcyBhIHJlZmVyZW5jZS4gU2VlIGV4YW1wbGUgaW4gZGVzY3JpcHRpb24uCgkgKgkJCQkJCQkJCQkJTk9URTogUmV0dXJucyBmYWxzZSBpZiBub3QgZm91bmQuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gJmdldF9ncm91cCggJHNhdmVwb2ludF9yb290ICkgewoJCWlmICggJHNhdmVwb2ludF9yb290ID09ICcnICkgeyAvLyBSb290IHdhcyByZXF1ZXN0ZWQuCgkJCSRyZXR1cm4gPSAmc2VsZjo6JG9wdGlvbnM7CgkJCXJldHVybiAkcmV0dXJuOwoJCX0KCQkKCQkkc2F2ZXBvaW50X3N1YnNlY3Rpb24gPSAmc2VsZjo6JG9wdGlvbnM7CgkJJHNhdmVwb2ludF9sZXZlbHMgPSBleHBsb2RlKCAnIycsICRzYXZlcG9pbnRfcm9vdCApOwoJCWZvcmVhY2ggKCAkc2F2ZXBvaW50X2xldmVscyBhcyAkc2F2ZXBvaW50X2xldmVsICkgewoJCQlpZiAoIGlzc2V0KCAkc2F2ZXBvaW50X3N1YnNlY3Rpb257JHNhdmVwb2ludF9sZXZlbH0gKSApIHsKCQkJCSRzYXZlcG9pbnRfc3Vic2VjdGlvbiA9ICYkc2F2ZXBvaW50X3N1YnNlY3Rpb257JHNhdmVwb2ludF9sZXZlbH07CgkJCX0gZWxzZSB7CgkJCQllY2hvICd7RXJyb3IgIzQ0ODkwNDU6IEludmFsaWQgYXJyYXkgaW4gcGF0aDogYCcgLiAkc2F2ZXBvaW50X3Jvb3QgLiAnYH0nOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkc2F2ZXBvaW50X3N1YnNlY3Rpb247Cgl9IC8vIEVuZCBnZXRfZ3JvdXAoKS4KCQoJCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9mcm9tX2JhY2t1cCgpIHsKCQkvL2Vycm9yX2xvZyggJ0JhY2t1cEJ1ZGR5IHNldHRpbmdzIG1pc3NpbmcvY29ycnVwdC4gQXR0ZW1wdGluZyB0byByZXN0b3JlIGZyb20gc2V0dGluZ3MgYmFja3VwIChpZiBleGlzdHMpLicgKTsKCQkkcmVzdG9yZV9mYWlsX21lc3NhZ2UgPSAnRXJyb3IgIzg0OTM4OTQzOiBZb3VyIEJhY2t1cEJ1ZGR5IFNldHRpbmdzIHdlcmUgZGV0ZWN0ZWQgYXMgbWlzc2luZyBvciBjb3JydXB0LiBCYWNrdXBCdWRkeSBoYXMgYXR0ZW1wdGVkIHRvIGxvYWQgQmFja3VwQnVkZHkgc2V0dGluZ3MgZnJvbSBpdHMgc2V0dGluZ3MgYmFja3VwIGZpbGUgYnV0IGZhaWxlZC4gVmVyaWZ5IHlvdXIgQmFja3VwQnVkZHkgc2V0dGluZ3MgYXJlIHN0aWxsIGludGFjdCBhbmQgdmFsaWQuIFRoaXMgY291bGQgaGF2ZSBiZWVuIGNhdXNlZCBieSBhIGRhdGFiYXNlIGVycm9yIG9yIGNvcnJ1cHRpb24uJzsKCQkkcmVzdG9yZV9zdWNjZXNzX21lc3NhZ2UgPSAnV2FybmluZyAjODk0Mzg0OiBZb3VyIEJhY2t1cEJ1ZGR5IFNldHRpbmdzIHdlcmUgZGV0ZWN0ZWQgYXMgbWlzc2luZyBvciBjb3JydXB0LiBCYWNrdXBCdWRkeSBoYXMgcmVzdG9yZWQgeW91ciBwcmV2aW91cyBCYWNrdXBCdWRkeSBzZXR0aW5ncyBmcm9tIGl0cyBzZXR0aW5ncyBiYWNrdXAgZmlsZS4gUGxlYXNlIHZlcmlmeSB5b3VyIHJlc3RvcmVkIEJhY2t1cEJ1ZGR5IHNldHRpbmdzIGxvb2sgb2theS4gVGhpcyBjb3VsZCBoYXZlIGJlZW4gY2F1c2VkIGJ5IGEgZGF0YWJhc2UgZXJyb3Igb3IgY29ycnVwdGlvbi4nOwoJCQoJCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2NsYXNzZXMvY29yZS5waHAnICk7CgkJJGJhY2t1cF9kaXIgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKTsKCQkkZXhpc3RpbmdfYmFja3VwcyA9IGdsb2IoICRiYWNrdXBfZGlyIC4gJ3NldHRpbmdzX2JhY2t1cC0qLnBocCcgKTsKCQlpZiAoICggISBpc19hcnJheSggJGV4aXN0aW5nX2JhY2t1cHMgKSApIHx8ICggY291bnQoICRleGlzdGluZ19iYWNrdXBzICkgPCAxICkgKSB7IC8vIE5vIGJhY2t1cHMgc28ganVzdCBsb2FkIGRlZmF1bHRzLiBNYXkgYmUgYSBuZXcgaW5zdGFsbC4KCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQlpZiAoIGZhbHNlID09PSAoICRzZXR0aW5ncyA9IEBmaWxlX2dldF9jb250ZW50cyggJGV4aXN0aW5nX2JhY2t1cHNbMF0gKSApICkgewoJCQliYWNrdXBidWRkeV9jb3JlOjptYWlsX2Vycm9yKCAkcmVzdG9yZV9mYWlsX21lc3NhZ2UgLiAnIERldGFpbHM6IFVuYWJsZSB0byBvcGVuL3JlYWQgYmFja3VwIGZpbGUgdGhhdCB3YXMgZm91bmQuJyApOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCS8vIFNraXAgZmlyc3QgbGluZS4KCQkkc2Vjb25kX2xpbmVfcG9zID0gc3RycG9zKCAkc2V0dGluZ3MsICJcbiIgKSArIDE7CgkJJHNldHRpbmdzID0gc3Vic3RyKCAkc2V0dGluZ3MsICRzZWNvbmRfbGluZV9wb3MgKTsKCQkKCQkvLyBEZWNvZGUgYmFjayBpbnRvIGFuIGFycmF5LgoJCSRzZXR0aW5ncyA9IHVuc2VyaWFsaXplKCBiYXNlNjRfZGVjb2RlKCAkc2V0dGluZ3MgKSApOwoJCQoJCWlmICggaXNfYXJyYXkoICRzZXR0aW5ncyApICYmICggaXNzZXQoICRzZXR0aW5nc1snZGF0YV92ZXJzaW9uJ10gKSApICkgeyAvLyBHb29kIHJlc3RvcmUuCgkJCS8vZXJyb3JfbG9nKCAnQmFja3VwQnVkZHkgc2V0dGluZ3MgcmVzdG9yZWQuJyApOwoJCQlyZXR1cm4gJHNldHRpbmdzOwoJCX0gZWxzZSB7IC8vIFJlc3RvcmUgZmFpbGVkLiBCYWQgZGF0YSEKCQkJZXJyb3JfbG9nKCAnQmFja3VwQnVkZHkgc2V0dGluZ3MgZmFpbGVkIHJlc3RvcmUuJyApOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCQoJCQoJfSAvLyBFbmQgbG9hZF9mcm9tX2JhY2t1cCgpLgoJCgkKCS8qCXNlbGY6OmxvYWQoKQoJICoJCgkgKglMb2FkcyB0aGUgcGx1Z2luIG9wdGlvbnMgYXJyYXkgY29udGFpbmluZyBhbGwgdXNlci1jb25maWd1cmFibGUgb3B0aW9ucywgZXRjLgoJICoJQWNjZXNzIG9wdGlvbnMgdmlhIHNlbGY6OiRvcHRpb25zLiBCeXBhc3NlcyBXUCBvcHRpb25zIGNhY2hpbmcgZm9yIHJlbGlhYmlsaXR5LgoJICoJCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZCggJHJldHJ5X2RiID0gdHJ1ZSApIHsKCQlpZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSB7IC8vIFN0YW5kYWxvbmUgZnJhbWV3b3JrIG1vZGUgKG91dHNpZGUgV29yZFByZXNzKS4KCQkJLy8gTG9hZCBvcHRpb25zIGZyb20gZmlsZSBpZiBpdCBleGlzdHMuCgkJCSRkYXRfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvX3NldHRpbmdzX2RhdC5waHAnOwoJCQlpZiAoIGZpbGVfZXhpc3RzKCAkZGF0X2ZpbGUgKSApIHsKCQkJCSRvcHRpb25zID0gZmlsZV9nZXRfY29udGVudHMoICRkYXRfZmlsZSApOwoJCQkJCgkJCQkvLyBTa2lwIGZpcnN0IGxpbmUuCgkJCQkkc2Vjb25kX2xpbmVfcG9zID0gc3RycG9zKCAkb3B0aW9ucywgIlxuIiApICsgMTsKCQkJCSRvcHRpb25zID0gc3Vic3RyKCAkb3B0aW9ucywgJHNlY29uZF9saW5lX3BvcyApOwoJCQkJCgkJCQkvLyBEZWNvZGUgYmFjayBpbnRvIGFuIGFycmF5LgoJCQkJJG9wdGlvbnMgPSBqc29uX2RlY29kZSggYmFzZTY0X2RlY29kZSggJG9wdGlvbnMgKSwgdHJ1ZSApOwoJCQl9IGVsc2UgeyAvLyBObyBleGlzdGluZyBvcHRpb25zLiBFbXB0eSBvcHRpb25zLgoJCQkJJG9wdGlvbnMgPSBhcnJheSgpOwoJCQl9CgkJCQoJCQkvLyBNZXJnZSBkZWZhdWx0cy4KCQkJJG9wdGlvbnMgPSBhcnJheV9tZXJnZSggKGFycmF5KXNlbGY6OnNldHRpbmdzKCAnZGVmYXVsdF9vcHRpb25zJyApLCAkb3B0aW9ucyApOwoJCQkKCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zID0gJG9wdGlvbnM7CgkJfSBlbHNlIHsgLy8gTm9ybWFsIEJCIGluIFdvcmRQcmVzcy4KCQkJCgkJCXNlbGY6OiRvcHRpb25zID0gc2VsZjo6X2dldF9vcHRpb24oICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApICk7CgkJCS8vc2VsZjo6JG9wdGlvbnMgPSAnJzsgLy8gVGVzdCBkYW1hZ2VkIG9wdGlvbnMuCgkJCQoJCX0KCQkKCQkvLyBNZXJnZSBkZWZhdWx0cyBpbnRvIHRlbXBvcmFyeSAkb3B0aW9ucyB2YXJpYWJsZSBhbmQgc2F2ZSBpZiBpdCBkaWZmZXJzIHdpdGggdGhlIHByZS1tZXJnZSBvcHRpb25zLiBPbmx5IHJldHJpZXMgdGhpcyBvbmNlLgoJCWlmICggKCBlbXB0eSggc2VsZjo6JG9wdGlvbnMgKSB8fCAoICEgaXNzZXQoIHNlbGY6OiRvcHRpb25zWydkYXRhX3ZlcnNpb24nXSApICkgKSAmJiAoIHRydWUgPT09ICRyZXRyeV9kYiApICkgeyAvLyBJZiBlbXB0eSBvcHRpb25zIG9yIGNvcnJ1cHQuCgkJCWdsb2JhbCAkd3BkYjsKCQkJLy8gSWYgdGhlIGRhdGFiYXNlIGdvZXMgYXdheSBpbiB0aGUgbWlkZGxlIG9mIGEgcXVlcnksIHdhaXQgNSBzZWNvbmRzIGFuZCB0cnkgYWdhaW4uIE90aGVyd2lzZSwgd2UgdW5pbnRlbnRpb25hbGx5IG92ZXJ3cml0ZSB0aGUgc2V0dGluZ3MuCgkJCWlmICggISBlbXB0eSggJHdwZGItPmxhc3RfZXJyb3IgKSAmJiAoIEZBTFNFICE9PSBzdHJwb3MoICR3cGRiLT5sYXN0X2Vycm9yLCAiU0VMRUNUIG9wdGlvbl92YWx1ZSBGUk9NIGAkd3BkYi0+b3B0aW9uc2AgV0hFUkUgb3B0aW9uX25hbWUgPSAncGJfYmFja3VwYnVkZHknIiApICkgKSB7CgkJCQlzbGVlcCggNSApOwoJCQkJc2VsZjo6bG9hZCggJHJldHJ5X2RiID0gZmFsc2UgKTsKCQkJCXJldHVybjsKCQkJfSBlbHNlIHsgLy8gTWlzc2luZyBvciBjb3JydXB0IG9wdGlvbnMgd2hlbiBsb2FkaW5nLiBFaXRoZXIgYSBuZXcgaW5zdGFsbCBvciBzZXR0aW5ncyB3ZW50IG1pc3NpbmcuCgkJCQkKCQkJCS8vIENoZWNrIGZvciBhIHNldHRpbmdzIGJhY2t1cCBhbmQgdHJ5IHRvIGxvYWQgaXQgaWYgd2VyZSBub3QgaW4gYSBzdGFuZGFsb25lIHNjcmlwdAoJCQkJaWYgKCAhIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApIHx8IFBCX1NUQU5EQUxPTkUgPT09IGZhbHNlICkgewoJCQkJCWlmICggZmFsc2UgIT09ICggJHJlc3RvcmVkX3NldHRpbmdzID0gc2VsZjo6bG9hZF9mcm9tX2JhY2t1cCgpICkgKSB7CgkJCQkJCSRvcHRpb25zID0gJHJlc3RvcmVkX3NldHRpbmdzOwoJCQkJCX0gZWxzZSB7IC8vIExvYWQgZGVmYXVsdHMuCgkJCQkJCSRvcHRpb25zID0gKGFycmF5KXNlbGY6OnNldHRpbmdzKCAnZGVmYXVsdF9vcHRpb25zJyApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0gZWxzZSB7IC8vIE5vcm1hbCBtZXJnZS4KCQkJJGRlZmF1bHRzID0gKGFycmF5KXNlbGY6OnNldHRpbmdzKCAnZGVmYXVsdF9vcHRpb25zJyApOwoKCQkJLy8gQXBwbHkgZGVmYXVsdHMuCgkJCSRvcHRpb25zID0gYXJyYXlfbWVyZ2UoICRkZWZhdWx0cywgKGFycmF5KXNlbGY6OiRvcHRpb25zICk7CgkJCS8vc2VsZjo6JG9wdGlvbnNbJ3Byb2ZpbGVzJ10gPSBhcnJheSgpOyAvLyBSZXNldCBwcm9maWxlcy4KCgkJCS8vIEFwcGx5IGRlZmF1bHQgcHJvZmlsZXMuCgkJCSRvcHRpb25zWydwcm9maWxlcyddID0gKGFycmF5KXNlbGY6OiRvcHRpb25zWydwcm9maWxlcyddICsgJGRlZmF1bHRzWydwcm9maWxlcyddOyAvLyBNZXJnZSBhcnJheXMgb24gbnVtZXJpYyBpbmRpY2VzLiBMZWZ0IHNpZGUgaXMgcHJlc2VydmVkIChvcHBvc2l0ZSBvZiBhcnJheV9tZXJnZSgpKS4KCQl9CgkJaWYgKCBzZWxmOjokb3B0aW9ucyAhPT0gJG9wdGlvbnMgKSB7CgkJCXNlbGY6OiRvcHRpb25zID0gJG9wdGlvbnM7CgkJCXNlbGY6OnNhdmUoKTsKCQl9Cgl9IC8vIEVuZCBsb2FkKCkuCgkKCQoJCgkvKglzZWxmOjpfZ2V0X29wdGlvbigpCgkgKgkKCSAqCUJ5cGFzc2VzIFdvcmRQcmVzcyBvcHRpb25zIGNhY2hlLiBVbmZvcnR1bmF0ZWx5IHRoZXJlIGFwcGVhcnMgdG8gYmUgcmFjZSBjb25kaXRpb24gaXNzdWVzIHdpdGggdGhlIGJ1aWx0LWluIFdQIG9wdGlvbnMgc3lzdGVtLgoJICoJVXNlZCBieSBsb2FkKCkgZnVuY3Rpb24gaW50ZXJuYWxseS4gVGFrZW4gYW5kIG1vZGlmaWVkIGZyb20gV29yZFByZXNzIGNvcmUuCgkgKglAc2VlIGxvYWQoKQoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJG9wdGlvbgkJT3B0aW9uIG5hbWUuCgkgKglAcGFyYW0JCW1peGVkCQkkZGVmYXVsdAlkZWZhdWx0ID0gZmFsc2U7IHdlIGRvIG5vdCB1c2UgdGhpcy4KCSAqCUByZXR1cm4JCW1peGVkCQkJCQlTYXZlZCBvcHRpb24gdmFsdWUuCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9nZXRfb3B0aW9uKCAkb3B0aW9uLCAkZGVmYXVsdCA9IGZhbHNlICkgewoJCWdsb2JhbCAkd3BkYjsKCgkJJG9wdGlvbiA9IHRyaW0oJG9wdGlvbik7CgkJaWYgKCBlbXB0eSgkb3B0aW9uKSApCgkJCXJldHVybiBmYWxzZTsKCgkJaWYgKCBkZWZpbmVkKCAnV1BfU0VUVVBfQ09ORklHJyApICkKCQkJcmV0dXJuIGZhbHNlOwoKCQkkYmFzZV9wcmVmaXggPSAkd3BkYi0+YmFzZV9wcmVmaXg7CgkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCAkd3BkYi0+cHJlcGFyZSggIlNFTEVDVCBvcHRpb25fdmFsdWUgRlJPTSB7JGJhc2VfcHJlZml4fW9wdGlvbnMgV0hFUkUgb3B0aW9uX25hbWUgPSAlcyBMSU1JVCAxIiwgJG9wdGlvbiApICk7CgoJCS8vIEhhcyB0byBiZSBnZXRfcm93IGluc3RlYWQgb2YgZ2V0X3ZhciBiZWNhdXNlIG9mIGZ1bmtpbmVzcyB3aXRoIDAsIGZhbHNlLCBudWxsIHZhbHVlcwoJCWlmICggaXNfb2JqZWN0KCAkcm93ICkgKSB7CgkJCSR2YWx1ZSA9ICRyb3ctPm9wdGlvbl92YWx1ZTsKCQl9IGVsc2UgewoJCQkkdmFsdWUgPSAkZGVmYXVsdDsKCQl9CgoJCS8vIElmIGhvbWUgaXMgbm90IHNldCB1c2Ugc2l0ZXVybC4KCQlpZiAoICdob21lJyA9PSAkb3B0aW9uICYmICcnID09ICR2YWx1ZSApCgkJCXJldHVybiBnZXRfb3B0aW9uKCAnc2l0ZXVybCcgKTsKCgkJaWYgKCBpbl9hcnJheSggJG9wdGlvbiwgYXJyYXkoJ3NpdGV1cmwnLCAnaG9tZScsICdjYXRlZ29yeV9iYXNlJywgJ3RhZ19iYXNlJykgKSApCgkJCSR2YWx1ZSA9IHVudHJhaWxpbmdzbGFzaGl0KCAkdmFsdWUgKTsKCgkJJHZhbHVlID0gbWF5YmVfdW5zZXJpYWxpemUoICR2YWx1ZSApOwoKCQlyZXR1cm4gJHZhbHVlOwoJfSAvLyBFbmQgZ2V0X29wdGlvbigpLgoJCgkKCQoJLyoJc2VsZjo6c2F2ZSgpCgkgKgkKCSAqCVNhdmUgcGx1Z2luIG9wdGlvbnMgdG8gZGF0YWJhc2UuCgkgKgkKCSAqCUByZXR1cm4JCWJvb2xlYW4JCQlUcnVlIGlmIHNhdmUgc3VjY2VlZGVkLCBmYWxzZSBvdGhlcndpc2UuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc2F2ZSgpIHsKCQlpZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSB7CgkJCSRvcHRpb25zX2NvbnRlbnQgPSBiYXNlNjRfZW5jb2RlKCBqc29uX2VuY29kZSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zICkgKTsKCQkJJHJlc3VsdCA9IGZpbGVfcHV0X2NvbnRlbnRzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L19zZXR0aW5nc19kYXQucGhwJywgIjw/cGhwIGRpZSgnPCEtLSAvLyBTaWxlbmNlIGlzIGdvbGRlbi4gLS0+Jyk7ID8+XG4iIC4gJG9wdGlvbnNfY29udGVudCApOwoJCQlpZiAoICRyZXN1bHQgPT09IGZhbHNlICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9CgkKCQlhZGRfc2l0ZV9vcHRpb24oICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApLCBzZWxmOjokb3B0aW9ucywgJycsICdubycpOyAvLyAnTm8nIHByZXZlbnRzIGF1dG9sb2FkIGlmIHdlIHdvbnQgYWx3YXlzIG5lZWQgdGhlIGRhdGEgbG9hZGVkLgoJCXJldHVybiBzZWxmOjpfdXBkYXRlX29wdGlvbiggJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICksIHNlbGY6OiRvcHRpb25zICk7Cgl9IC8vIEVuZCBzYXZlKCkuCgkKCQoJCgkvKglzZWxmOjpfdXBkYXRlX29wdGlvbigpCgkgKgkKCSAqCUJ5cGFzc2VzIFdvcmRQcmVzcyBidWlsdCBpbiB1cGRhdGUgb3B0aW9uIGNhY2hlLiBUYWtlbiBmcm9tIFdvcmRQcmVzcyBjb3JlIGFuZCBtb2RpZmllZC4KCSAqCUBzZWUgc2VsZjo6X2dldF9vcHRpb24oKQoJICoJQHNlZSBzZWxmOjpzYXZlKCkKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJJG9wdGlvbgkJCU9wdGlvbiBuYW1lLgoJICoJQHBhcmFtCQltaXhlZAkkbmV3dmFsdWUJCU5ldyB2YWx1ZSB0byBzYXZlIGludG8gb3B0aW9uLgoJICoJQHJldHVybgkJYm9vbGVhbgkJCQkJVHJ1ZSBvbiBzdWNjZXNzOyBmYWxzZSBvdGhlcndpc2UuCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF91cGRhdGVfb3B0aW9uKCAkb3B0aW9uLCAkbmV3dmFsdWUgKSB7CgkJZ2xvYmFsICR3cGRiOwoKCQkkb3B0aW9uID0gdHJpbSgkb3B0aW9uKTsKCQlpZiAoIGVtcHR5KCRvcHRpb24pICkKCQkJcmV0dXJuIGZhbHNlOwoKCQkkb2xkdmFsdWUgPSBnZXRfb3B0aW9uKCAkb3B0aW9uICk7CgkJaWYgKCBmYWxzZSA9PT0gJG9sZHZhbHVlICkgewoJCQlyZXR1cm4gYWRkX29wdGlvbiggJG9wdGlvbiwgJG5ld3ZhbHVlICk7CgkJfSBlbHNlIHsKCQkJJG5ld3ZhbHVlID0gc2FuaXRpemVfb3B0aW9uKCAkb3B0aW9uLCAkbmV3dmFsdWUgKTsKCQkJJG5ld3ZhbHVlID0gbWF5YmVfc2VyaWFsaXplKCAkbmV3dmFsdWUgKTsKCQkJJHJlc3VsdCA9ICR3cGRiLT51cGRhdGUoICR3cGRiLT5vcHRpb25zLCBhcnJheSggJ29wdGlvbl92YWx1ZScgPT4gJG5ld3ZhbHVlICksIGFycmF5KCAnb3B0aW9uX25hbWUnID0+ICRvcHRpb24gKSApOwoJCQkKCQkJaWYgKCAkcmVzdWx0ICkgcmV0dXJuIHRydWU7CgkJfQoKCQlyZXR1cm4gZmFsc2U7Cgl9IC8vIEVuZCBfdXBkYXRlX29wdGlvbigpLgoJCgkKCQoJLyoqCgkgKglhbnRpX2RpcmVjdG9yeV9icm93c2luZygpCgkgKgoJICoJSGVscHMgc2VjdXJpdHkgYnkgYXR0ZW1wdGluZyB0byBibG9jayBkaXJlY3RvcnkgYnJvd3NpbmcgYnkgY3JlYXRpbmcKCSAqCWJvdGggaW5kZXguaHRtIGZpbGVzIGFuZCAuaHRhY2Nlc3MgZmlsZXMgdHVybmluZyBicm93c2luZyBvZmYuCgkgKgoJICoJQHBhcmFtCQlzdHJpbmcJCSRkaXJlY3RvcnkJCUZ1bGwgYWJzb2x1dGUgcGFzcyB0byBpbnNlcnQgYW50aS1kaXJlY3RvcnktYnJvd3NpbmcgZmlsZXMgaW50by4gTm8gdHJhaWxpbmcgc2xhc2guCgkgKglAcGFyYW0JCWJvb2wJCSRkZW55X2FsbAkJV2hlbiB0cnVlIGFsc28gZW5mb3JjZSBkZW55aW5nIEFMTCB3ZWItYmFzZWQgYWNjZXNzIHRvIGRpcmVjdG9yeS4gZGVmYXVsdCBmYWxzZQoJICoJQHJldHVybgkJYm9vbGVhbgkJCQkJCVRydWUgb24gc3VjY2VzcyBzZWN1cmluZyBkaXJlY3RvcnksIGZhbHNlIG90aGVyd2lzZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhbnRpX2RpcmVjdG9yeV9icm93c2luZyggJGRpcmVjdG9yeSA9ICcnLCAkZGllX29uX2ZhaWwgPSB0cnVlLCAkZGVueV9hbGwgPSBmYWxzZSwgJHN1cHByZXNzX2FsZXJ0ID0gZmFsc2UgKSB7CgkJCgkJLy8gQ2hlY2sgZGlyZWN0b3J5IGV4aXN0cyAmIGNyZWF0ZSBpZiBpdCBkb2Vzbid0LgoJCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSApICkgewoJCQlpZiAoIHNlbGY6OiRmaWxlc3lzdGVtLT5ta2RpciggJGRpcmVjdG9yeSwgJG1vZGUgPSAwNzU1LCAkcmVjdXJzZSA9IHRydWUgKSA9PT0gZmFsc2UgKSB7CgkJCQkkZXJyb3IgPSAnRXJyb3IgIzkwMDI6IEJhY2t1cEJ1ZGR5IHVuYWJsZSB0byBjcmVhdGUgZGlyZWN0b3J5IGAnIC4gJGRpcmVjdG9yeSAuICdgLiBQbGVhc2UgdmVyaWZ5IHdyaXRlIHBlcm1pc3Npb25zIGZvciB0aGUgcGFyZW50IGRpcmVjdG9yeSBgJyAuIGRpcm5hbWUoICRkaXJlY3RvcnkgKSAuICdgIG9yIG1hbnVhbGx5IGNyZWF0ZSB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeSAmIHNldCBwZXJtaXNzaW9ucy4nOwoJCQkJaWYgKCAkc3VwcHJlc3NfYWxlcnQgIT09IHRydWUgKSB7CgkJCQkJc2VsZjo6YWxlcnQoICRlcnJvciwgdHJ1ZSwgJzkwMDInICk7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGVycm9yICk7CgkJCQl9CgkJCQlpZiAoICRkaWVfb25fZmFpbCA9PT0gdHJ1ZSApIHsKCQkJCQlkaWUoICRlcnJvciApOwoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoJCQoJCS8vIENoZWNrIHdyaXRhYmxlLgoJCWlmICggISBpc193cml0YWJsZSggJGRpcmVjdG9yeSApICkgewoJCQkkZXJyb3IgPSAnRXJyb3IgIzkwMDJkOiBCYWNrdXBCdWRkeSBkaXJlY3RvcnkgYCcgLiAkZGlyZWN0b3J5IC4gJ2AgaXMgaW5kaWNhdGVkIGFzIE5PVCBiZWluZyB3cml0YWJsZS4gUGxlYXNlIHZlcmlmeSB3cml0ZSBwZXJtaXNzaW9ucyBmb3IgaXQgYW5kIHBhcmVudCBkaXJlY3RvcmllcyBhcyBhcHBsaWNhYmxlLic7CgkJCWlmICggJHN1cHByZXNzX2FsZXJ0ICE9PSB0cnVlICkgewoJCQkJc2VsZjo6YWxlcnQoICRlcnJvciwgdHJ1ZSwgJzkwMDInICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkZXJyb3IgKTsKCQkJfQoJCQlpZiAoICRkaWVfb25fZmFpbCA9PT0gdHJ1ZSApIHsKCQkJCWRpZSggJGVycm9yICk7CgkJCX0KCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkvLyAuaHRhY2Nlc3MgY29udGVudHMgZm9yIGRlbnlpbmcuCgkJaWYgKCB0cnVlID09PSAkZGVueV9hbGwgKSB7CgkJCSRkZW55X2FsbCA9ICJcbmRlbnkgZnJvbSBhbGwiOwoJCX0gZWxzZSB7CgkJCSRkZW55X2FsbCA9ICcnOwoJCX0KCQkKCQkKCQkkZXJyb3IgPSAnJzsKCQkKCQkvLyBpbmRleC5waHAKCQlpZiAoICEgZmlsZV9leGlzdHMoICRkaXJlY3RvcnkgLiAnL2luZGV4LnBocCcgKSApIHsKCQkJaWYgKCBmYWxzZSA9PT0gQGZpbGVfcHV0X2NvbnRlbnRzKCAkZGlyZWN0b3J5IC4gJy9pbmRleC5waHAnLCAnPGh0bWw+PC9odG1sPicgKSApIHsKCQkJCSRlcnJvciAuPSAnVW5hYmxlIHRvIHdyaXRlIGluZGV4LnBocCBmaWxlLiAnOwoJCQl9CgkJfQoJCQoJCS8vIGluZGV4Lmh0bQoJCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSAuICcvaW5kZXguaHRtJyApICkgewoJCQlpZiAoIGZhbHNlID09PSBAZmlsZV9wdXRfY29udGVudHMoICRkaXJlY3RvcnkgLiAnL2luZGV4Lmh0bScsICc8aHRtbD48L2h0bWw+JyApICkgewoJCQkJJGVycm9yIC49ICdVbmFibGUgdG8gd3JpdGUgaW5kZXguaHRtIGZpbGUuICc7CgkJCX0KCQl9CgkJCgkJLy8gaW5kZXguaHRtbAoJCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSAuICcvaW5kZXguaHRtbCcgKSApIHsKCQkJaWYgKCBmYWxzZSA9PT0gQGZpbGVfcHV0X2NvbnRlbnRzKCAkZGlyZWN0b3J5IC4gJy9pbmRleC5odG1sJywgJzxodG1sPjwvaHRtbD4nICkgKSB7CgkJCQkkZXJyb3IgLj0gJ1VuYWJsZSB0byB3cml0ZSBpbmRleC5odG1sIGZpbGUuICc7CgkJCX0KCQl9CgkJCgkJLy8gLmh0YWNjZXNzIGlmIHdlIGFyZW4ndCBpbiB0aGUgaW1wb3J0YnVkZHkgc2NyaXB0CgkJaWYgKCAhIGZpbGVfZXhpc3RzKCAkZGlyZWN0b3J5IC4gJy8uaHRhY2Nlc3MnICkgKSB7CgkJCWlmICggZmFsc2UgPT09IEBmaWxlX3B1dF9jb250ZW50cyggJGRpcmVjdG9yeSAuICcvLmh0YWNjZXNzJywgJ09wdGlvbnMgLUluZGV4ZXMnIC4gJGRlbnlfYWxsICkgKSB7CgkJCQkkZXJyb3IgLj0gJ1VuYWJsZSB0byB3cml0ZSAuaHRhY2Nlc3MgZmlsZS4gJzsKCQkJfQoJCX0KCQkKCQlpZiAoICRlcnJvciAhPSAnJyApIHsgLy8gRmFpbHVyZS4KCQkJaWYgKCB0cnVlICE9PSAkc3VwcHJlc3NfYWxlcnQgKSB7CgkJCQkkZXJyb3IgPSAnRXJyb3IgY3JlYXRpbmcgYW50aSBkaXJlY3RvcnkgYnJvd3Npbmcgc2VjdXJpdHkgZmlsZXMgaW4gZGlyZWN0b3J5IGAnIC4gJGRpcmVjdG9yeSAuICdgLiBQbGVhc2UgdmVyaWZ5IHRoaXMgZGlyZWN0b3J5XCdzIHBlcm1pc3Npb25zIGFsbG93IHdyaXRpbmcgJiByZWFkaW5nLiBFcnJvcnM6IGAnIC4gJGVycm9yIC4gJ2AuJzsKCQkJCXNlbGY6OmFsZXJ0KCAkZXJyb3IgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOwoJCQl9CgkJCWlmICggJGRpZV9vbl9mYWlsID09PSB0cnVlICkgewoJCQkJZGllKCAnU2NyaXB0IGhhbHRlZCBmb3Igc2VjdXJpdHkuIFBsZWFzZSB2ZXJpZnkgcGVybWlzc2lvbnMgYW5kIHRyeSBhZ2Fpbi4nICk7CgkJCX0KCQl9IGVsc2UgeyAvLyBTdWNjZXNzLgoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9IC8vIEVuZCBhbnRpX2RpcmVjdG9yeV9icm93c2luZygpLgoJCgkKCQoJLyoJc2V0X3N0YXR1c19zZXJpYWwoKQoJICoJCgkgKglEZWZpbmUgYSBkZWZhdWx0IHNlcmlhbCBmb3IgYWxsIHN1YnNlcXVlbnQgc3RhdHVzKCkgY2FsbHMuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkc2VyaWFsCQlVbmlxdWUgaWRlbnRpZmllciB0byB1c2UgYXMgZGVmYXVsdCBzZXJpYWwuCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc2V0X3N0YXR1c19zZXJpYWwoICRzZXJpYWwgKSB7CgkJCgkJc2VsZjo6JF9zdGF0dXNfc2VyaWFsID0gJHNlcmlhbDsKCQkKCQlyZXR1cm47CgkJCgl9IC8vIEVuZCBzZXRfc3RhdHVzX3NlcmlhbCgpLgoJCgkKCQoJLyoJYWRkX3N0YXR1c19zZXJpYWwoKQoJICoJCgkgKglBZGQgYSBzZXJpYWwgZm9yIGFsbCBzdWJzZXF1ZW50IHN0YXR1cygpIGNhbGxzIHRvIGxvZyB0byBpbiBhZGRpdGlvbiB0byBhbnkgY3VycmVudGx5IGxvZ2dpbmcgc2VyaWFscy4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRzZXJpYWwJCVVuaXF1ZSBpZGVudGlmaWVyIHRvIGFkZCB0byBzZXJpYWxzIHRvIGxvZyB0by4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfc3RhdHVzX3NlcmlhbCggJHNlcmlhbCApIHsKCQkKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdBZGRpbmcgc3RhdHVzIHNlcmlhbCBgJyAuICRzZXJpYWwgLiAnYC4nICk7CgkJaWYgKCBpc19hcnJheSggc2VsZjo6JF9zdGF0dXNfc2VyaWFsICkgKSB7CgkJCXNlbGY6OiRfc3RhdHVzX3NlcmlhbFtdID0gJHNlcmlhbDsKCQl9IGVsc2UgewoJCQlzZWxmOjokX3N0YXR1c19zZXJpYWwgPSBhcnJheSggc2VsZjo6JF9zdGF0dXNfc2VyaWFsLCAkc2VyaWFsICk7CgkJfQoJCQoJCXJldHVybjsKCQkKCX0gLy8gRW5kIGFkZF9zdGF0dXNfc2VyaWFsKCkuCgkKCQoJCgkvKglyZW1vdmVfc3RhdHVzX3NlcmlhbCgpCgkgKgkKCSAqCVJlbW92ZSBhIHNlcmlhbCBmb3IgYWxsIHN1YnNlcXVlbnQgc3RhdHVzKCkgY2FsbHMgdG8gbG9nIHRvIGluIGFkZGl0aW9uIHRvIGFueSBjdXJyZW50bHkgbG9nZ2luZyBzZXJpYWxzLgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHNlcmlhbAkJVW5pcXVlIGlkZW50aWZpZXIgdG8gcmVtb3ZlIGZyb20gc2VyaWFscyB0byBsb2cgdG8uCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmVtb3ZlX3N0YXR1c19zZXJpYWwoICRzZXJpYWwgKSB7CgkJCgkJaWYgKCBpc19hcnJheSggc2VsZjo6JF9zdGF0dXNfc2VyaWFsICkgKSB7IC8vIGFycmF5CgkJCWZvcmVhY2goIHNlbGY6OiRfc3RhdHVzX3NlcmlhbCBhcyAkaSA9PiAkdGhpc19zZXJpYWwgKSB7CgkJCQlpZiAoICR0aGlzX3NlcmlhbCA9PSAkc2VyaWFsICkgewoJCQkJCXVuc2V0KCBzZWxmOjokX3N0YXR1c19zZXJpYWxbJGldICk7CgkJCQkJcmV0dXJuOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsgLy8gc3RyaW5nCgkJCWlmICggc2VsZjo6JF9zdGF0dXNfc2VyaWFsID09ICRzZXJpYWwgKSB7CgkJCQlzZWxmOjokX3N0YXR1c19zZXJpYWwgPT0gJyc7CgkJCX0KCQl9CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUmVtb3ZlZCBzdGF0dXMgc2VyaWFsIGAnIC4gJHNlcmlhbCAuICdgLicgKTsKCQkKCQlyZXR1cm47CgkJCgl9IC8vIEVuZCByZW1vdmVfc3RhdHVzX3NlcmlhbCgpLgoJCgkKCQoJLyoJZ2V0X3N0YXR1c19zZXJpYWwoKQoJICoJCgkgKglHZXQgY3VycmVudCBzZXJpYWwgc3RhdHVzIGxvZ3MgYXJlIGdvaW5nIHRvLgoJICoJCgkgKglAcmV0dXJuCQlzdHJpbmcJCSRzZXJpYWwJCUN1cnJlbnQgc2VyaWFsIHNldC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfc3RhdHVzX3NlcmlhbCgpIHsKCQkKCQlyZXR1cm4gc2VsZjo6JF9zdGF0dXNfc2VyaWFsOwoJCQoJfSAvLyBFbmQgZ2V0X3N0YXR1c19zZXJpYWwoKS4KCQoJCgkKCS8qKgoJICoJc2VsZjo6c3RhdHVzKCkKCSAqCgkgKglMb2dzIGRhdGEgdG8gYSBDU1YgZmlsZS4gT3B0aW9uYWwgdW5pcXVlIHNlcmlhbCBpZGVudGlmaWVyLgoJICoJSWYgYSBzZXJpYWwgaXMgcGFzc2VkIHRoZW4gRVZFUllUSElORyB3aWxsIGJlIGxvZ2dlZCB0byB0aGUgc3BlY2lmaWVkIHNlcmlhbCBmaWxlIGluIGFkZGl0aW9uIHRvIHdoYXRldmVyIChpZiBhbnl0aGluZykgaXMgbG9nZ2VkIHRvIG1haW4gc3RhdHVzIGZpbGUuCgkgKglBbHdheXMgbG9ncyB0byBtYWluIHN0YXR1cyBmaWxlIGJhc2VkIG9uIGxvZ2dpbmcgc2V0dGluZ3Mgd2hldGhlciBzZXJpYWwgaXMgcGFzc2VkIG9yIG5vdC4KCSAqCU5PVEU6IFdoZW4gZnVsbCBsb2dnaW5nIGlzIG9uIEFORCBhIHNlcmlhbCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgd3JpdHRlbiB0byBhIF9zdW1fIHRleHQgZmlsZSBpbnN0ZWFkIG9mIHRoZSBtYWluIGxvZyBmaWxlLgoJICoKCSAqCUBzZWUgc2VsZjo6Z2V0X3N0YXR1cygpLgoJICoKCSAqCUBwYXJhbQlzdHJpbmcJCQkkdHlwZQkJVmFsaWQgdHlwZXM6IGVycm9yLCB3YXJuaW5nLCBkZXRhaWxzLCBtZXNzYWdlCgkgKglAcGFyYW0Jc3RyaW5nCQkJJHRleHQJCVRleHQgbWVzc2FnZSB0byBsb2cuCgkgKglAcGFyYW0Jc3RyaW5nCQkJJHNlcmlhbAkJT3B0aW9uYWwuIE9wdGlvbmFsIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHBsdWdpbidzIG1lc3NhZ2UuIFN0YXR1cyBtZXNzYWdlcyBhcmUgdW5pcXVlIHBlciBwbHVnaW4gc28gdGhpcyBhZGRzIGFuIGFkZGl0aW9uYWwgdW5pcXVlIGxheWVyIGZvciByZXRyaWV2YWwuCgkgKgkJCQkJCQkJCQlJZiBzZWxmOjokX3N0YXR1c19zZXJpYWwgaGFzIGJlZW4gc2V0IGJ5IHNldF9zdGF0dXNfc2VyaWFsKCkgdGhlbiBpdCB3aWxsIG92ZXJyaWRlIGlmICRzZXJpYWwgaXMgYmxhbmsuCgkgKglAcmV0dXJuCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzdGF0dXMoICR0eXBlLCAkbWVzc2FnZSwgJHNlcmlhbHMgPSAnJywgJGpzX21vZGUgPSBmYWxzZSwgJGVjaG9Ob3RXcml0ZSA9IGZhbHNlICkgewoJCQoJCWlmICggISBjbGFzc19leGlzdHMoICdiYWNrdXBidWRkeV9jb3JlJyApICkgewoJCQlyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL2NvcmUucGhwJyApOwoJCX0KCQkKCQlpZiAoICEgaXNzZXQoIHNlbGY6OiRvcHRpb25zWydsb2dfbGV2ZWwnXSApICkgeyAvLyBJZiBzZXR0aW5ncyBhcmUgY29ycnVwdGVkIGRlZmF1bHQgdG8gbm8gbG9nZ2luZy4KCQkJc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddID0gMDsKCQl9CgkJCgkJaWYgKCAoIHNlbGY6OiRfc3RhdHVzX3NlcmlhbCAhPSAnJyApICYmICggJHNlcmlhbHMgPT0gJycgKSApIHsKCQkJJHNlcmlhbHMgPSBzZWxmOjokX3N0YXR1c19zZXJpYWw7CgkJfQoJCQoJCWlmICggZGVmaW5lZCggJ0JBQ0tVUEJVRERZX1dQX0NMSScgKSAmJiAoIHRydWUgPT09IEJBQ0tVUEJVRERZX1dQX0NMSSApICkgewoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ1dQX0NMSScgKSApIHsKCQkJCVdQX0NMSTo6bGluZSggJHR5cGUgLiAnIC0gJyAuICRtZXNzYWdlICk7CgkJCX0KCQl9CgkJCgkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSB1bmlxdWUgbG9nIHNlcmlhbCBmb3IgYWxsIGxvZ3MgZm9yIHNlY3VyaXR5LgoJCWlmICggISBpc3NldCggc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSApIHx8ICggc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSA9PSAnJyApICkgewoJCQlzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddID0gc2VsZjo6cmFuZG9tX3N0cmluZyggMTUgKTsKCQkJc2VsZjo6c2F2ZSgpOwoJCX0KCQkKCQlpZiAoICEgaXNfYXJyYXkoICRzZXJpYWxzICkgKSB7CgkJCSRzZXJpYWxzID0gYXJyYXkoICRzZXJpYWxzICk7CgkJfQoJCQoJCS8vIENhbGN1bGF0ZSBsb2cgZGlyZWN0b3J5LgoJCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7IC8vIEFsc28gaGFuZGxlcyB3aGVuIHdpdGhpbiBpbXBvcnRidWRkeS4KCQkKCQkvLyBQcmVwYXJlIGRpcmVjdG9yeSBmb3IgbG9nIGZpbGVzLiBSZXR1cm4gaWYgdW5hYmxlIHRvIGRvIHNvLgoJCWlmICggdHJ1ZSA9PT0gc2VsZjo6JF9za2lwbG9nICkgeyAvLyBib29sIHRydWUgc28gc2tpcC4KCQkJcmV0dXJuOwoJCX0gZWxzZWlmKCBmYWxzZSAhPT0gc2VsZjo6JF9za2lwbG9nICkgeyAvLyBzb21ldGhpbmcgb3RoZXIgdGhhbiBib29sIGZhbHNlIHNvIGNoZWNrIGRpcmVjdG9yeSBiZWZvcmUgcHJvY2VlZGluZy4KCQkJaWYgKCB0cnVlICE9PSBzZWxmOjphbnRpX2RpcmVjdG9yeV9icm93c2luZyggJGxvZ19kaXJlY3RvcnksICRkaWVfb25fZmFpbCA9IGZhbHNlLCAkZGVueV9hbGwgPSBmYWxzZSwgJHN1cHByZXNzX2FsZXJ0ID0gdHJ1ZSApICkgeyAvLyBVbmFibGUgdG8gc2VjdXJlIGRpcmVjdG9yeS4gRmFpbC4KCQkJCXNlbGY6OiRfc2tpcGxvZyA9IHRydWU7CgkJCQlyZXR1cm47CgkJCX0gZWxzZSB7CgkJCQlzZWxmOjokX3NraXBsb2cgPSBmYWxzZTsKCQkJfQoJCX0KCQkKCQlmb3JlYWNoKCAkc2VyaWFscyBhcyAkc2VyaWFsICkgewoJCQkKCQkJLy8gSW1wb3J0QnVkZHkgYWx3YXlzIHdyaXRlIHRvIG1haW4gc3RhdHVzIGxvZy4KCQkJaWYgKCBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgJiYgKCBQQl9JTVBPUlRCVUREWSA9PT0gdHJ1ZSApICkgeyAvLyBJTVBPUlRCVUREWQoJCQkJCgkJCQkkd3JpdGVfc2VyaWFsID0gZmFsc2U7CgkJCQkkd3JpdGVfbWFpbiA9IHRydWU7CgkJCQkkbWFpbl9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoJCQkJCgkJCX0gZWxzZSB7IC8vIFNUQU5EQUxPTkUuCgkJCQkKCQkJCS8vIERldGVybWluZSB3aGV0aGVyIHdyaXRpbmcgdG8gbWFpbiBleHRyYW5lb3VzIGxvZyBmaWxlLgoJCQkJJHdyaXRlX21haW4gPSBmYWxzZTsKCQkJCWlmICggc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddID09IDAgKSB7IC8vIE5vIGxvZ2dpbmcuCgkJCQkJCSR3cml0ZV9tYWluID0gZmFsc2U7CgkJCQl9IGVsc2VpZiAoIHNlbGY6OiRvcHRpb25zWydsb2dfbGV2ZWwnXSA9PSAxICkgeyAvLyBFcnJvcnMgb25seS4KCQkJCQlpZiAoICR0eXBlID09ICdlcnJvcicgKSB7CgkJCQkJCSR3cml0ZV9tYWluID0gdHJ1ZTsKCQkJCQkJc2VsZjo6bG9nKCAnWycgLiAkc2VyaWFsIC4gJ10gJyAuICRtZXNzYWdlLCAnZXJyb3InICk7CgkJCQkJfQoJCQkJfSBlbHNlIHsgLy8gRXZlcnl0aGluZyBlbHNlLgoJCQkJCSR3cml0ZV9tYWluID0gdHJ1ZTsKCQkJCQlpZiAoIGlzX2FycmF5KCAkc2VyaWFsICkgKSB7CgkJCQkJCS8vZXJyb3JfbG9nKCBwcmludF9yKCAkc2VyaWFsLCB0cnVlICkgKTsKCQkJCQl9CgkJCQkJc2VsZjo6bG9nKCAnWycgLiAkc2VyaWFsIC4gJ10gJyAuICRtZXNzYWdlLCAkdHlwZSApOwoJCQkJfQoJCQkJCgkJCQkvLyBEZXRlcm1pbmUgd2hpY2ggbm9ybWFsIHN0YXR1cyBsb2cgZmlsZXMgdG8gd3JpdGUuCgkJCQlpZiAoICRzZXJpYWwgIT0gJycgKSB7CgkJCQkJJHdyaXRlX3NlcmlhbCA9IHRydWU7CgkJCQkJJHdyaXRlX21haW4gPSBmYWxzZTsKCQkJCQkvL2Vycm9yX2xvZyggJ3NlcmlhbDogJyAuICRzZXJpYWwgKTsKCQkJCQlpZiAoICggZmFsc2UgPT09IHN0cmlzdHIoICRzZXJpYWwsICdyZW1vdGVfc2VuZC0nICkgKSAmJiAoIGZhbHNlID09PSBzdHJpc3RyKCAkc2VyaWFsLCAnbGl2ZV9wZXJpb2RpYycgKSApICkgeyAvLyBPbmx5IHdyaXRlIHN1bSBmaWxlIGlmIE5PVCBhIHJlbW90ZSBzZW5kIGFuZCBOT1QgTGl2ZSBsb2cuCgkJCQkJCSR3cml0ZV9tYWluID0gdHJ1ZTsKCQkJCQkJJG1haW5fZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ3N0YXR1cy0nIC4gJHNlcmlhbCAuICdfc3VtXycgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJJHdyaXRlX3NlcmlhbCA9IGZhbHNlOwoJCQkJCSR3cml0ZV9tYWluID0gZmFsc2U7CgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJCgkJCS8vIEZ1bmN0aW9uIGZvciB3cml0aW5nIGFjdHVhbCBsb2cgQ1NWIGRhdGEuIFVzZWQgbGF0ZXIuCgkJCWlmICggISBmdW5jdGlvbl9leGlzdHMoICd3cml0ZV9zdGF0dXNfbGluZScgKSApIHsKCQkJCWZ1bmN0aW9uIHdyaXRlX3N0YXR1c19saW5lKCAkZmlsZSwgJGNvbnRlbnRfYXJyYXksICRlY2hvTm90V3JpdGUgKSB7CgkJCQkJJHdyaXRlRGF0YSA9IGpzb25fZW5jb2RlKCAkY29udGVudF9hcnJheSApIC4gUEhQX0VPTDsKCQkJCQlpZiAoIHRydWUgPT09ICRlY2hvTm90V3JpdGUgKSB7IC8vIGVjaG8gZGF0YSBpbnN0ZWFkIG9mIHdyaXRpbmcgdG8gZmlsZS4gdXNlZCBieSBhamF4IHdoZW4gY2hlY2tpbmcgc3RhdHVzIGxvZyBhbmQgbmVlZGluZyB0byBwcmVwZW5kIGJlZm9yZSBsb2cuCgkJCQkJCWVjaG8gJHdyaXRlRGF0YTsKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyRkZWxpbWl0ZXIgPSAnfH58JzsKCQkJCQkJaWYgKCBmYWxzZSAhPT0gKCAkZmlsZV9oYW5kbGUgPSBAZm9wZW4oICRmaWxlLCAnYScpICkgKSB7IC8vIEFwcGVuZCBtb2RlLgoJCQkJCQkJLy9mcHV0Y3N2ICggJGZpbGVfaGFuZGxlICwgJGNvbnRlbnRfYXJyYXkgKTsKCQkJCQkJCS8vQGZ3cml0ZSggJGZpbGVfaGFuZGxlLCB0cmltKCBpbXBsb2RlKCAkZGVsaW1pdGVyLCAkY29udGVudF9hcnJheSApICkgLiBQSFBfRU9MICk7CgkJCQkJCQlAZndyaXRlKCAkZmlsZV9oYW5kbGUsICR3cml0ZURhdGEgKTsKCQkJCQkJCUBmY2xvc2UoICRmaWxlX2hhbmRsZSApOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJLy9wYl9iYWNrdXBidWRkeTo6YWxlcnQoICdVbmFibGUgdG8gb3BlbiBmaWxlIGhhbmRsZXIgZm9yIHN0YXR1cyBmaWxlIGAnIC4gJGZpbGUgLiAnYC4gVW5hYmxlIHRvIHdyaXRlIHN0YXR1cyBsb2cuJyApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJCQoJCQkkY29udGVudF9hcnJheSA9IGFycmF5KAoJCQkJJ2V2ZW50JwkJPT4gJHR5cGUsCgkJCQkndGltZScJCT0+IHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5sb2NhbGl6ZV90aW1lKCB0aW1lKCkgKSwgLy8gVGltZSB0aGlzIGhhcHBlbmVkLgoJCQkJJ3UnCQkJPT4gc3Vic3RyKChzdHJpbmcpbWljcm90aW1lKCksIDIsIDIpLAoJCQkJJ3J1bicJCT0+IHNwcmludGYoICIlMDEuMmYiLCByb3VuZCAoIG1pY3JvdGltZSggdHJ1ZSApIC0gc2VsZjo6JHN0YXJ0X3RpbWUsIDIgKSApLCAvLyBFbGFwc2VkIFBIUCB0aW1lLgoJCQkJJ21lbScJCT0+IHNwcmludGYoICIlMDEuMmYiLCByb3VuZCggbWVtb3J5X2dldF91c2FnZSgpIC8gMTA0ODU3NiwgMiApICksIC8vIE1lbW9yeSB1c2VkLglQcmUtNy4wIHdhczogbWVtb3J5X2dldF9wZWFrX3VzYWdlKCkuCgkJCQknZGF0YScJCT0+IHN0cl9yZXBsYWNlKCBjaHIoOSksICcgICAnLCAkbWVzc2FnZSApLCAvLyBCb2R5IG9mIHRoZSBtZXNzYWdlLgoJCQkpOwoJCQkKCQkJLyoqKioqKioqKiogTUFJTiBMT0cgRklMRSBvciBTVU0gRklMRSAqKioqKioqKioqLwoJCQlpZiAoICR3cml0ZV9tYWluID09PSB0cnVlICkgeyAvLyBXUklURSBUTyBNQUlOIExPRyBGSUxFIG9yIFNVTSBGSUxFLgoJCQkJd3JpdGVfc3RhdHVzX2xpbmUoICRtYWluX2ZpbGUsICRjb250ZW50X2FycmF5LCAkZWNob05vdFdyaXRlICk7CgkJCX0KCQkJCgkJCS8qKioqKioqKioqIFNFUklBTCBMT0cgRklMRSAqKioqKioqKioqLwoJCQlpZiAoICR3cml0ZV9zZXJpYWwgPT09IHRydWUgKSB7CgkJCQkkc2VyaWFsX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdzdGF0dXMtJyAuICRzZXJpYWwgLiAnXycgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoJCQkJd3JpdGVfc3RhdHVzX2xpbmUoICRzZXJpYWxfZmlsZSwgJGNvbnRlbnRfYXJyYXksICRlY2hvTm90V3JpdGUgKTsKCQkJfQoJCQkKCQkJLy8gT3V0cHV0IGltcG9ydGJ1ZGR5IHN0YXR1cyBsb2cgdG8gc2NyZWVuLgoJCQlnbG9iYWwgJHBiX2JhY2t1cGJ1ZGR5X2pzX3N0YXR1czsKCQkJaWYgKCAoIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIGlzc2V0KCAkcGJfYmFja3VwYnVkZHlfanNfc3RhdHVzICkgJiYgKCAkcGJfYmFja3VwYnVkZHlfanNfc3RhdHVzID09PSB0cnVlICkgKSApICYmICggJ3RydWUnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCdkZXBsb3knKSApICkgeyAvLyBJZiBpbXBvcnRidWRkeSwganMgbW9kZSwgYW5kIG5vdCBhIGRlcGxveW1lbnQuCgkJCQllY2hvICc8c2NyaXB0PnBiX3N0YXR1c19hcHBlbmQoICcgLiBqc29uX2VuY29kZSggJGNvbnRlbnRfYXJyYXkgKSAuICcgKTs8L3NjcmlwdD4nIC4gIlxuIjsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpmbHVzaCgpOwoJCQl9CgkJCQoJCX0gLy8gZW5kIGZvcmVhY2ggJHNlcmlhbHMuCgkJCgkJCgl9IC8vIEVuZCBzdGF0dXMoKS4KCQkKCQoJCgkvKglzZWxmOjpnZXRfc3RhdHVzKCkKCSAqCQoJICoJR2V0cyBhbGwgc3RhdHVzIGluZm9ybWF0aW9uIGxvZ2dlZCB2aWEgc3RhdHVzKCkuIFJldHVybnMgYW4gYXJyYXkgb2YgYXJyYXlzIHdpdGggbG9nZ2VkIGRhdGEuCgkgKglSZXR1cm4gZm9ybWF0OiBhcnJheSgKCSAqCQkJCQlhcnJheSggVElNRVNUQU1QLCBUSU1FX0lOLCBQRUFLX01FTU9SWSwgVFlQRSwgTUVTU0FHRSApLAoJICoJCQkJCWFycmF5KCBUSU1FU1RBTVAsIFRZUEUsIE1FU1NBR0UgKSwKCSAqCQkJCSkKCSAqCgkgKglAc2VlIHNlbGY6OnN0YXR1cygpLgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHNlcmlhbAkJCQkJVW5pcXVlIGlkZW50aWZpZXIuIFJldHJpZXZlcyBhIHN1YnNldCBvZiBsb2dnZWQgaW5mb3JtYXRpb24gYmFzZWQgb24gdGhpcyB1bmlxdWUgSUQgdGhhdCB3YXMgcGFzc2VkIHRvIHN0YXR1cygpIHdoZW4gbG9nZ2luZy4KCSAqCUBwYXJhbQkJYm9vbGVhbgkJJGNsZWFyX3JldHJpZXZlZAkJRGVmYXVsdDogdHJ1ZS4gT24gdHJ1ZSBzdGF0dXMgaW5mb3JtYXRpb24gd2lsbCBiZSBwdXJnZWQgYWZ0ZXIgcmV0cmlldmFsLgoJICoJQHBhcmFtCQlib29sZWFuCQkkZXJhc2VfcmV0cmlldmVkCQlEZWZhdWx0OiB0cnVlLiBXaGV0aGVyIG9yIG5vdCB0byBkZWxldGUgbG9nIGZpbGUgb24gcmV0cmlldmFsLiBOT1RFOiBQQ0xaaXAgY2FuIE5PVCBsb3NlIGZpbGVzIG1pZC1iYWNrdXAgc28gbG9nIGZpbGVzIGNhbm5vdCBkZWxldGUgbWlkLXppcC4KCSAqCUBwYXJhbQkJYm9vbGVhbgkJJGhpZGVfZ2V0dGluZ19zdGF0dXMJRGVmYXVsdDogZmFsc2UuIFdoZXRoZXIgb3Igbm90IHRvIG91dHB1dCBzdGF0dXMgcmV0cmlldmFsIG1lc3NhZ2UuCgkgKglAcmV0dXJuCQlhcnJheQkJCQkJCQkJQXJyYXkgb2YgYXJyYXlzLiAgRWFjaCBzdWItYXJyYXkgY29udGFpbnMgdGhyZWUgdmFsdWVzOiB0aW1lc3RhbXAsIHR5cGUgb2YgbWVzc2FnZSwgYW5kIHRoZSBtZXNzYWdlIGl0c2VsZi4gU2VlIGZ1bmN0aW9uIGRlc2NyaXB0aW9uIGZvciBkZXRhaWxzLiBFbXB0eSBhcnJheSBpZiBub24tZXhpc3RpbmcgbG9nLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldF9zdGF0dXMoICRzZXJpYWwgPSAnJywgJGNsZWFyX3JldHJpZXZlZCA9IHRydWUsICRlcmFzZV9yZXRyaWV2ZWQgPSB0cnVlLCAkaGlkZV9nZXR0aW5nX3N0YXR1cyA9IGZhbHNlLCAkY29weV9yZXRyaWV2ZWQgPSBmYWxzZSApIHsKCQkvLyRkZWxpbWl0ZXIgPSAnfH58JzsKCQkKCQkvLyBDYWxjdWxhdGUgbG9nIGRpcmVjdG9yeS4KCQkkbG9nX2RpcmVjdG9yeSA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpOyAvLyBBbHNvIGhhbmRsZXMgd2hlbiBpbXBvcnRidWRkeS4KCQkKCQkkc3RhdHVzX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdzdGF0dXMtJzsKCQlpZiAoICRzZXJpYWwgIT0gJycgKSB7CgkJCSRzdGF0dXNfZmlsZSAuPSAkc2VyaWFsIC4gJ18nOwoJCX0KCQkkc3RhdHVzX2ZpbGUgLj0gc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JzsKCQkKCQlpZiAoICEgZmlsZV9leGlzdHMoICRzdGF0dXNfZmlsZSApICkgewoJCQlyZXR1cm4gYXJyYXkoKTsgLy8gTm8gbG9nLgoJCX0KCQkKCQlpZiAoICRoaWRlX2dldHRpbmdfc3RhdHVzID09PSBmYWxzZSApIHsKCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsICdHZXR0aW5nIHN0YXR1cyBmb3Igc2VyaWFsIGAnIC4gJHNlcmlhbCAuICdgLiBDbGVhcjogYCcgLiAoICRjbGVhcl9yZXRyaWV2ZWQgPyAndHJ1ZScgOiAnZmFsc2UnICkgLiAnYCcsICRzZXJpYWwgKTsKCQl9CgkJCgkJaWYgKCBmYWxzZSAhPT0gKCAkZmggPSBAZm9wZW4oICRzdGF0dXNfZmlsZSwgJ3InKSApICkgeyAvLyBSZWFkIHdyaXRlIG1vZGUuCgkJCSRzdGF0dXNfbGluZXMgPSBhcnJheSgpOwoJCQl3aGlsZSAoIGZhbHNlICE9PSAoICRzdGF0dXNfbGluZSA9IGZnZXRzKCAkZmggKSApICkgewoJCQkJLyoKCQkJCWlmICggc3RyaXN0ciggJHN0YXR1c19saW5lLCAkZGVsaW1pdGVyICkgKSB7IC8vIERlbGltaW5hdG9yIGluIGxpbmUuCgkJCQkJJHN0YXR1c19saW5lc1tdID0gZXhwbG9kZSggJGRlbGltaXRlciwgdHJpbSggJHN0YXR1c19saW5lICkgKTsKCQkJCX0gZWxzZSB7IC8vIE5vIGRlbGltaW5hdG9yLiBKdXN0IHByaW50IGxpbmUgd2l0aCBibGFuayB2YWx1ZXMuCgkJCQkJJHN0YXR1c19saW5lc1tdID0gYXJyYXkoIDAsMCwwLCd1bmtub3duJywgdHJpbSggJHN0YXR1c19saW5lICkgKTsKCQkJCX0KCQkJCSovCgkJCQkkc3RhdHVzX2xpbmVzW10gPSAkc3RhdHVzX2xpbmU7CgkJCX0KCQkJZmNsb3NlKCAkZmggKTsKCQkJCgkJCWlmICggJGNsZWFyX3JldHJpZXZlZCA9PT0gdHJ1ZSApIHsKCQkJCWZpbGVfcHV0X2NvbnRlbnRzKCAkc3RhdHVzX2ZpbGUsICcnICk7CgkJCX0KCQkJCgkJCWlmICggJGVyYXNlX3JldHJpZXZlZCA9PT0gdHJ1ZSApIHsKCQkJCUB1bmxpbmsoICRzdGF0dXNfZmlsZSApOyAvLyB0b2RvOiBjYXRjaCBlcnJvcnMgb24gdGhpcz8gc3VwcmVzcz8KCQkJfQoJCQkKCQkJaWYgKCBmYWxzZSAhPT0gJGNvcHlfcmV0cmlldmVkICkgewoJCQkJQGZpbGVfcHV0X2NvbnRlbnRzKCAkY29weV9yZXRyaWV2ZWQsICRzdGF0dXNfbGluZXMsIEZJTEVfQVBQRU5EICk7CgkJCX0KCQkJCgkJCXJldHVybiAkc3RhdHVzX2xpbmVzOwoJCX0gZWxzZSB7CgkJCS8vc2VsZjo6YWxlcnQoICdVbmFibGUgdG8gb3BlbiBmaWxlIGhhbmRsZXIgZm9yIHN0YXR1cyBmaWxlIGAnIC4gJHN0YXR1c19maWxlIC4gJ2AuIFVuYWJsZSB0byB3cml0ZSBzdGF0dXMgbG9nLicgKTsKCQl9Cgl9IC8vIEVuZCBnZXRfc3RhdHVzKCkuCgkKCQoJCgkvKioKCSAqCXN0YXR1c19ib3goKQoJICoKCSAqCURpc3BsYXlzIGEgdGV4dGFyZWEgZm9yIHBsYWNpbmcgc3RhdHVzIHRleHQgaW50by4KCSAqCgkgKglAcGFyYW0JCQkkZGVmYXVsdF90ZXh0CXN0cmluZwkJRmlyc3QgbGluZSBvZiB0ZXh0IHRvIGRpc3BsYXkuCgkgKglAcGFyYW0JCQlib29sZWFuCQkJJGhpZGRlbgkJV2hldGhlciBvciBub3QgdG8gYXBwbHkgZGlzcGxheTogbm9uZTsgQ1NTLgoJICoJQHJldHVybgkJCQkJCQlzdHJpbmcJCUhUTUwgZm9yIHRleHRhcmVhLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHN0YXR1c19ib3goICRkZWZhdWx0X3RleHQgPSAnJywgJGhpZGRlbiA9IGZhbHNlICkgewoJCWRlZmluZSggJ1BCX1NUQVRVUycsIHRydWUgKTsgLy8gVGVsbHMgZnJhbWV3b3JrIHN0YXR1cygpIGZ1bmN0aW9uIHRvIG91dHB1dCBmdXR1cmUgbG9nZ2luZyBpbmZvIGludG8gc3RhdHVzIGJveCB2aWEgamF2YXNjcmlwdC4KCQkkcmV0dXJuID0gJzx0ZXh0YXJlYSByZWFkb25seT0icmVhZG9ubHkiIGlkPSJwYl9iYWNrdXBidWRkeV9zdGF0dXMiIHdyYXA9Im9mZiInOwoJCWlmICggJGhpZGRlbiA9PT0gdHJ1ZSApIHsKCQkJJHJldHVybiAuPSAnIHN0eWxlPSJkaXNwbGF5OiBub25lOyAiJzsKCQl9CgkJJHJldHVybiAuPSAnPicgLiAkZGVmYXVsdF90ZXh0IC4gJzwvdGV4dGFyZWE+JzsKCQkKCQlyZXR1cm4gJHJldHVybjsKCX0gLy8gRW5kIHN0YXR1c19ib3goKS4KCQoJCgkKCS8qKgoJICoJc2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCkKCSAqCgkgKglTZXRzIGdyZWVkeSBzY3JpcHQgbGltaXRzIHRvIGhlbHAgcHJldmVudCB0aW1lb3V0cywgcnVubmluZyBvdXQgb2YgbWVtb3J5LCBldGMuCgkgKgoJICoJQHJldHVybgkJbnVsbAoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzZXRfZ3JlZWR5X3NjcmlwdF9saW1pdHMoICRzdXByZXNzX3N0YXR1cyA9IGZhbHNlICkgIHsKCQoJCSRyZXF1ZXN0ZWRfc29ja2V0X3RpbWVvdXQgPSA2MCAqIDYwICogMjsKCQkkcmVxdWVzdGVkX2V4ZWN1dGlvbl90aW1lID0gNjAgKiA2MCAqIDI7CgkJCgkJLy8gRG9uJ3QgYWJvcnQgc2NyaXB0IGlmIHRoZSBjbGllbnQgY29ubmVjdGlvbiBpcyBsb3N0L2Nsb3NlZAoJCUBpZ25vcmVfdXNlcl9hYm9ydCggdHJ1ZSApOwoJCQoJCS8vIFNldCBzb2NrZXQgdGltZW91dCB0byByZXF1ZXN0ZWQgcGVyaW9kLgoJCUBpbmlfc2V0KCAnZGVmYXVsdF9zb2NrZXRfdGltZW91dCcsICRyZXF1ZXN0ZWRfc29ja2V0X3RpbWVvdXQgKTsKCQkKCQkKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDaGVja2luZyBtYXggUEhQIGV4ZWN1dGlvbiB0aW1lIHNldHRpbmdzLicgKTsKCQkvLyBTZXQgbWF4aW11bSBleGVjdXRpb24gdGltZSB0byByZXF1ZXN0ZWQgcGVyaW9kIGlmIG5vdCBhbHJlYWR5IGJldHRlciB0aGFuIHRoYXQKCQkvLyBTZWUgaWYgd2UgY2FuIGdldCBhIGN1cnJlbnQgdmFsdWUgKG9mIGFueSBzb3J0KQoJCWlmICggZmFsc2UgPT09ICggJG9yaWdpbmFsX2V4ZWN1dGlvbl90aW1lID0gQGluaV9nZXQoICdtYXhfZXhlY3V0aW9uX3RpbWUnICkgKSApIHsKCQkJJG9yaWdpbmFsX2V4ZWN1dGlvbl90aW1lID0gJ1Vua25vd24nOwoJCX0KCQkKCQkvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHRyeSBhbmQgc2V0L2luY3JlYXNlCgkJaWYgKCBpc19udW1lcmljKCAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgKSAmJiAoICggMCA9PSAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgKSB8fCAoICRyZXF1ZXN0ZWRfZXhlY3V0aW9uX3RpbWUgPD0gJG9yaWdpbmFsX2V4ZWN1dGlvbl90aW1lICkgKSApIHsKCQkJLy8gVGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgbWF4X2V4ZWN1dGlvbl90aW1lCgkJCWlmICggZmFsc2UgPT09ICRzdXByZXNzX3N0YXR1cyApIHsKCQkJCWlmICggZmFsc2UgPT09ICggJGNvbmZpZ3VyZWRfZXhlY3V0aW9uX3RpbWUgPSBAZ2V0X2NmZ192YXIoICdtYXhfZXhlY3V0aW9uX3RpbWUnICkgKSApIHsKCQkJCQkkY29uZmlndXJlZF9leGVjdXRpb25fdGltZSA9ICdVbmtub3duJzsKCQkJCX0KCQkJCWlmICggZmFsc2UgPT09ICggJGN1cnJlbnRfZXhlY3V0aW9uX3RpbWUgPSBAaW5pX2dldCggJ21heF9leGVjdXRpb25fdGltZScgKSApICkgewoJCQkJCSRjdXJyZW50X2V4ZWN1dGlvbl90aW1lID0gJ1Vua25vd24nOwoJCQkJfQoJCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnTWF4aW11bSBQSFAgZXhlY3V0aW9uIHRpbWUgd2FzIG5vdCBtb2RpZmllZCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQlzZWxmOjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oICdSZXBvcnRlZCBQSFAgZXhlY3V0aW9uIHRpbWUgLSBDb25maWd1cmVkOiAlMSRzOyBPcmlnaW5hbDogJTIkczsgQ3VycmVudDogJTMkcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkY29uZmlndXJlZF9leGVjdXRpb25fdGltZSwgJG9yaWdpbmFsX2V4ZWN1dGlvbl90aW1lLCAkY3VycmVudF9leGVjdXRpb25fdGltZSApICk7CgkJCX0KCQl9IGVsc2UgeyAvLyBFaXRoZXIgbm90IGEgbnVtZXJpYyB2YWx1ZSBvciB3ZSBuZWVkIHRvIHRyeSBhbmQgaW5jcmVhc2UKCQkJCgkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snc2V0X2dyZWVkeV9leGVjdXRpb25fdGltZSddICkgJiYgKCAnMScgPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydzZXRfZ3JlZWR5X2V4ZWN1dGlvbl90aW1lJ10gKSApIHsKCQkJCWlmICggZmFsc2UgPT09ICRzdXByZXNzX3N0YXR1cyApIHsKCQkJCQlzZWxmOjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oICdBdHRlbXB0aW5nIHRvIHNldCBQSFAgZXhlY3V0aW9uIHRpbWUgdG8gJTEkcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkcmVxdWVzdGVkX2V4ZWN1dGlvbl90aW1lICkgKTsKCQkJCX0KCQkJCUBzZXRfdGltZV9saW1pdCggJHJlcXVlc3RlZF9leGVjdXRpb25fdGltZSApOwoJCQl9ICBlbHNlaWYgKCBmYWxzZSA9PT0gJHN1cHJlc3Nfc3RhdHVzICkgey8vIGVuZCBzZXR0aW5nIG1heCBleGVjdXRpb24gdGltZQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBlZCBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlIG1heCBQSFAgZXhlY3V0aW9uIHRpbWUgYmFzZWQgb24gc2V0dGluZ3MuJyApOwoJCQl9CgkJCQoJCQlpZiAoIGZhbHNlID09PSAkc3VwcmVzc19zdGF0dXMgKSB7CgkJCQlpZiAoIGZhbHNlID09PSAoICRjb25maWd1cmVkX2V4ZWN1dGlvbl90aW1lID0gQGdldF9jZmdfdmFyKCAnbWF4X2V4ZWN1dGlvbl90aW1lJyApICkgKSB7CgkJCQkJJGNvbmZpZ3VyZWRfZXhlY3V0aW9uX3RpbWUgPSAnVW5rbm93bic7CgkJCQl9CgkJCQlpZiAoIGZhbHNlID09PSAoICRjdXJyZW50X2V4ZWN1dGlvbl90aW1lID0gQGluaV9nZXQoICdtYXhfZXhlY3V0aW9uX3RpbWUnICkgKSApIHsKCQkJCQkkY3VycmVudF9leGVjdXRpb25fdGltZSA9ICdVbmtub3duJzsKCQkJCX0KCQkJCXNlbGY6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXyggJ1JlcG9ydGVkIFBIUCBleGVjdXRpb24gdGltZSAtIENvbmZpZ3VyZWQ6ICUxJHM7IE9yaWdpbmFsOiAlMiRzOyBDdXJyZW50OiAlMyRzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICRjb25maWd1cmVkX2V4ZWN1dGlvbl90aW1lLCAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUsICRjdXJyZW50X2V4ZWN1dGlvbl90aW1lICkgKTsKCQkJfQoJCX0KCQkKCQkKCQkKCQkKCQkvLyBTZXQgbWVtb3J5X2xpbWl0IHRvIGVpdGhlciB0aGUgdXNlciBkZWZpbmVkIChXb3JkUHJlc3MgZGVmYXVsdGVkKSBvciBvdmVyLXJpZGRlbiB2YWx1ZQoJCS8vIE5lZWQgdG8gZ2V0IHRoZSBvcmlnaW5hbCB2YWx1ZSBoZXJlIGFzIHdlIHdpbGwgYmUgdXBkYXRpbmcgaXQKCQlpZiAoIGZhbHNlID09PSAoICRvcmlnaW5hbF9tZW1vcnlfbGltaXQgPSBAaW5pX2dldCggJ21lbW9yeV9saW1pdCcgKSApICkgewoJCQkkb3JpZ2luYWxfbWVtb3J5X2xpbWl0ID0gJ1Vua25vd24nOwoJCX0KCgkJLy8gTmVlZCB0byBjaGVjayBpZiB3ZSBhcmUgcnVubmluZyBvdXRzaWRlIG9mIFdvcmRQcmVzcyBpbiB3aGljaCBjYXNlIHdlIGRvbid0IHRyeSBhbmQgY2hhbmdlIGFueXRoaW5nCgkJLy8gYnV0IGp1c3QgcmVwb3J0IHRoZSBtZW1vcnlfbGltaXQgdmFsdWVzLiBUaGUgdXNlciB3aWxsIGhhdmUgdG8gdXBkYXRlIGNvbmZpZyBpZiBuZWNlc3NhcnkgYmVjYXVzZQoJCS8vIHRoZXJlIGlzIG5vIG90aGVyIG1lY2hhbmlzbSB0byBzZXQgdGhlIHZhbGlkIG1lbW9yeV9saW1pdC4KCQkvLyBJZiB3ZSBhcmUgcnVubmluZyB1bmRlciBXb3JkUHJlc3MgdGhlbiBuZWVkIGEgbGl0dGxlIGZha2VyeSBmb3IgZWFybGllciB2ZXJzaW9ucy4KCQlpZiAoICEgZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgfHwgKCBkZWZpbmVkKCAnUEJfU1RBTkRBTE9ORScgKSAmJiAoIGZhbHNlID09PSBQQl9TVEFOREFMT05FICkgKSApIHsJCgkJCS8vIE5vdGU6IFdQX01BWF9NRU1PUllfTElNSVQgd2FzIGludHJvZHVjZWQgV1AzLjIgc28gd2UgbmVlZCB0byBmYWtlIGl0IGlmIGNvbnN0YW50IG5vdCBhbHJlYWR5IGRlZmluZWQKCQkJLy8gVXNlIHRoZSBkZWZhdWx0IHZhbHVlIHRoYXQgV29yZFByZXNzIHVzZXMgaWYgdGhlIHVzZXIgaGFzbid0IGRlZmluZWQgaXQKCQkJaWYgKCAhIGRlZmluZWQoICdXUF9NQVhfTUVNT1JZX0xJTUlUJyApICkgewoJCQkJZGVmaW5lKCAnV1BfTUFYX01FTU9SWV9MSU1JVCcsICcyNTZNJyApOwoJCQl9CgkJCUBpbmlfc2V0KCAnbWVtb3J5X2xpbWl0JywgYXBwbHlfZmlsdGVycyggJ2FkbWluX21lbW9yeV9saW1pdCcsIFdQX01BWF9NRU1PUllfTElNSVQgKSApOwoJCQlpZiAoIGZhbHNlID09PSAkc3VwcmVzc19zdGF0dXMgKSB7CgkJCQlzZWxmOjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oICdBdHRlbXB0ZWQgdG8gc2V0IFBIUCBtZW1vcnkgbGltaXQgdG8gdXNlciBkZWZpbmVkIFdQX01BWF9NRU1PUllfTElNSVQgKCUxJHMpIG9yIG92ZXItcmlkZGVuIHZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksIFdQX01BWF9NRU1PUllfTElNSVQgKSApOwoJCQl9CgkJfQoJCWlmICggZmFsc2UgPT09ICRzdXByZXNzX3N0YXR1cyApIHsKCQkJaWYgKCBmYWxzZSA9PT0gKCAkY29uZmlndXJlZF9tZW1vcnlfbGltaXQgPSBAZ2V0X2NmZ192YXIoICdtZW1vcnlfbGltaXQnICkgKSApIHsKCQkJCSRjb25maWd1cmVkX21lbW9yeV9saW1pdCA9ICdVbmtub3duJzsKCQkJfQoJCQlpZiAoIGZhbHNlID09PSAoICRjdXJyZW50X21lbW9yeV9saW1pdCA9IEBpbmlfZ2V0KCAnbWVtb3J5X2xpbWl0JyApICkgKSB7CgkJCQkkY3VycmVudF9tZW1vcnlfbGltaXQgPSAnVW5rbm93bic7CgkJCX0KCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnUmVwb3J0ZWQgUEhQIG1lbW9yeSBsaW1pdHMgLSBDb25maWd1cmVkOiAlMSRzOyBPcmlnaW5hbDogJTIkczsgQ3VycmVudDogJTMkcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkY29uZmlndXJlZF9tZW1vcnlfbGltaXQsICRvcmlnaW5hbF9tZW1vcnlfbGltaXQsICRjdXJyZW50X21lbW9yeV9saW1pdCApICk7CgkJfQoKCX0gLy8gRW5kIHNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cygpLgoJCgkKCQoJLyoqCgkgKglzZWxmOjpsb2coKQoJICoKCSAqCUxvZ3MgdG8gYSB0ZXh0IGZpbGUgZGVwZW5kaW5nIG9uIHNldHRpbmdzLgoJICoJMCA9IG5vbmUsIDEgPSBlcnJvcnMgb25seSwgMiA9IGVycm9ycyArIHdhcm5pbmdzLCAzID0gZGVidWdnaW5nIChhbGwga2luZHMgb2YgYWN0aW9ucykKCSAqCgkgKglAcGFyYW0Jc3RyaW5nCSR0ZXh0CQlUZXh0IHRvIGxvZy4KCSAqCUBwYXJhbQlzdHJpbmcJJGxvZ190eXBlCVZhbGlkIG9wdGlvbnM6IGVycm9yLCB3YXJuaW5nLCBhbGwgKGRlZmF1bHQgc28gbWF5IGJlIG9taXR0ZWQpLgoJICoJQHJldHVybgludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9nKCAkdGV4dCwgJGxvZ190eXBlID0gJ2FsbCcgKSB7CgkJaWYgKCBkZWZpbmVkKCAnUEJfREVNT19NT0RFJyApIHx8ICFpc3NldCggc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddICkgfHwgKCBzZWxmOjokb3B0aW9uc1snbG9nX2xldmVsJ10gPT0gMCApICkgeyAvLyBObyBsb2dnaW5nIGluIHRoaXMgcGx1Z2luIG9yIGRpc2FibGVkLgoJCQlyZXR1cm47CgkJfQoJCQoJCSR3cml0ZSA9IGZhbHNlOwoJCWlmICggc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddID09IDEgKSB7IC8vIEVycm9ycyBvbmx5LgoJCQlpZiAoICRsb2dfdHlwZSA9PSAnZXJyb3InICkgewoJCQkJJHdyaXRlID0gdHJ1ZTsKCQkJfQoJCX0gZWxzZSB7IC8vIEFsbCBsb2dnaW5nIChkZWJ1ZyBtb2RlKS4KCQkJJHdyaXRlID0gdHJ1ZTsKCQl9CgkJCgkJaWYgKCAkd3JpdGUgPT09IHRydWUgKSB7CgkJCWlmICggIWlzc2V0KCBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddICkgKSB7CgkJCQlzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddID0gc2VsZjo6cmFuZG9tX3N0cmluZyggMTUgKTsKCQkJCXNlbGY6OnNhdmUoKTsKCQkJfQoJCQkkZmggPSBAZm9wZW4oIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpIC4gJ2xvZy0nIC4gc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JywgJ2EnKTsKCQkJaWYgKCAkZmggKSB7CgkJCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cyggJ2dldF9vcHRpb24nICkgKSB7CgkJCQkJJGdtdF9vZmZzZXQgPSBnZXRfb3B0aW9uKCAnZ210X29mZnNldCcgKTsKCQkJCX0gZWxzZSB7CgkJCQkJJGdtdF9vZmZzZXQgPSAwOwoJCQkJfQoJCQkJZndyaXRlKCAkZmgsICdbJyAuIGRhdGUoICdNIGosIFkgSDppOnMgJyAuICRnbXRfb2Zmc2V0LCB0aW1lKCkgKyAoICRnbXRfb2Zmc2V0ICogMzYwMCkgKSAuICctJyAuICRsb2dfdHlwZSAuICddICcgLiAkdGV4dCAuICJcbiIgKTsKCQkJCWZjbG9zZSggJGZoICk7CgkJCX0KCQl9Cgl9IC8vIEVuZCBsb2coKS4KCQoJCgkKCS8qCXNlbGY6OnJhbmRvbV9zdHJpbmcoKQoJICoJCgkgKglHZW5lcmF0ZSBhIHJhbmRvbSBzdHJpbmcgb2YgY2hhcmFjdGVycy4KCSAqCQoJICoJQHBhcmFtCQkKCSAqCUByZXR1cm4JCQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJhbmRvbV9zdHJpbmcoICRsZW5ndGggPSAzMiwgJGNoYXJzID0gJ2FiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwJyApIHsKCQkkY2hhcnNfbGVuZ3RoID0gKCBzdHJsZW4oICRjaGFycyApIC0gMSApOwoJCSRzdHJpbmcgPSAkY2hhcnN7cmFuZCgwLCAkY2hhcnNfbGVuZ3RoKX07CgkJZm9yICggJGkgPSAxOyAkaSA8ICRsZW5ndGg7ICRpID0gc3RybGVuKCAkc3RyaW5nICkgKSB7CgkJCSRyID0gJGNoYXJze3JhbmQoMCwgJGNoYXJzX2xlbmd0aCl9OwoJCQlpZiAoICRyICE9ICRzdHJpbmd7JGkgLSAxfSApICRzdHJpbmcgLj0gICRyOwoJCX0KCQlyZXR1cm4gJHN0cmluZzsKCX0gLy8gRW5kIHJhbmRvbV9zdHJpbmcoKS4KCQoJCgkKCS8qKgoJICoJc2VsZjo6dmlkZW8oKQoJICoKCSAqCURpc3BsYXlzIGEgbWVzc2FnZSB0byB0aGUgdXNlciB3aGVuIHRoZXkgaG92ZXIgb3ZlciB0aGUgcXVlc3Rpb24gbWFyay4gR3JhY2VmdWxseSBmYWxscyBiYWNrIHRvIG5vcm1hbCB0b29sdGlwLgoJICoJSFRNTCBpcyBzdXBwb3NlZCB3aXRoaW4gdG9vbHRpcHMuCgkgKgoJICoJQHBhcmFtCQlzdHJpbmcJCSR2aWRlb19rZXkJCVlvdVR1YmUgdmlkZW8ga2V5IGZyb20gdGhlIFVSTCA/dj1WSURFT19LRVlfSEVSRQoJICoJQHBhcmFtCQlzdHJpbmcJCSR0aXRsZQkJCVRpdGxlIG9mIG1lc3NhZ2UgdG8gc2hvdyB0byB1c2VyLiBUaGlzIGlzIGRpc3BsYXllZCBhdCB0b3Agb2YgdGlwIGluIGJpZ2dlciBsZXR0ZXJzLiBEZWZhdWx0IGlzIGJsYW5rLiAob3B0aW9uYWwpCgkgKglAcGFyYW0JCWJvb2xlYW4JCSRlY2hvX3RpcAkJV2hldGhlciB0byBlY2hvIHRoZSB0aXAgKGRlZmF1bHQ7IHRydWUpLCBvciByZXR1cm4gdGhlIHRpcCAoZmFsc2UpLiAob3B0aW9uYWwpCgkgKglAcmV0dXJuCQlzdHJpbmcvbnVsbAkJCQkJSWYgbm90IGVjaG9pbmcgdGlwIHRoZW4gdGhlIHN0cmluZyB3aWxsIGJlIHJldHVybmVkLiBXaGVuIGVjaG9pbmcgdGhlcmUgaXMgbm8gcmV0dXJuLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHZpZGVvKCAkdmlkZW9fa2V5LCAkdGl0bGUgPSAnJywgJGVjaG9fdGlwID0gdHJ1ZSApIHsKCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICd1aScgKTsgLy8gJHVpIGNsYXNzIHJlcXVpcmVkIHBhZ2VzIGNvbnRyb2xsZXIgYW5kIG1heSBub3QgYmUgc2V0IHVwIGlmIG5vdCBpbiBvdXIgb3duIHBhZ2VzLgoJCXJldHVybiBzZWxmOjokdWktPnZpZGVvKCAkdmlkZW9fa2V5LCAkdGl0bGUsICRlY2hvX3RpcCApOwoJfSAvLyBFbmQgdmlkZW8oKS4KCQoJCgkKCSAvKioKCSAqIHBiX2JhY2t1cGJ1ZGR5OjplbnF1ZXVlX3RoaWNrYm94KCkKCSAqCgkgKiBFbnF1ZXVlcyB0aGUgcmVxdWlyZWQgc2NyaXB0cyAvIHN0eWxlcyBuZWVkZWQgdG8gdXNlIHRoaWNrYm94CgkgKgoJICogQHJldHVybiBudWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZW5xdWV1ZV90aGlja2JveCgpIHsKCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICd1aScgKTsgLy8gJHVpIGNsYXNzIHJlcXVpcmVkIHBhZ2VzIGNvbnRyb2xsZXIgYW5kIG1heSBub3QgYmUgc2V0IHVwIGlmIG5vdCBpbiBvdXIgb3duIHBhZ2VzLgoJCXJldHVybiBzZWxmOjokdWktPmVucXVldWVfdGhpY2tib3goKTsKCX0gLy8gRW5kIGVucXVldWVfdGhpY2tib3gKCQoJCgkKCS8qKgoJICoJc2VsZjo6YWxlcnQoKQoJICoKCSAqCURpc3BsYXlzIGEgbWVzc2FnZSB0byB0aGUgdXNlciBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlIHdoZW4gaW4gdGhlIGRhc2hib2FyZC4KCSAqCgkgKglAcGFyYW0JCXN0cmluZwkJJG1lc3NhZ2UJCU1lc3NhZ2UgeW91IHdhbnQgdG8gZGlzcGxheSB0byB0aGUgdXNlci4KCSAqCUBwYXJhbQkJYm9vbGVhbgkJJGVycm9yCQkJT1BUSU9OQUwhIHRydWUgaW5kaWNhdGVzIHRoaXMgYWxlcnQgaXMgYW4gZXJyb3IgYW5kIGRpc3BsYXlzIGFzIHJlZC4gRGVmYXVsdDogZmFsc2UKCSAqCUBwYXJhbQkJaW50CQkJJGVycm9yX2NvZGUJCU9QVElPTkFMISBFcnJvciBjb2RlIG51bWJlciB0byB1c2UgaW4gbGlua2luZyBpbiB0aGUgd2lraSBmb3IgZWFzeSByZWZlcmVuY2UuCgkgKglAcmV0dXJuCQlzdHJpbmcvbnVsbAkJCQkJSWYgbm90IGVjaG9pbmcgYWxlcnQgdGhlbiB0aGUgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuIFdoZW4gZWNob2luZyB0aGVyZSBpcyBubyByZXR1cm4uCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWxlcnQoICRtZXNzYWdlLCAkZXJyb3IgPSBmYWxzZSwgJGVycm9yX2NvZGUgPSAnJywgJHJlbF90YWcgPSAnJyApIHsKCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICd1aScgKTsgLy8gJHVpIGNsYXNzIHJlcXVpcmVkIHBhZ2VzIGNvbnRyb2xsZXIgYW5kIG1heSBub3QgYmUgc2V0IHVwIGlmIG5vdCBpbiBvdXIgb3duIHBhZ2VzLgoJCXNlbGY6OiR1aS0+YWxlcnQoICRtZXNzYWdlLCAkZXJyb3IsICRlcnJvcl9jb2RlLCAkcmVsX3RhZyApOwoJfSAvLyBFbmQgYWxlcnQoKS4KCQoJCgkKCS8vIERpc21pc3NhYmxlIGFsZXJ0IHN5c3RlbS4gVXNlcyBhbGVydCgpLgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBkaXNhbGVydCggJHVuaXF1ZV9pZCwgJG1lc3NhZ2UsICRlcnJvciA9IGZhbHNlLCAkbW9yZV9jc3MgPSAnJyApIHsKCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICd1aScgKTsgLy8gJHVpIGNsYXNzIHJlcXVpcmVkIHBhZ2VzIGNvbnRyb2xsZXIgYW5kIG1heSBub3QgYmUgc2V0IHVwIGlmIG5vdCBpbiBvdXIgb3duIHBhZ2VzLgoJCXNlbGY6OiR1aS0+ZGlzYWxlcnQoICR1bmlxdWVfaWQsICRtZXNzYWdlLCAkZXJyb3IsICRtb3JlX2NzcyApOwoJfSAvLyBFbmQgZGlzYWxlcnQoKS4KCQoJCgkKCS8qKgoJICoJc2VsZjo6dGlwKCkKCSAqCgkgKglEaXNwbGF5cyBhIG1lc3NhZ2UgdG8gdGhlIHVzZXIgd2hlbiB0aGV5IGhvdmVyIG92ZXIgdGhlIHF1ZXN0aW9uIG1hcmsuIEdyYWNlZnVsbHkgZmFsbHMgYmFjayB0byBub3JtYWwgdG9vbHRpcC4KCSAqCUhUTUwgaXMgc3VwcG9zZWQgd2l0aGluIHRvb2x0aXBzLgoJICoKCSAqCUBwYXJhbQkJc3RyaW5nCQkkbWVzc2FnZQkJQWN0dWFsIG1lc3NhZ2UgdG8gc2hvdyB0byB1c2VyLgoJICoJQHBhcmFtCQlzdHJpbmcJCSR0aXRsZQkJCVRpdGxlIG9mIG1lc3NhZ2UgdG8gc2hvdyB0byB1c2VyLiBUaGlzIGlzIGRpc3BsYXllZCBhdCB0b3Agb2YgdGlwIGluIGJpZ2dlciBsZXR0ZXJzLiBEZWZhdWx0IGlzIGJsYW5rLiAob3B0aW9uYWwpCgkgKglAcGFyYW0JCWJvb2xlYW4JCSRlY2hvX3RpcAkJV2hldGhlciB0byBlY2hvIHRoZSB0aXAgKGRlZmF1bHQ7IHRydWUpLCBvciByZXR1cm4gdGhlIHRpcCAoZmFsc2UpLiAob3B0aW9uYWwpCgkgKglAcmV0dXJuCQlzdHJpbmcvbnVsbAkJCQkJSWYgbm90IGVjaG9pbmcgdGlwIHRoZW4gdGhlIHN0cmluZyB3aWxsIGJlIHJldHVybmVkLiBXaGVuIGVjaG9pbmcgdGhlcmUgaXMgbm8gcmV0dXJuLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHRpcCggJG1lc3NhZ2UsICR0aXRsZSA9ICcnLCAkZWNob190aXAgPSB0cnVlICkgewoJCXNlbGY6OmluaXRfY2xhc3NfY29udHJvbGxlciggJ3VpJyApOyAvLyAkdWkgY2xhc3MgcmVxdWlyZWQgcGFnZXMgY29udHJvbGxlciBhbmQgbWF5IG5vdCBiZSBzZXQgdXAgaWYgbm90IGluIG91ciBvd24gcGFnZXMuCgkJcmV0dXJuIHNlbGY6OiR1aS0+dGlwKCAkbWVzc2FnZSwgJHRpdGxlLCAkZWNob190aXAgKTsKCX0gLy8gRW5kIHRpcCgpLgoJCgkKCQoJLyoJc2VsZjo6YWRkX3BhZ2UoKQoJICoJCgkgKglBZGRzIGEgcGFnZSBpbnRvIHRoZSBhZG1pbi4gU3RvcmVzIG1lbnUgaXRlbXMgdG8gYWRkIGluIHNlbGY6OiRfcGFnZV9zZXR0aW5ncyBhcnJheS4gUmVnaXN0ZXJzIGNhbGxiYWNrIHRvIHJlZ2lzdGVyX2FkbWluX21lbnUoKSB3aXRoIFdvcmRQcmVzcyB0byBhY3R1YWxseSBzZXQgdXAgdGhlIHBhZ2VzLgoJICoJQHNlZSBzZWxmOjpyZWdpc3Rlcl9hZG1pbl9tZW51KCkKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRwYXJlbnRfc2x1ZwkJU2x1ZyBvZiB0aGUgcGFyZW50IG1lbnUgaXRlbSB0byBnbyB1bmRlci4gSWYgYSBzZXJpZXMgdXNlIGBTRVJJRVNgIGZvciB0aGUgdmFsdWUgdG8gYXV0b21hdGljYWxseSBoYW5kbGUgdGhlIHNlcmllcy4gUEIgcHJlZml4IGF1dG9tYXRpY2FsbHkgYXBwbGllZCB1bmxlc3MgJHNsdWdfcHJlZml4IG92ZXJyaWRlcy4KCSAqCUBwYXJhbQkJc3RyaW5nCQkkcGFnZV9zbHVnCQkJU2x1ZyBmb3IgdGhpcyBwYWdlLiBQQiBwcmVmaXggYXV0b21hdGljYWxseSBhcHBsaWVkIHVubGVzcyAkc2x1Z19wcmVmaXggb3ZlcnJpZGVzLgoJICoJQHBhcmFtCQlzdHJpbmcJCSRwYWdlX3RpdGxlCQkJVGl0bGUgb2YgdGhlIHBhZ2UuIElmIHRoaXMgbWVudSBpdGVtIGhhcyBubyBwYXJlbnQgdGhpcyBjYW4gYmUgYW4gYXJyYXkgb2YgVFdPIHRpdGxlcy4gVGhlIHJvb3QgbWVudSBhbmQgdGhlIGZpcnN0IHN1Ym1lbnUgaXRlbSB0aGF0IGxpbmtzIHRvIHRoZSBzYW1lIHBsYWNlLgogCSAqCUBwYXJhbQkJc3RyaW5nCQkkY2FwYWJpbGl0eQkJCUNhcGFiaWxpdHkgcmVxdWlyZWQgdG8gYWNjZXNzIHBhZ2UuIERlZmF1bHQ6IGFjdGl2YXRlX3BsdWdpbnMuCiAJICoJQHBhcmFtCQlzdHJpbmcJCSRpY29uCQkJCU1lbnUgaWNvbiBncmFwaGljLiBBdXRvbWF0aWNhbGx5IHByZWZpeGVzIHRoaXMgdmFsdWUgd2l0aCB0aGUgZnVsbCBVUkwgdG8gcGx1Z2luJ3MgaW1hZ2VzIGRpcmVjdG9yeS4gRGVmYXVsdDogaWNvbl8xNngxNi5wbmcuCiAJICoJQHBhcmFtCQlzdHJpbmcJCSRzbHVnX3ByZWZpeAkJUHJlZml4IHRvIHVzZSB3aXRoIHRoaXMgbWVudS4gT3ZlcnJpZGUgaWYgbmVlZGluZyB0byBhZGQgbWVudSB1bmRlciBhbm90aGVyIHBsdWdpbiBvciBjb3JlIG1lbnVzLiBEZWZhdWx0OiBERUZBVUxULgogCSAqCUBwYXJhbQkJaW50CQkJJHBvc2l0aW9uCQkJUHJpb3JpdHkgb24gd2hlcmUgaW4gdGhlIG1lbnUgdG8gYWRkIHRoaXMuIEJ5IGRlZmF1bHQgaXQgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbWVudS4gSXQncyBwb3NzaWJsZSB0byBvdmVyd3JpdGUgYW5vdGhlciBtZW51IGl0ZW0gaWYgdGhpcyBudW1iZXIgbWF0Y2hlcy4gVXNlIGNhdXRpb24uIERlZmF1bHQ6IG51bGwuCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX3BhZ2UoICRwYXJlbnRfc2x1ZywgJHBhZ2Vfc2x1ZywgJHBhZ2VfdGl0bGUsICRjYXBhYmlsaXR5ID0gJ2FjdGl2YXRlX3BsdWdpbnMnLCAkaWNvbiA9ICdpY29uX21lbnVfMTZ4MTYucG5nJywgJHNsdWdfcHJlZml4ID0gJ0RFRkFVTFQnLCAkcG9zaXRpb24gPSBOVUxMICkgewoJCWlmICggJHNsdWdfcHJlZml4ID09ICdERUZBVUxUJyApIHsKCQkJJHNsdWdfcHJlZml4ID0gJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICkgLiAnXyc7CgkJfQoJCQoJCWlmICggIWlzX29iamVjdCggc2VsZjo6JF9wYWdlcyApICkgewoJCQlzZWxmOjpfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICdwYWdlcycgKTsKCQkJCgkJCWlmICggaXNfbmV0d29ya19hZG1pbigpICkgeyAvLyBNdWx0aXNpdGUgaW5zdGFsbGF0aW9uIGFkbWluOyB1c2VzIGRpZmZlcmVudCBob29rLgoJCQkJYWRkX2FjdGlvbiggJ25ldHdvcmtfYWRtaW5fbWVudScsIGNyZWF0ZV9mdW5jdGlvbiggJycsICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApIC4gJzo6cmVnaXN0ZXJfYWRtaW5fbWVudSgpOycgKSApOwoJCQl9IGVsc2UgeyAvLyBTdGFuZGFsb25lIGFkbWluLgoJCQkJYWRkX2FjdGlvbiggJ2FkbWluX21lbnUnLCBjcmVhdGVfZnVuY3Rpb24oICcnLCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICc6OnJlZ2lzdGVyX2FkbWluX21lbnUoKTsnICkgKTsKCQkJfQoJCX0KCQkKCQlzZWxmOjokX3BhZ2Vfc2V0dGluZ3NbXSA9IGFycmF5KAoJCQkncGFyZW50JyAgPT4gICRwYXJlbnRfc2x1ZywKCQkJJ3NsdWcnICAgPT4gICRwYWdlX3NsdWcsCgkJCSd0aXRsZScgICA9PiAgJHBhZ2VfdGl0bGUsCgkJCSdjYXBhYmlsaXR5JyA9PiAgJGNhcGFiaWxpdHksCgkJCSdpY29uJyAgID0+ICAkaWNvbiwKCQkJJ3NsdWdfcHJlZml4JyA9PiAgJHNsdWdfcHJlZml4LAoJCQkncG9zaXRpb24nICA9PiAgJHBvc2l0aW9uLAoJCSk7Cgl9IC8vIEVuZCBhZGRfcGFnZSgpLgkKCQoJCgkvKglyZWdpc3Rlcl9hZG1pbl9tZW51KCkKCSAqCQoJICoJSW50ZXJuYWwgY2FsbGJhY2sgZm9yIGFjdHVhbGx5IHJlZ2lzdGVyaW5nIHRoZSBtZW51IGl0ZW1zIGludG8gV29yZFByZXNzLiBSZWdpc3RlcnMgcGFnZXMgZGVmaW5lZCBieSBzZWxmOjphZGRfcGFnZSgpLgoJICoJQHNlZSBzZWxmOjphZGRfcGFnZSgpCgkgKgkKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZWdpc3Rlcl9hZG1pbl9tZW51KCkgewoJCWlmICggIXNlbGY6OmJsYW5rKCBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXSApICkgeyAvLyBTRVJJRVMKCQkJJHNlcmllc19zbHVnID0gJ3BiXycgLiBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXTsKCQkJLy8gV2UgbmVlZCB0byBzZWUgZmlyc3QgaWYgdGhpcyBzZXJpZXMnIHJvb3QgbWVudSBoYXMgYmVlbiBjcmVhdGVkIGJ5IGEgcGx1Z2luIHlldC4KCQkJZ2xvYmFsICRtZW51OwoJCQkkZm91bmRfc2VyaWVzID0gZmFsc2U7CgkJCWZvcmVhY2ggKCAkbWVudSBhcyAkbWVudXMgPT4gJGl0ZW0gKSB7IC8vIExvb3AgdGhyb3VnaCBleGlzdGluZyBtZW51IGl0ZW1zIGxvb2tpbmcgZm9yIG91ciBzZXJpZXMuCgkJCQlpZiAoICRpdGVtWzBdID09ICRzZXJpZXNfc2x1ZyApIHsKCQkJCQkkZm91bmRfc2VyaWVzID0gdHJ1ZTsKCQkJCX0KCQkJfQoJCQlpZiAoICRmb3VuZF9zZXJpZXMgPT09IGZhbHNlICkgeyAvLyBTZXJpZXMgcm9vdCBtZW51IGRvZXMgbm90IGV4aXN0OyBjcmVhdGUgaXQuCgkJCQlhZGRfbWVudV9wYWdlKCBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXSAuICcgR2V0dGluZyBTdGFydGVkJywgc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10sICdhY3RpdmF0ZV9wbHVnaW5zJywgJHNlcmllc19zbHVnLCBhcnJheSggJnNlbGY6OiRfcGFnZXMsICdnZXR0aW5nX3N0YXJ0ZWQnICksIHNlbGY6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL3Nlcmllc19pY29uXzE2eDE2LnBuZycgKTsgLy8gLCAkcGFnZVsncG9zaXRpb24nXQoJCQkJYWRkX3N1Ym1lbnVfcGFnZSggJHNlcmllc19zbHVnLCBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXSAuICcgR2V0dGluZyBTdGFydGVkJywgJ0dldHRpbmcgU3RhcnRlZCcsICdhY3RpdmF0ZV9wbHVnaW5zJywgJHNlcmllc19zbHVnLCBhcnJheSggJnNlbGY6OiRfcGFnZXMsICdnZXR0aW5nX3N0YXJ0ZWQnICkgKTsKCQkJfQoJCQkKCQkJLy8gUmVnaXN0ZXIgZm9yIGdldHRpbmcgc3RhcnRlZCBwYWdlLgoJCQlnbG9iYWwgJHBsdWdpbmJ1ZGR5X3NlcmllczsKCQkJaWYgKCAhaXNzZXQoICRwbHVnaW5idWRkeV9zZXJpZXNbIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddIF0gKSApIHsKCQkJCSRwbHVnaW5idWRkeV9zZXJpZXNbIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddIF0gPSBhcnJheSgpOwoJCQl9CgkJCQoJCQkvLyBBZGQgdGhpcyBwbHVnaW4gaW50byBnbG9iYWwgc2VyaWVzIHZhcmlhYmxlLgoJCQkkcGx1Z2luYnVkZHlfc2VyaWVzWyBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXSBdWyBzZWxmOjokX3NldHRpbmdzWydzbHVnJ10gXSA9IGFycmF5KAoJCQkJJ3BhdGgnCQk9PglzZWxmOjpwbHVnaW5fcGF0aCgpLAoJCQkJJ25hbWUnCQk9PglzZWxmOjpzZXR0aW5ncyggJ25hbWUnICksCgkJCQknc2x1ZycJCT0+CXNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSwKCQkJKTsKCQl9CgkJCgkJLy8gQWRkIGFsbCByZWdpc3RlcmVkIHBhZ2VzIGZvciB0aGlzIHBsdWdpbi4KCQlmb3JlYWNoICggc2VsZjo6JF9wYWdlX3NldHRpbmdzIGFzICRwYWdlICkgewoJCQkkbWVudV9zbHVnID0gJHBhZ2VbJ3NsdWdfcHJlZml4J10gLiAkcGFnZVsnc2x1ZyddOwoJCQlpZiAoICRwYWdlWydwYXJlbnQnXSA9PSAnU0VSSUVTJyApIHsgLy8gQWRkaW5nIHBhZ2UgaW50byBzZXJpZXMuCgkJCQkkcGFyZW50X3NsdWcgPSAncGJfJyAuIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddOwoJCQkJaWYgKCBzZWxmOjpibGFuayggc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10gKSApIHsgLy8gTm8gc2VyaWVzIHNldCBidXQgbWVudSBpcyByZWdpc3RlcmVkIGludG8gYSBzZXJpZXMuCgkJCQkJZWNobyAne1dBUk5JTkc6IE1lbnUgaXRlbSByZWdpc3RlcmVkIGludG8gYSBzZXJpZXMgYnV0IG5vIHBsdWdpbiBzZXJpZXMgaXMgZGVmaW5lZC59JzsKCQkJCX0KCQkJfSBlbHNlIHsgLy8gTm9uLXNlcmllcyBwYWdlLgoJCQkJJHBhcmVudF9zbHVnID0gJHBhZ2VbJ3NsdWdfcHJlZml4J10gLiAkcGFnZVsncGFyZW50J107CgkJCX0KCgkJCWlmICggaXNfYXJyYXkoICRwYWdlWyd0aXRsZSddICkgKSB7CgkJCQkkcGFnZV90aXRsZSA9ICRwYWdlWyd0aXRsZSddWzBdOwoJCQkJJHBhZ2VfdGl0bGVfYWx0ID0gJHBhZ2VbJ3RpdGxlJ11bMV07CgkJCX0gZWxzZSB7IC8vIE5vdCBhbiBhcnJheSBzbyBvbmx5IG9uZSBwYWdlIHRpdGxlLgoJCQkJJHBhZ2VfdGl0bGUgPSAkcGFnZVsndGl0bGUnXTsKCQkJCSRwYWdlX3RpdGxlX2FsdCA9ICRwYWdlWyd0aXRsZSddOwoJCQl9CgkJCQoJCQkvLyBDYWxjdWxhdGUgaWNvbi4KCQkJaWYgKCAnJyAhPSAkcGFnZVsnaWNvbiddICkgeyAvLyBJZiBpY29uIHNwZWNpZmllZCB0aGVuIGZpZ3VyZSBvdXQgdXJsLgoJCQkJJGljb24gPSAkcGFnZVsnaWNvbiddOyAvL3NlbGY6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzLycgLiAkcGFnZVsnaWNvbiddOwoJCQl9IGVsc2UgeyAvLyBObyBpY29uLiBVc3VhbGx5IHVzZWQgd2hlbiBtYW51YWxseSBkb2luZyBDU1MgZm9yIHJldGluYSBpY29uLgoJCQkJJGljb24gPSAnJzsKCQkJfQoJCQkKCQkJaWYgKCBzZWxmOjpibGFuayggJHBhZ2VbJ3BhcmVudCddICkgKSB7IC8vIFRvcC1sZXZlbCBtZW51LgoJCQkJYWRkX21lbnVfcGFnZSggJHBhZ2VfdGl0bGUsICRwYWdlX3RpdGxlLCAkcGFnZVsnY2FwYWJpbGl0eSddLCAkbWVudV9zbHVnLCBhcnJheSggJnNlbGY6OiRfcGFnZXMsICRwYWdlWydzbHVnJ10gKSwgJGljb24sICRwYWdlWydwb3NpdGlvbiddICk7CgkJCQlhZGRfc3VibWVudV9wYWdlKCAkbWVudV9zbHVnLCBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICkgLiAnICZsc2FxdW87ICcgLiAkcGFnZV90aXRsZV9hbHQsICRwYWdlX3RpdGxlX2FsdCwgJHBhZ2VbJ2NhcGFiaWxpdHknXSwgJG1lbnVfc2x1ZywgYXJyYXkoICZzZWxmOjokX3BhZ2VzLCAkcGFnZVsnc2x1ZyddICkgKTsgLy8gQWxsb3dzIG5hbWluZyBvZiBmaXJzdCBzdWJtZW51IGl0ZW0gZGlmZmVyZW50bHkgZnJvbSB0aGUgcGFyZW50LiBFbHNlIGl0cyBhdXRvIGNyZWF0ZWQgd2l0aCBzYW1lIG5hbWUuCgkJCX0gZWxzZSB7IC8vIFN1Yi1tZW51LgoJCQkJYWRkX3N1Ym1lbnVfcGFnZSggJHBhcmVudF9zbHVnLCBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICkgLiAnICZsc2FxdW87ICcgLiAkcGFnZV90aXRsZSwgJHBhZ2VfdGl0bGUsICRwYWdlWydjYXBhYmlsaXR5J10sICRtZW51X3NsdWcsIGFycmF5KCAmc2VsZjo6JF9wYWdlcywgJHBhZ2VbJ3NsdWcnXSApICk7CgkJCX0KCQl9Cgl9IC8vIEVuZCByZWdpc3Rlcl9hZG1pbl9tZW51KCkuCgkKCQoJCgkvKglzZWxmOjphZGRfYWN0aW9uKCkKCSAqCQoJICoJUmVnaXN0ZXJzIGEgV29yZFByZXNzIGFjdGlvbi4gQWN0aW9uIG9mIHRoZSBuYW1lICR0YWcgd2lsbCBjYWxsIHRoZSBtZXRob2QgaW4gL2NvbnRyb2xsZXJzL2FjdGlvbnMucGhwIHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nL2FycmF5CSR0YWcJCQkJVGFnIC8gc2x1ZyBmb3IgdGhlIGFjdGlvbi4gSWYgYW4gYXJyYXkgdGhlIGZpcnN0IGl0ZW0gaXMgdGhlIHRhZywgdGhlIHNlY29uZCBpcyBhbiBvcHRpb25hbCBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkgKglAcGFyYW0JCWludAkJCQkkcHJpb3JpdHkJCQlJbnRlZ2VyIHByaW9yaXR5IG51bWJlciBmb3IgdGhlIGFjdGlvbi4KCSAqCUBwYXJhbQkJaW50CQkJCSRhY2NlcHRlZF9hcmdzCQlOdW1iZXIgb2YgYXJndW1lbnRzIHRoaXMgYWN0aW9uIG1heSBhY2NlcHQgaW4gaXRzIG1ldGhvZC4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfYWN0aW9uKCAkdGFnLCAkcHJpb3JpdHkgPSAxMCwgJGFjY2VwdGVkX2FyZ3MgPSAxICkgewoJCWlmICggIWlzX29iamVjdCggc2VsZjo6JF9hY3Rpb25zICkgKSB7IHNlbGY6Ol9pbml0X2NvcmVfY29udHJvbGxlciggJ2FjdGlvbnMnICk7IH0KCQlpZiAoIGlzX2FycmF5KCAkdGFnICkgKSB7IC8vIElmIGFycmF5IHRoZW4gZmlyc3QgcGFyYW0gaXMgdGFnLCBzZWNvbmQgcGFyYW0gaXMgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZ1sxXTsKCQkJJHRhZyA9ICR0YWdbMF07CgkJfSBlbHNlIHsgLy8gTm8gY3VzdG9tIG1ldGhvZCBuYW1lIHNvIHRhZyBhbmQgY2FsbGJhY2sgbWV0aG9kIG5hbWUgYXJlIHRoZSBzYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZzsKCQkJaWYgKCBzdHJwb3MoICR0YWcsICcuJyApICE9PSBmYWxzZSApIHsKCQkJCWVjaG8gJ3tXYXJuaW5nOiBZb3VyIHRhZyBjb250YWlucyBkaXNhbGxvd2VkIGNoYXJhY3RlcnMuIFRhZyBuYW1lcyBhcmUgZXF1YWwgdG8gdGhlIFBIUCBtZXRob2QgdGhhdCBpcyBjYWxsZWQgYmFjayBzbyB0aGV5IG11c3QgY29uZm9ybSB0byBQSFAgbWV0aG9kIG5hbWUgc3RhbmRhcmRzLiBGb3IgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lcyB1c2UgYW4gYXJyYXkgZm9yIHRoZSB0YWcgcGFyYW1ldGVyIGluIHRoZSBmb3JtOiBhcnJheSggXCd0YWdcJywgXCdjYWxsYmFja19uYW1lXCcgKS59JzsKCQkJfQoJCX0KCQlhZGRfYWN0aW9uKCAkdGFnLCBhcnJheSggJnNlbGY6OiRfYWN0aW9ucywgJGNhbGxiYWNrX21ldGhvZCApLCAkcHJpb3JpdHksICRhY2NlcHRlZF9hcmdzICk7Cgl9IC8vIEVuZCBhZGRfYWN0aW9uKCkuCgkKCQoJCgkvKglzZWxmOjphZGRfYWpheCgpCgkgKgkKCSAqCVJlZ2lzdGVycyBhIFdvcmRQcmVzcyBhamF4IGFjdGlvbi4gQWpheCBhY3Rpb24gb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvYWpheC5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcvYXJyYXkJCSR0YWcJCQkJVGFnIC8gc2x1ZyBmb3IgdGhlIGFjdGlvbi4gSWYgYW4gYXJyYXkgdGhlIGZpcnN0IGl0ZW0gaXMgdGhlIHRhZywgdGhlIHNlY29uZCBpcyBhbiBvcHRpb25hbCBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX2FqYXgoICR0YWcgKSB7CgkJaWYgKCAhaXNfb2JqZWN0KCBzZWxmOjokX2FqYXggKSApIHsgc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnYWpheCcgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9hY3Rpb24oICd3cF9hamF4X3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICkgLiAnXycgLiAkdGFnLCBhcnJheSggJnNlbGY6OiRfYWpheCwgJGNhbGxiYWNrX21ldGhvZCApICk7Cgl9IC8vIEVuZCBhZGRfYWpheCgpLgoJCgkKCQoJLyoJc2VsZjo6YWRkX2Nyb24oKQoJICoJCgkgKglSZWdpc3RlcnMgYSBXb3JkUHJlc3MgY3JvbiBjYWxsYmFjayAodGVjaG5pY2FsbHkgYW4gYWN0aW9uKS4gQ3JvbiBhY3Rpb24gb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvY3Jvbi5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKglAcGFyYW0JCXN0cmluZy9hcnJheQkkdGFnCQkJCVRhZyAvIHNsdWcgZm9yIHRoZSBjcm9uIGFjdGlvbi4gSWYgYW4gYXJyYXkgdGhlIGZpcnN0IGl0ZW0gaXMgdGhlIHRhZywgdGhlIHNlY29uZCBpcyBhbiBvcHRpb25hbCBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkgKglAcGFyYW0JCWludAkJCQkkcHJpb3JpdHkJCQlJbnRlZ2VyIHByaW9yaXR5IG51bWJlciBmb3IgdGhlIGNyb24gYWN0aW9uLgoJICoJQHBhcmFtCQlpbnQJCQkJJGFjY2VwdGVkX2FyZ3MJCU51bWJlciBvZiBhcmd1bWVudHMgdGhpcyBhY3Rpb24gbWF5IGFjY2VwdCBpbiBpdHMgbWV0aG9kLgoJICoJQHJldHVybgkJbnVsbAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFkZF9jcm9uKCAkdGFnLCAkcHJpb3JpdHkgPSAxMCwgJGFjY2VwdGVkX2FyZ3NfbnVtID0gMSApIHsKCQlpZiAoICFpc19vYmplY3QoIHNlbGY6OiRfY3JvbiApICkgeyBzZWxmOjpfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICdjcm9uJyApOyB9CgkJaWYgKCBpc19hcnJheSggJHRhZyApICkgeyAvLyBJZiBhcnJheSB0aGVuIGZpcnN0IHBhcmFtIGlzIHRhZywgc2Vjb25kIHBhcmFtIGlzIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCQkJJGNhbGxiYWNrX21ldGhvZCA9ICR0YWdbMV07CgkJCSR0YWcgPSAkdGFnWzBdOwoJCX0gZWxzZSB7IC8vIE5vIGN1c3RvbSBtZXRob2QgbmFtZSBzbyB0YWcgYW5kIGNhbGxiYWNrIG1ldGhvZCBuYW1lIGFyZSB0aGUgc2FtZS4KCQkJJGNhbGxiYWNrX21ldGhvZCA9ICR0YWc7CgkJCWlmICggc3RycG9zKCAkdGFnLCAnLicgKSAhPT0gZmFsc2UgKSB7CgkJCQllY2hvICd7V2FybmluZzogWW91ciB0YWcgY29udGFpbnMgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzLiBUYWcgbmFtZXMgYXJlIGVxdWFsIHRvIHRoZSBQSFAgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIGJhY2sgc28gdGhleSBtdXN0IGNvbmZvcm0gdG8gUEhQIG1ldGhvZCBuYW1lIHN0YW5kYXJkcy4gRm9yIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZXMgdXNlIGFuIGFycmF5IGZvciB0aGUgdGFnIHBhcmFtZXRlciBpbiB0aGUgZm9ybTogYXJyYXkoIFwndGFnXCcsIFwnY2FsbGJhY2tfbmFtZVwnICkufSc7CgkJCX0KCQl9CgkJYWRkX2FjdGlvbiggc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApIC4gJ18nIC4gJHRhZywgYXJyYXkoICZzZWxmOjokX2Nyb24sICRjYWxsYmFja19tZXRob2QgKSwgJHByaW9yaXR5LCAkYWNjZXB0ZWRfYXJnc19udW0gKTsKCX0gLy8gRW5kIGFkZF9jcm9uKCkuCgkKCQoJCgkvKglzZWxmOjphZGRfZGFzaGJvYXJkX3dpZGdldCgpCgkgKgkKCSAqCVJlZ2lzdGVycyBhIFdvcmRQcmVzcyBhY3Rpb24uIEFjdGlvbiBvZiB0aGUgbmFtZSAkdGFnIHdpbGwgY2FsbCB0aGUgbWV0aG9kIGluIC9jb250cm9sbGVycy9kYXNoYm9hcmQucGhwIHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nL2FycmF5CSR0YWcJCQkJVGFnIC8gc2x1ZyBmb3IgdGhlIGFjdGlvbi4KCSAqCUBwYXJhbQkJc3RyaW5nCQkJJHRpdGxlCQkJCURhc2hib2FyZCB3aWRnZXQgdGl0bGUuCgkgKglAcGFyYW0JCXN0cmluZwkJCSRjYXBhYmlsaXR5CQkJUmVxdWlyZWQgY2FwYWJpbGl0eSB0byBkaXNwbGF5LiBBbHNvIGFjY2VwdHMgYGdvZG1vZGVgIHRvIG9ubHkgYWxsb3cgc3VwZXJhZG1pbnMgaW4gbXVsdGlzaXRlIGFuZCBhZG1pbnMgaW4gc3RhbmRhbG9uZS4KCSAqCUBwYXJhbQkJYm9vbGVhbgkJCSRhY2NlcHRlZF9hcmdzCQlOdW1iZXIgb2YgYXJndW1lbnRzIHRoaXMgYWN0aW9uIG1heSBhY2NlcHQgaW4gaXRzIG1ldGhvZC4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfZGFzaGJvYXJkX3dpZGdldCggJHRhZywgJHRpdGxlLCAkY2FwYWJpbGl0eSwgJGZvcmNlX3RvcCA9IGZhbHNlICkgewoJCWlmICggIWlzX29iamVjdCggc2VsZjo6JF9kYXNoYm9hcmQgKSApIHsKCQkJc2VsZjo6JF9kYXNoYm9hcmRfd2lkZ2V0cyA9IGFycmF5KCk7IC8vIEluaXQgdmFyaWFibGUuCgoJCQlzZWxmOjpfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICdkYXNoYm9hcmQnICk7CgkJCQoJCQlpZiAoIGlzX25ldHdvcmtfYWRtaW4oKSApIHsgLy8gTmV0d29yayBhZG1pbi4KCQkJCWFkZF9hY3Rpb24oICd3cF9uZXR3b3JrX2Rhc2hib2FyZF9zZXR1cCcsIGFycmF5KCAmc2VsZjo6JF9kYXNoYm9hcmQsICdyZWdpc3Rlcl93aWRnZXRzJyApICk7CgkJCX0gZWxzZSB7IC8vIE5vcm1hbCBhZG1pbi4KCQkJCWFkZF9hY3Rpb24oICd3cF9kYXNoYm9hcmRfc2V0dXAnLCBhcnJheSggJnNlbGY6OiRfZGFzaGJvYXJkLCAncmVnaXN0ZXJfd2lkZ2V0cycgKSApOwoJCQl9CgkJfQoJCXNlbGY6OiRfZGFzaGJvYXJkX3dpZGdldHNbXSA9IGFycmF5KCAndGFnJyA9PiAkdGFnLCAndGl0bGUnID0+ICR0aXRsZSwgJ2NhcGFiaWxpdHknID0+ICRjYXBhYmlsaXR5LCAnZm9yY2VfdG9wJyA9PiAkZm9yY2VfdG9wICk7IC8vIFB1c2ggaW50byBhcnJheSB0byBiZSBsYXRlciByZWdpc3RlcmVkIHZpYSBkYXNoYm9hcmQgY29udHJvbGxlcidzIHJlZ2lzdGVyX3dpZGdldHMgZnVuY3Rpb24uCgl9IC8vIEVuZCBhZGRfZGFzaGJvYXJkX3dpZGdldCgpLgoJCgkKCQoJLyoJc2VsZjo6YWRkX2ZpbHRlcigpCgkgKgkKCSAqCVJlZ2lzdGVycyBhIFdvcmRQcmVzcyBmaWx0ZXIuIEZpbHRlciBvZiB0aGUgbmFtZSAkdGFnIHdpbGwgY2FsbCB0aGUgbWV0aG9kIGluIC9jb250cm9sbGVycy9maWx0ZXJzLnBocCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLgoJICoJCgkgKglAcGFyYW0JCXN0cmluZy9hcnJheQkJJHRhZwkJCQlUYWcgLyBzbHVnIGZvciB0aGUgYWN0aW9uLiBJZiBhbiBhcnJheSB0aGUgZmlyc3QgaXRlbSBpcyB0aGUgdGFnLCB0aGUgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCSAqCUBwYXJhbQkJaW50CQkJCSRwcmlvcml0eQkJCUludGVnZXIgcHJpb3JpdHkgbnVtYmVyIGZvciB0aGUgZmlsdGVyLgoJICoJQHBhcmFtCQlpbnQJCQkJJGFjY2VwdGVkX2FyZ3MJCU51bWJlciBvZiBhcmd1bWVudHMgdGhpcyBmaWx0ZXIgbWF5IGFjY2VwdCBpbiBpdHMgbWV0aG9kLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFkZF9maWx0ZXIoICR0YWcsICRwcmlvcml0eSA9IDEwLCAkYWNjZXB0ZWRfYXJncyA9IDEgKSB7CgkJaWYgKCAhaXNfb2JqZWN0KCBzZWxmOjokX2ZpbHRlcnMgKSApIHsgc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnZmlsdGVycycgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9maWx0ZXIoICR0YWcsIGFycmF5KCAmc2VsZjo6JF9maWx0ZXJzLCAkY2FsbGJhY2tfbWV0aG9kICksICRwcmlvcml0eSwgJGFjY2VwdGVkX2FyZ3MgKTsKCX0gLy8gRW5kIGFkZF9maWx0ZXIoKS4KCQoJCgkKCS8qCXNlbGY6OmFkZF9zaG9ydGNvZGUoKQoJICoJCgkgKglSZWdpc3RlcnMgYSBXb3JkUHJlc3Mgc2hvcnRjb2RlLiBTaG9ydGNvZGUgb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvc2hvcnRjb2Rlcy5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcvYXJyYXkJCSR0YWcJCQkJVGFnIC8gc2x1ZyBmb3IgdGhlIHNob3J0Y29kZS4gSWYgYW4gYXJyYXkgdGhlIGZpcnN0IGl0ZW0gaXMgdGhlIHRhZywgdGhlIHNlY29uZCBpcyBhbiBvcHRpb25hbCBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkgKglAcmV0dXJuCQkKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfc2hvcnRjb2RlKCAkdGFnICkgewoJCWlmICggIWlzX29iamVjdCggc2VsZjo6JF9zaG9ydGNvZGVzICkgKSB7IHNlbGY6Ol9pbml0X2NvcmVfY29udHJvbGxlciggJ3Nob3J0Y29kZXMnICk7IH0KCQlpZiAoIGlzX2FycmF5KCAkdGFnICkgKSB7IC8vIElmIGFycmF5IHRoZW4gZmlyc3QgcGFyYW0gaXMgdGFnLCBzZWNvbmQgcGFyYW0gaXMgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZ1sxXTsKCQkJJHRhZyA9ICR0YWdbMF07CgkJfSBlbHNlIHsgLy8gTm8gY3VzdG9tIG1ldGhvZCBuYW1lIHNvIHRhZyBhbmQgY2FsbGJhY2sgbWV0aG9kIG5hbWUgYXJlIHRoZSBzYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZzsKCQkJaWYgKCBzdHJwb3MoICR0YWcsICcuJyApICE9PSBmYWxzZSApIHsKCQkJCWVjaG8gJ3tXYXJuaW5nOiBZb3VyIHRhZyBjb250YWlucyBkaXNhbGxvd2VkIGNoYXJhY3RlcnMuIFRhZyBuYW1lcyBhcmUgZXF1YWwgdG8gdGhlIFBIUCBtZXRob2QgdGhhdCBpcyBjYWxsZWQgYmFjayBzbyB0aGV5IG11c3QgY29uZm9ybSB0byBQSFAgbWV0aG9kIG5hbWUgc3RhbmRhcmRzLiBGb3IgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lcyB1c2UgYW4gYXJyYXkgZm9yIHRoZSB0YWcgcGFyYW1ldGVyIGluIHRoZSBmb3JtOiBhcnJheSggXCd0YWdcJywgXCdjYWxsYmFja19uYW1lXCcgKS59JzsKCQkJfQoJCX0KCQlhZGRfc2hvcnRjb2RlKCAkdGFnLCBhcnJheSggJnNlbGY6OiRfc2hvcnRjb2RlcywgJGNhbGxiYWNrX21ldGhvZCApICk7Cgl9IC8vIEVuZCBhZGRfc2hvcnRjb2RlKCkuCgkKCQoJCgkvKglzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoKQoJICoJCgkgKglSZWdpc3RlcnMgdGhlIFVJIGNsYXNzIGludG8gdGhlIHBsdWdpbmJ1ZGR5IGZyYW1ld29yayBmb3IgcGFnZXMuIFJlZ2lzdGVyZWQgb24gZGVtYW5kIGJ5IHBhZ2VzIGNvbnRyb2xsZXIuCgkgKglAc2VlIHBhZ2VzIGNvbnRyb2xsZXIKCSAqCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaW5pdF9jbGFzc19jb250cm9sbGVyKCAkY2xhc3Nfc2x1ZyApIHsKCQlpZiAoICFpc19vYmplY3QoIHNlbGY6OiQkY2xhc3Nfc2x1ZyApICkgewoJCQkkY2xhc3NfZmlsZSA9IHNlbGY6OnBsdWdpbl9wYXRoKCkgLiAnL3BsdWdpbmJ1ZGR5L2NsYXNzZXMvJyAuICRjbGFzc19zbHVnIC4gJy5waHAnOwoJCQlpZiAoIGZpbGVfZXhpc3RzKCAkY2xhc3NfZmlsZSApICkgewoJCQkJcmVxdWlyZV9vbmNlKCAkY2xhc3NfZmlsZSApOwoJCQkJJGNsYXNzX25hbWUgPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJyAuICRjbGFzc19zbHVnOwoJCQkJc2VsZjo6JCRjbGFzc19zbHVnID0gbmV3ICRjbGFzc19uYW1lKCk7CgkJCX0gZWxzZSB7CgkJCQllY2hvICd7RXJyb3I6IE1pc3NpbmcgY2xhc3MgY29udHJvbGxlciBmaWxlIGAnIC4gJGNsYXNzX2ZpbGUgLiAnYC59JzsKCQkJfQoJCX0KCX0KCQoJCgkKCS8qCXNlbGY6Ol9pbml0X2NvcmVfY29udHJvbGxlcigpCgkgKgkKCSAqCUluaXRpYWxpemUgYSBjb3JlIGNvbnRyb2xsZXIgY2xhc3MgKGV4OiBwYWdlcywgYWpheCwgZmlsdGVycywgZXRjKSBmb3IgcGx1Z2luYnVkZHkgZnJhbWV3b3JrIHVzYWdlLgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJG5hbWUJCU5hbWUgb2YgdGhlIGNvbnRyb2xsZXIgdG8gcmVnaXN0ZXIuIFZhbGlkIGNvbnRyb2xsZXJzOiBhY3Rpb25zLCBhamF4LCBjcm9uLCBkYXNoYm9hcmQsIGZpbHRlcnMsIHNob3J0Y29kZXMsIHBhZ2VzLgoJICoJQHJldHVybgkJCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9pbml0X2NvcmVfY29udHJvbGxlciggJG5hbWUgKSB7CgkJaWYgKCAhaXNfYXJyYXkoIHNlbGY6OiRvcHRpb25zICkgKSB7IHNlbGY6OmxvYWQoKTsgfSAvLyBBc3N1bWUgd2UgbmVlZCBwbHVnaW4gb3B0aW9ucyBuZWVkIGxvYWRlZCBpZiBjb250cm9sbGVycyBhcmUgbG9hZGVkIGZvciB0aGlzIHNlc3Npb24uCgkJCgkJcmVxdWlyZV9vbmNlKCBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy9jb250cm9sbGVycy8nIC4gJG5hbWUgLiAnLnBocCcgKTsKCQkkY2xhc3NuYW1lID0gJ3BiX2JhY2t1cGJ1ZGR5XycgLiAkbmFtZTsKCQkkaW50ZXJuYWxfY2xhc3NuYW1lID0gJ18nIC4gJG5hbWU7CgkJc2VsZjo6JCRpbnRlcm5hbF9jbGFzc25hbWUgPSBuZXcgJGNsYXNzbmFtZSgpOwoJfSAvLyBFbmQgX2luaXRfY29yZV9jb250cm9sbGVyKCkuCgkKCQoJCgkvKglzZWxmOjpub25jZSgpCgkgKgkKCSAqCUVjaG9zIG9yIHJldHVybnMgYSBXb3JkUHJlc3Mgbm9uY2UgZm9yIHRoZSBmcmFtZXdvcmsuIEhhbmRsZXMgcHJlZml4aW5nLiBVc2Ugd2l0aCBmb3JtcyBmb3Igc2VjdXJpdHkuIFZlcmlmaWVzIHRoZSB1c2VyIGNhbWUgZnJvbSBhIFdQIGdlbmVyYXRlZCBwYWdlLgoJICoJCgkgKglAcGFyYW0JCWJvb2xlYW4JCSRlY2hvCQlUcnVlOiBlY2hvcyB0aGUgbm9uZTsgZmFsc2U6IHJldHVybnMgbm9uY2UuCgkgKglAcmV0dXJuCQludWxsL3N0cmluZwkJCQlSZXR1cm5zIG51bGwgb3Igc3RyaW5nIGJhc2VkIG9uICRlY2hvIHZhbHVlLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG5vbmNlKCAkZWNobyA9IHRydWUgKSB7CgkJcmV0dXJuIHdwX25vbmNlX2ZpZWxkKCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnbmFtZScgKSAuICctbm9uY2UnLCAnX3dwbm9uY2UnLCB0cnVlLCAkZWNobyApOwoJfSAvLyBFbmQgbm9uY2UoKS4KCQoJCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbm9uY2VfdXJsKCAkYmFyZV91cmwgKSB7CgkJcmV0dXJuIHdwX25vbmNlX3VybCggJGJhcmVfdXJsLCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnbmFtZScgKSAuICctbm9uY2UnICk7Cgl9CgkKCQoJLyoJc2VsZjo6dmVyaWZ5X25vbmNlKCkKCSAqCQoJICoJVmVyaWZpZXMgdGhlIG5vbmNlIHN1Ym1pdHRlZCBpbiBmb3JtLgoJICoJCgkgKglAcmV0dXJuCQludWxsL3RydWUJCVNjcmlwdCBkaWUoKSdzIG9uIGZhaWx1cmUsIHJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHZlcmlmeV9ub25jZSgpIHsKCQljaGVja19hZG1pbl9yZWZlcmVyKCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnbmFtZScgKSAuICctbm9uY2UnICk7Cgl9IC8vIEVuZCB2ZXJpZnlfbm9uY2UoKS4KCQoJCgkKCS8qCXNlbGY6OmxvYWRfc2NyaXB0KCkKCSAqCQoJICoJTG9hZCBhIEphdmFTY3JpcHQgZmlsZSBpbnRvIHRoZSBwYWdlLiBIYW5kbGVzIHByZWZpeGVkLCBlbnF1ZXVpbmcsIGV0Yy4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRzY3JpcHQJCQlJZiBhIC5qcyBmaWxlIGlzIGluY2x1ZGVkIHRoZW4gYSBmaWxlIGluIHRoZSBqcyBkaXJlY3RvcnkgaXMgbG9hZGVkOyBlbHNlIGxvYWRzIGEgYnVpbHQtaW4gbmFtZWQgbGlicmFyeSBzY3JpcHQuCgkgKgkJCQkJCQkJCQkJRXg6IGxvYWRfc2NyaXB0KCAnc29ydC5qcycgKSB3aWxsIGxvYWQgL3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4vanMvc29ydC5qczsgbG9hZF9zY3JpcHQoICdqcXVlcnknICkgd2lsbCBsb2FkIGludGVybmFsIGpxdWVyeSBsaWJyYXJ5IGluIFdvcmRQcmVzcyBpZiBpdCBleGlzdHMuCgkgKglAcGFyYW0JCWJvb2xlYW4JCSRjb3JlX3NjcmlwdAlJZiB0cnVlIHNjcmlwdHMgYXJlIGxvYWRlZCBmcm9tIC9wbHVnaW5idWRkeS9qcy9TQ1JJUFQuanMuIEVsc2Ugc2NyaXB0cyBsb2FkZWQgZnJvbSBwbHVnaW4ncyBqcyBkaXJlY3RvcnkuCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9zY3JpcHQoICRzY3JpcHQsICRjb3JlX3NjcmlwdCA9IGZhbHNlICkgewoJCWlmICggc3Ryc3RyKCAkc2NyaXB0LCAnLmpzJyApICkgeyAvLyBMb2FkaW5nIGEgZmlsZSBzcGVjaWZpY2FsbHkuCgkJCWlmICggJGNvcmVfc2NyaXB0ID09PSB0cnVlICkgewoJCQkJaWYgKCBkZWZpbmVkKCAnUEJfU1RBTkRBTE9ORScgKSAmJiBQQl9TVEFOREFMT05FID09PSB0cnVlICkgewoJCQkJCSR1cmxfcGF0aCA9ICdpbXBvcnRidWRkeS9wbHVnaW5idWRkeS9qcy8nOwoJCQkJfSBlbHNlIHsKCQkJCQkkdXJsX3BhdGggPSBzZWxmOjokX3BsdWdpbl91cmwgLiAnL3BsdWdpbmJ1ZGR5L2pzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL3BsdWdpbmJ1ZGR5L2pzLyc7CgkJCQkkc2NyaXB0X25hbWUgPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfY29yZV8nIC4gJHNjcmlwdDsKCQkJfSBlbHNlIHsKCQkJCWlmICggZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgJiYgUEJfU1RBTkRBTE9ORSA9PT0gdHJ1ZSApIHsKCQkJCQkkdXJsX3BhdGggPSAnaW1wb3J0YnVkZHkvanMvJzsKCQkJCX0gZWxzZSB7CgkJCQkJJHVybF9wYXRoID0gc2VsZjo6JF9wbHVnaW5fdXJsIC4gJy9qcy8nOwoJCQkJfQoJCQkJJGxvY2FsX3BhdGggPSBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy9qcy8nOwoJCQkJJHNjcmlwdF9uYW1lID0gJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICkgLiAnXycgLiAkc2NyaXB0OwoJCQl9CgkJCQoJCQlpZiAoICF3cF9zY3JpcHRfaXMoICRzY3JpcHRfbmFtZSApICkgeyAvLyBPbmx5IGxvYWQgc2NyaXB0IG9uY2UuCgkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkbG9jYWxfcGF0aCAuICRzY3JpcHQgKSApIHsgLy8gTG9hZCBvdXIgbG9jYWwgc2NyaXB0IGlmIGZpbGUgZXhpc3RzLgoJCQkJCXdwX2VucXVldWVfc2NyaXB0KCAkc2NyaXB0X25hbWUsICR1cmxfcGF0aCAuICRzY3JpcHQsIGFycmF5KCksIHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ3ZlcnNpb24nICkgKTsKCQkJCQl3cF9wcmludF9zY3JpcHRzKCAkc2NyaXB0X25hbWUgKTsKCQkJCX0gZWxzZSB7CgkJCQkJZWNobyAne0Vycm9yOiBKYXZhc2NyaXB0IGZpbGUgd2FzIHNldCB0byBsb2FkIHRoYXQgZGlkIG5vdCBleGlzdDogYCcgLiAkdXJsX3BhdGggLiAkc2NyaXB0IC4gJ2B9JzsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7IC8vIE5vdCBhIHNwZWNpZmljIGZpbGUuCgkJCWlmICggIXdwX3NjcmlwdF9pcyggJHNjcmlwdCwgJ2RvbmUnICkgKSB7IC8vIE9ubHkgUFJJTlQgc2NyaXB0IG9uY2UuIENoZWNrcyB0aGUgZG9uZSB3cHNjcmlwdCBsaXN0IHRvIHNlZSBpZiBpdCdzIGJlZW4gcHJpbnRlZCB5ZXQgb3Igbm90LgoJCQkJd3BfZW5xdWV1ZV9zY3JpcHQoICRzY3JpcHQgKTsKCQkJCXdwX3ByaW50X3NjcmlwdHMoICRzY3JpcHQgKTsKCQkJfQoJCX0KCX0gLy8gRW5kIGxvYWRfc2NyaXB0KCkuCgkKCQoJCgkvKglzZWxmOjpsb2FkX3N0eWxlKCkKCSAqCQoJICoJTG9hZCBhIENTUyBmaWxlIGludG8gdGhlIHBhZ2UuIEhhbmRsZXMgcHJlZml4ZWQsIGVucXVldWluZywgZXRjLgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHN0eWxlCQkJSWYgYSAuY3NzIGZpbGUgaXMgaW5jbHVkZWQgdGhlbiBhIGZpbGUgaW4gdGhlIGNzcyBkaXJlY3RvcnkgaXMgbG9hZGVkOyBlbHNlIGxvYWRzIGEgYnVpbHQtaW4gbmFtZWQgbGlicmFyeSBzdHlsZS4KCSAqCQkJCQkJCQkJCQlFeDogbG9hZF9zdHlsZSggJ3NvcnQuY3NzJyApIHdpbGwgbG9hZCAvd3AtY29udGVudC9wbHVnaW5zL215X3BsdWdpbi9jc3Mvc29ydC5jc3M7IGxvYWRfc3R5bGUoICdkYXNoYm9hcmQnICkgd2lsbCBsb2FkIGludGVybmFsIGRhc2hib2FyZCBjc3MgaW4gV29yZFByZXNzIGlmIGl0IGV4aXN0cy4KCSAqCUBwYXJhbQkJYm9vbGVhbgkJJGNvcmVfc3R5bGUJCUlmIHRydWUgc3R5bGVzIGFyZSBsb2FkZWQgZnJvbSAvcGx1Z2luYnVkZHkvY3NzL1NUWUxFLmNzcy4gRWxzZSBzdHlsZXMgbG9hZGVkIGZyb20gcGx1Z2luJ3MgY3NzIGRpcmVjdG9yeS4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBsb2FkX3N0eWxlKCAkc3R5bGUsICRjb3JlX3N0eWxlID0gZmFsc2UgKSB7CgkJaWYgKCBzdHJzdHIoICRzdHlsZSwgJy5jc3MnICkgKSB7IC8vIExvYWRpbmcgYSBmaWxlIHNwZWNpZmljYWxseS4KCQkJaWYgKCAkY29yZV9zdHlsZSA9PT0gdHJ1ZSApIHsKCQkJCWlmICggZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgJiYgUEJfU1RBTkRBTE9ORSA9PT0gdHJ1ZSApIHsKCQkJCQkkdXJsX3BhdGggPSAnaW1wb3J0YnVkZHkvcGx1Z2luYnVkZHkvY3NzLyc7CgkJCQl9IGVsc2UgewoJCQkJCSR1cmxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3VybCAuICcvcGx1Z2luYnVkZHkvY3NzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL3BsdWdpbmJ1ZGR5L2Nzcy8nOwoJCQkJJGNvcmVfdHlwZSA9ICdjb3JlJzsKCQkJfSBlbHNlIHsKCQkJCWlmICggZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgJiYgUEJfU1RBTkRBTE9ORSA9PT0gdHJ1ZSApIHsKCQkJCQkkdXJsX3BhdGggPSAnaW1wb3J0YnVkZHkvY3NzLyc7CgkJCQl9IGVsc2UgewoJCQkJCSR1cmxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3VybCAuICcvY3NzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL2Nzcy8nOwoJCQkJJGNvcmVfdHlwZSA9ICdub25jb3JlJzsKCQkJfQoJCQkkc3R5bGVfbmFtZSA9ICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApIC4gJ18nIC4gJGNvcmVfdHlwZSAuICdfJyAuICRzdHlsZTsKCQkJaWYgKCAhd3Bfc3R5bGVfaXMoICRzdHlsZV9uYW1lICkgKSB7IC8vIE9ubHkgbG9hZCBzdHlsZSBvbmNlLgoJCQkJaWYgKCBmaWxlX2V4aXN0cyggJGxvY2FsX3BhdGggLiAkc3R5bGUgKSApIHsgLy8gTG9hZCBvdXIgbG9jYWwgc3R5bGUgaWYgZmlsZSBleGlzdHMuCgkJCQkJd3BfZW5xdWV1ZV9zdHlsZSggJHN0eWxlX25hbWUsICR1cmxfcGF0aCAuICRzdHlsZSwgYXJyYXkoKSwgcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAndmVyc2lvbicgKSApOwoJCQkJCXdwX3ByaW50X3N0eWxlcyggJHN0eWxlX25hbWUgKTsKCQkJCX0gZWxzZSB7CgkJCQkJZWNobyAne0Vycm9yOiBDU1MgZmlsZSB3YXMgc2V0IHRvIGxvYWQgdGhhdCBkaWQgbm90IGV4aXN0OiBgJyAuICR1cmxfcGF0aCAuICRzdHlsZSAuICdgfSc7CgkJCQl9CgkJCX0KCQl9IGVsc2UgeyAvLyBOb3QgYSBzcGVjaWZpYyBmaWxlLgoJCQlpZiAoICF3cF9zdHlsZV9pcyggJHN0eWxlICkgKSB7IC8vIE9ubHkgbG9hZCBzdHlsZSBvbmNlLgoJCQkJd3BfZW5xdWV1ZV9zdHlsZSggJHN0eWxlICk7CgkJCQl3cF9wcmludF9zdHlsZXMoICRzdHlsZSApOwoJCQl9CgkJfQoJfSAvLyBFbmQgbG9hZF9zdHlsZSgpLgoJCgkKCQoJLyoJc2VsZjo6bG9hZF92aWV3KCkKCSAqCQoJICoJTG9hZHMgYSB2aWV3LiBUeXBpY2FsbHkgY2FsbGVkIGZyb20gd2l0aGluIGEgY29udHJvbGxlci4gRGF0YSBwYXNzZWQgYXMgc2Vjb25kIGFyZ3VtZW50IHdpbGwgaGFzIGV4dHJhY3QoKSByYW4gb24gaXQgd2l0aGluIHRoZSB2aWV3IGZvciBlYXN5IHZhcmlhYmxlIGFjY2Vzcy4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSR2aWV3X25hbWUJCQkJTmFtZSBvZiB2aWV3LiBDb3JyZXNwb25kcyB0byB0aGUgdmlldyBmaWxlbmFtZTogL3ZpZXdzL3ZpZXdfbmFtZS5waHAKCSAqCUBwYXJhbQkJYXJyYXkJCSRwbHVnaW5idWRkeV9kYXRhCQlBcnJheSBvZiB2YXJpYWJsZXMgdG8gYmUgZXh0cmFjdGVkIGZvciB1c2UgYnkgdGhlIHZpZXcuCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF92aWV3KCAkdmlld19uYW1lLCAkcGx1Z2luYnVkZHlfZGF0YSA9IGFycmF5KCkgKSB7CgkJJHBsdWdpbmJ1ZGR5X3ZpZXdfZmlsZSA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL3ZpZXdzLycgLiAkdmlld19uYW1lIC4gJy5waHAnOyAvLyBWYXJpYWJsZSBuYW1lZCB0aGlzIHdheSBhcyB0aGUgaW5jbHVkZWQgZmlsZSBpbmhlcml0cyB0aGlzIHZhcmlhYmxlIGFuZCB3ZSBkb24ndCB3YW50IGFuIGFjY2lkZW50YWwgY29sbGlzaW9uLgoJCWlmICggZmlsZV9leGlzdHMoICRwbHVnaW5idWRkeV92aWV3X2ZpbGUgKSApIHsKCQkJdW5zZXQoICR2aWV3X25hbWUgKTsKCQkJaWYgKCBpc19hcnJheSggJHBsdWdpbmJ1ZGR5X2RhdGEgKSApIHsKCQkJCWV4dHJhY3QoICRwbHVnaW5idWRkeV9kYXRhICk7CgkJCX0gZWxzZSB7CgkJCQllY2hvICd7V2FybmluZzogRGF0YSBwYXJhbWV0ZXIgcGFzc2VkIHRvIHZpZXcgd2FzIG5vdCBhbiBhcnJheS59JzsKCQkJfQoJCQkvL2dsb2JhbCAkZGlvbnlzdXNfY29udHJvbGxlcjsgLy8gR2l2ZXMgdGhlIHZpZXcgdGhlIGFiaWxpdHkgdG8gYWNjZXNzIGZ1bmN0aW9ucyB3aXRoaW4gdGhlIGNvbnRyb2xsZXIgaWYgbmVlZGVkLgoJCQlyZXF1aXJlICRwbHVnaW5idWRkeV92aWV3X2ZpbGU7CgkJfSBlbHNlIHsKCQkJZWNobyAne0lOVkFMSUQgVklFVzogYCcgLiAkdmlld19uYW1lIC4gJ2A7IGZpbGUgbm90IGZvdW5kLn0nOwoJCX0KCX0gLy8gRW5kIGxvYWRfdmlldygpLgoJCgkKCQoJLyoJc2VsZjo6bG9hZF9jb250cm9sbGVyKCkKCSAqCQoJICoJTG9hZHMgYSBjb250cm9sbGVyLiBDb250cm9sbGVycyBtYXkgbG9hZCBjb250cm9sbGVycy4gQ29udHJvbGxlciB1c2VzIHJlcXVpcmVfb25jZSB0byBhdm9pZCBwcm9ibGVtcy4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRjb250cm9sbGVyCQkJCU5hbWUgb2YgY29udHJvbGxlci4gQ29ycmVzcG9uZHMgdG8gdGhlIGNvbnRyb2xsZXIgZmlsZW5hbWU6IC9jb250cm9sbGVycy9jb250cm9sbGVyX25hbWUucGhwCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9jb250cm9sbGVyKCAkY29udHJvbGxlciApIHsKCQkvLyBVc2luZyB0aGlzIG1ldGhvZCBzbyBsb2FkX2NvbnRyb2xsZXIoKSBtYXkgYmUgdXNlZCBhbnl3aGVyZS4KCQlpZiAoIGZpbGVfZXhpc3RzKCBzZWxmOjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy8nIC4gJGNvbnRyb2xsZXIgLiAnLnBocCcgKSApIHsKCQkJcmVxdWlyZV9vbmNlKCBzZWxmOjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy8nIC4gJGNvbnRyb2xsZXIgLiAnLnBocCcgKTsKCQl9IGVsc2UgewoJCQllY2hvICd7RXJyb3I6IFVuYWJsZSB0byBsb2FkIHBhZ2UgY29udHJvbGxlciBgJyAuICRjb250cm9sbGVyIC4gJ2A7IGZpbGUgbm90IGZvdW5kLn0nOwoJCX0KCX0gLy8gRW5kIGxvYWRfY29udHJvbGxlcigpLgoJCgkKCQoJLyoJc2VsZjo6cmVnaXN0ZXJfd2lkZ2V0KCkKCSAqCQoJICoJUmVnaXN0ZXJzIGEgd2lkZ2V0LiBXaWxsIHJlZ2lzdGVyIHdpZGdldCBjbGFzcyBpbiAvY29udHJvbGxlcnMvd2lkZ2V0L3NsdWcucGhwLiBXaWRnZXQgY2xhc3MgZXh0ZW5kIFdQX1dpZGdldHMuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkc2x1ZwkJTmFtZSAvIHNsdWcgZm9yIHdpZGdldC4gTXVzdCBtYXRjaCBmaWxlbmFtZSBpbiBjb250cm9sbGVyc1x3aWRnZXRzXCBkaXJlY3RvcnkuIENsYXNzIG5hbWUgaW4gdGhlIGZvcm1hdDogcGJfe1BMVUdJTlNMVUd9X3dpZGdldF97V0lER0VUU0xVR30KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZWdpc3Rlcl93aWRnZXQoICRzbHVnICkgewoJCWlmICggZmlsZV9leGlzdHMoIHNlbGY6OnBsdWdpbl9wYXRoKCkgLiAnL2NvbnRyb2xsZXJzL3dpZGdldHMvJyAuICRzbHVnIC4gJy5waHAnICkgKSB7CgkJCXJlcXVpcmUoIHNlbGY6OnBsdWdpbl9wYXRoKCkgLiAnL2NvbnRyb2xsZXJzL3dpZGdldHMvJyAuICRzbHVnIC4gJy5waHAnICk7CgkJCWFkZF9hY3Rpb24oICd3aWRnZXRzX2luaXQnLCBjcmVhdGVfZnVuY3Rpb24oICcnLCAncmVnaXN0ZXJfd2lkZ2V0KFwncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfd2lkZ2V0XycgLiAkc2x1ZyAuICdcJyk7JyApICk7CgkJfSBlbHNlIHsKCQkJZWNobyAne0Vycm9yICMzNDQ0NTQ4OTIyOiBVbmFibGUgdG8gbG9hZCB3aWRnZXQgZmlsZSBgY29udHJvbGxlcnMvd2lkZ2V0cy8nIC4gJHNsdWcgLiAnLnBocGAufSc7CgkJfQoJfSAvLyBFbmQgcmVnaXN0ZXJfd2lkZ2V0KCkuCgkKCQoJCgkvKioKCSAqCWFycmF5X3JlbW92ZSgpCgkgKgoJICoJUmVtb3ZlcyBhcnJheSB2YWx1ZXMgaW4gJHJlbW92ZSBmcm9tICRhcnJheS4KCSAqCgkgKglAcGFyYW0JCQkkYXJyYXkJCWFycmF5CQlTb3VyY2UgYXJyYXkuIFRoaXMgd2lsbCBoYXZlIHZhbHVlcyByZW1vdmVkIGFuZCBiZSByZXR1cm5lZC4KCSAqCUBwYXJhbQkJCSRyZW1vdmUJCWFycmF5CQlBcnJheSBvZiB2YWx1ZXMgdG8gc2VhcmNoIGZvciBpbiAkYXJyYXkgYW5kIHJlbW92ZS4KCSAqCUByZXR1cm4JCQkJCQlhcnJheQkJUmV0dXJucyBhcnJheSAkYXJyYXkgc3RyaXBwZWQgb2YgYWxsIHZhbHVlcyBmb3VuZCBpbiAkcmVtb3ZlCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYXJyYXlfcmVtb3ZlKCAkYXJyYXksICRyZW1vdmUgKSB7CgkJaWYgKCAhaXNfYXJyYXkoICRyZW1vdmUgKSApIHsKCQkJJHJlbW92ZSA9IGFycmF5KCAkcmVtb3ZlICk7CgkJfQoJCXJldHVybiBhcnJheV92YWx1ZXMoIGFycmF5X2RpZmYoICRhcnJheSwgJHJlbW92ZSApICk7Cgl9IC8vIEVuZCBhcnJheV9yZW1vdmUoKS4KCQoJCgkKCS8qIGZsdXNoKCkKCSAqCgkgKiBBdHRlbXB0IHRvIHN0cm9uZ2FybSBhIGZsdXNoIHRvIGFjdHVhbGx5IHdvcmsuCgkgKiBQcmV2ZW50IGZsdXNoaW5nIGJ5IGFkZGluZyB0aGlzIHRvIHdwLWNvbmZpZy5waHA6CgkgKgkJZGVmaW5lKCAnQkFDS1VQQlVERFlfTk9GTFVTSCcsIHRydWUgKTsKCSAqICBPUgoJICoJCXNldCBhZHZhbmNlZCBvcHRpb24gdG8gcHJldmVudCBmbHVzaAoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBmbHVzaCggJGZvcmNlID0gZmFsc2UgKSB7CgkJaWYgKCB0cnVlID09PSAkZm9yY2UgKSB7CgkJCXNlbGY6OiRfaGFzX2ZsdXNoZWQgPSBmYWxzZTsKCQl9CgkJCgkJaWYgKCBkZWZpbmVkKCAnQkFDS1VQQlVERFlfTk9GTFVTSCcgKSAmJiAoIEJBQ0tVUEJVRERZX05PRkxVU0ggPT09IHRydWUgKSApIHsgLy8gU29tZSBzZXJ2ZXJzIHNlZW0gdG8gZGllIG9uIG11bHRpcGxlIGZsdXNoZXMgaW4gdGhlIHNhbWUgcGFnZWxvYWQuIERlZmluZSB0aGlzIHRvIHByZXZlbnQgZmx1c2hpbmcuCgkJCXJldHVybjsKCQl9CgkJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zICkgJiYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydwcmV2ZW50X2ZsdXNoJ10gKSApICYmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncHJldmVudF9mbHVzaCddICkgKSB7CgkJCXJldHVybjsKCQl9CgkJaWYgKCB0cnVlICE9PSBzZWxmOjokX2hhc19mbHVzaGVkICkgeyAvLyBPbmx5IHJ1biB0aGlzIG9uY2UuCgkJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnYXBhY2hlX3NldGVudicgKSApIHsKCQkJCUBhcGFjaGVfc2V0ZW52KCduby1nemlwJywgMSk7IC8vIENvbXByZXNzaW9uIGNvdWxkIGNhdXNlIHNlcnZlciB0byB3YWl0IGZvciBwYWdlIHRvIGZpbmlzaCBiZWZvcmUgcHJvY2VlZGluZy4gVHVybiBvZmYgY29tcHJlc3Npb24uCgkJCX0KCQkJQGluaV9zZXQoJ3psaWIub3V0cHV0X2NvbXByZXNzaW9uJywgMCk7IC8vIENvbXByZXNzaW9uIGNvdWxkIGNhdXNlIHNlcnZlciB0byB3YWl0IGZvciBwYWdlIHRvIGZpbmlzaCBiZWZvcmUgcHJvY2VlZGluZy4gVHVybiBvZmYgY29tcHJlc3Npb24uCgkJCXNlbGY6OiRfaGFzX2ZsdXNoZWQgPSB0cnVlOwoJCX0KCQkvL0BvYl9mbHVzaCgpOwoJCWZsdXNoKCk7Cgl9IC8vIEVuZCBmbHVzaCgpLgoJCgkKCS8qCXJlc2V0X2RlZmF1bHRzKCkKCSAqCQoJICoJUmVzZXQgcGx1Z2luIG9wdGlvbnMgdG8gZGVmYXVsdHMuIEdldHRpbmcgc3RhcnRlZCBwYWdlIHVzZXMgdGhpcy4KCSAqCQoJICoJQHJldHVybgkJYm9vbGVhbgkJCVRydWUgb24gc3VjY2VzczsgZmFsc2Ugb3RoZXJ3aXNlLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJlc2V0X2RlZmF1bHRzKCkgewoJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5OjokX3NldHRpbmdzWydkZWZhdWx0X29wdGlvbnMnXSApICkgewoJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnMgPSBwYl9iYWNrdXBidWRkeTo6JF9zZXR0aW5nc1snZGVmYXVsdF9vcHRpb25zJ107CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzYXZlKCk7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZTsKCQl9Cgl9IC8vIEVuZCByZXNldF9kZWZhdWx0cygpLgoJCgkKCQoJLyogeGRlYnVnKCkKCSAqCgkgKiBMb2dzIGNhbGxlciB0byBlcnJvcl9sb2coKSBpZiB4ZGVidWcgYXZhaWxhYmxlLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiB4ZGVidWcoKSB7CgkJaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ3hkZWJ1Z19jYWxsX2ZpbGUnICkgKSB7CgkJCXJldHVybjsKCQl9CgkJZXJyb3JfbG9nKCAiQ2FsbGVkIEAgIiAuIHhkZWJ1Z19jYWxsX2ZpbGUoKSAuICI6IiAuIHhkZWJ1Z19jYWxsX2xpbmUoKSAuICIgZnJvbSAiIC4geGRlYnVnX2NhbGxfZnVuY3Rpb24oKSApOwoJfQoJCgkKCQp9IC8vIEVuZCBjbGFzcyBwbHVnaW5idWRkeS4KCgppZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSB7CglyZXF1aXJlX29uY2UoICdzdGFuZGFsb25lX3ByZWxvYWRlci5waHAnICk7Cn0KCi8vICoqKioqKioqKiogTG9hZCBjb3JlIGNsYXNzZXMgKioqKioqKioqKgoKcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzc2VzL2NvcmVfY29udHJvbGxlcnMucGhwJyApOwppZiAoIGlzX2FkbWluKCkgKSB7CglyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzZXMvZm9ybS5waHAnICk7CglyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzZXMvc2V0dGluZ3MucGhwJyApOwp9CgoKLy8gKioqKioqKioqKiBJbml0aWFsaXplIFBsdWdpbkJ1ZGR5IGZyYW1ld29yayAqKioqKioqKioqCgppZiAoICFpc3NldCggJHBsdWdpbmJ1ZGR5X2luaXQgKSApIHsKCSRwbHVnaW5idWRkeV9pbml0ID0gJ2luaXQucGhwJzsgLy8gZGVmYXVsdCBpbml0IGZpbGUuCn0KcGJfYmFja3VwYnVkZHk6OmluaXQoICRwbHVnaW5idWRkeV9zZXR0aW5ncywgJHBsdWdpbmJ1ZGR5X2luaXQgKTsKdW5zZXQoICRwbHVnaW5idWRkeV9zZXR0aW5ncyApOwp1bnNldCggJHBsdWdpbmJ1ZGR5X2luaXQgKTsKCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkKCk7CgovLyAqKioqKioqKioqIExvYWQgaW5pdGlhbGl6YXRpb24gZmlsZXMgKioqKioqKioqKgoKcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICkgLiAnL2luaXRfZ2xvYmFsLnBocCcgKTsKaWYgKCBpc19hZG1pbigpICkgewoJcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICkgLiAnL2luaXRfYWRtaW4ucGhwJyApOwp9CgppZiAoIGRlZmluZWQoICdQQl9TVEFOREFMT05FJyApICYmIFBCX1NUQU5EQUxPTkUgPT09IHRydWUgKSB7CglwYl9iYWNrdXBidWRkeTo6bG9hZF9jb250cm9sbGVyKCAncGFnZXMvZGVmYXVsdCcgKTsKfQo=
###PACKDATA,FILE_END,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
###PACKDATA,FILE_START,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
MS4wLjAgLSAyMDExLTEyLTEzIC0gRHVzdGluIEJvbHRvbgoJSW5pdGlhbCBwdXNoLgoxLjAuMSAtIDIwMTEtMTItMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBVSSB0aXRsZSgpIG5vdCBzaG93aW5nIGltYWdlLgoJRml4ZWQgbm9uLXNlcmllcyBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB1bmRlZmluZWQgaW5kZXguCglwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoKSByZXR1cm5zIGJsYW5rIGZvciBzZXJpZXMgdGFnIGlmIG5vdCBmb3VuZC4KMS4wLjIgLSAyMDExLTAyLTEyIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdXBkYXRlci4KMS4wLjMgLSAyMDEyLTAxLTA0IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgdmFyaW91cyB3aWRnZXQgdGhpbmdzLgoJVXNpbmcgVUkgZWxlbWVudHMgb24gcGFnZXMgdGhhdCBhcmVuJ3Qgb3VyIG93bi4KMS4wLjQgLSAyMDEyLTAxLTA1IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3B0aW9uYWwgYWJpbGl0eSB0byBzcGVjaWZpYyB0aGUgZmlyc3QgcGFyYW1ldGVyICgkdGFnKSBmb3IgYWRkX3Nob3J0Y3V0LCBhZGRfZmlsdGVyLCBhZGRfYWN0aW9uLCBldGMgdGhhdCBhbGxvd3MgcGFzc2luZyBhIGN1c3RvbSBtZXRob2QgY2FsbGJhY2sgbmFtZSB0aGF0IGRpZmZlcnMgZnJvbSB0aGUgdGFnLiBTb21lIGFjdGlvbnMgaGF2ZSBjaGFyYWN0ZXJzIGRpc2FsbG93ZWQgaW4gUEhQIG1ldGhvZCBuYW1lcyBzbyB0aGV5IG5lZWQgdG8gZGlmZmVyLgoxLjAuNSAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBmb3JtIHZhbGlkYXRpb24gZm9yIGVtcHR5IGZvcm0gZWxlbWVudHMuCglGaXhlZCBtaXNzaW5nIHRvb2x0aXBzIGluIHNldHRpbmdzIGZvcm1zLgoxLjAuNiAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBiZXR0ZXIgZXJyb3IgcmVwb3J0aW5nIG9uIGZvcm0gdmFsaWRhdGlvbiBmYWlsdXJlLgoJTm93IGFsbG93aW5nIHBhcnRpYWwgZm9ybSBzYXZpbmcgb24gdmFsaWR0aW9uIGZhaWx1cmUuCglBZGRlZCByZWQgYm9yZGVyIGFyb3VuZCBmb3JtIGl0ZW1zIHRoYXQgZmFpbCB2YWxpZGF0aW9uIGZvciBlYXNpZXIgcmVjb2duaXRpb24uCjEuMC43IC0gMjAxMi0wMS0wNiAtIER1c3RpbiBCb2x0b24KCUZvcm0gdmFsaWRhdGlvbiBmdW5jdGlvbiBudW1iZXIgcnVsZSB3YXMgaW5wcm9wZXJseSBuYW1lZCBudW0uCjEuMC44IC0gMjAxMi0wMS0xMyAtIER1c3RpbiBCb2x0b24KCUFkZGVkIGVycm9yIG1lc3NhZ2UgaWYgdXBkYXRlciBzZXR0aW5ncyBwYXJhbWV0ZXIgbWlzc2luZy4KCUZpeGVkIHZlcnNpb24gbnVtYmVyLgoxLjAuOSAtIDIwMTItMDEtMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBwbHVnaW5idWRkeV9zZXR0aW5ncyBmb3JtIHNldHRpbmcgZm9ybSBuYW1lIHN0YXRpY2FsbHkuCglDdXN0b20gcHJvY2Vzc2luZyBhZGRlZCBpbnRvIHBsdWdpbmJ1ZGR5X3NldHRpbmdzIGNsYXNzIHZpYSBwcm9jZXNzKCk7IGp1c3Qgc2V0IHNhdmVwb2ludCBpbiBjb25zdHJ1Y3RvciB0byBmYWxzZSB0byBhY3RpdmF0ZSB0aGlzIG1vZGUuCjEuMC4xMSAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBpbml0aWFsIHN0YXJ0aW5ncyBmb3IgbmV3IG1lZGlhIGxpYnJhcnkgc3lzdGVtLgoJVHdlYWtlZCBkb3duc2l6ZXIgbG9hZGVyIHN5c3RlbS4KCVJlbmFtZWQgcGx1Z2luYnVkZHkgY2xhc3MgdG8gcGIgY2xhc3MuIEFsbCByZWZlcmVuY2VzIHRvIHBiX2JhY2t1cGJ1ZGR5Ojogc2hvdWxkIGNoYW5nZSB0byBwYl9iYWNrdXBidWRkeTo6CjEuMC4xMiAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCQoJX2luaXRfY29yZV9jb250cm9sbGVyKCkgY2xlYW51cC4KMS4wLjEzIC0gMjAxMi0wMS0xOSAtIER1c3RpbiBCb2x0b24JCglGaXhlZCBsYWNrIG9mIHJldHVybiBpbiBwYl9iYWNrdXBidWRkeTo6dGlwKCkgYW5kIHBiX2JhY2t1cGJ1ZGR5Ojp2aWRlbygpLgoxLjAuMTQgLSAyMDEyLTAxLTE5IC0gRHVzdGluIEJvbHRvbgoJTW92ZWQgYWxsIGZyYW1ld29yay1yZXF1aXJlZCBKUyBhbmQgQ1NTIGludG8gcGx1Z2luYnVkZHkgZGlyZWN0b3J5LgoxLjAuMTUgLSAyMDEyLTAxLTI1IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgY29yZSBjb250cm9sbGVyIGZvciBkYXNoYm9hcmQgd2lkZ2V0IGJlaW5nIGFibGUgdG8gYWNjZXNzIHByaXZhdGUgc3RhdGljIHZhci4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjphbnRpX2RpcmVjdG9yeV9icm93c2luZygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6Om1rZGlyKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6Z2V0X3N0YXR1cygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OmRlYnVnKCkuCjEuMC4xNiAtIDIwMTItMDEtMjYgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0gY2xhc3MgY29udHJvbGxlciBmb3IgaW50ZXJmYWNpbmcgd2l0aCBmaWxlIHN5c3RlbS4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0IGNsYXNzIGNvbnRyb2xsZXIgZm9yIGZvcm1hdHRpbmcgZGF0YSAvIHRleHQgaW4gaHVtYW4gcmVhZGFibGUgZm9ybWF0cy4KCWRvd25zaXplciwgdXBkYXRlciwgZmlsZXN5c3RlbSwgYW5kIGZvcm1hdCAnbW9kdWxlcycgbm93IGNvbnRyb2xsZWQgdmlhIG1vZHVsZXMga2V5IGluIHRoZSAkc2V0dGluZ3MgYXJyYXkuICBTZWUgbmV3IGluaXQucGhwLgoxLjAuMTkgLSAyMDEyLTAxLTMxIC0gRHVzdGluIEJvbHRvbgoJRm9ybSBmaXguCglTZXR0aW5ncyBmaXguCglBZGRlZCBDU1Mgb3B0aW9ucyBmb3IgZ3JvdXAgbGlzdCBpbiBVSSBjbGFzcy4KCUFkZGVkIHRpdGxlIHR5cGUgZm9yIGZvcm0vc2V0dGluZ3MgY2xhc3Nlcy4KCVVwZGF0ZWQgYWRtaW4uY3NzIGZvciB0aXRsZSBzZXR0aW5ncyBmb3JtIHR5cGUuCjEuMC4yMCAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBlcnJvciBjb2RlIGxvb2t1cCBmdW5jdGlvbiB0byBmaWxlc3lzdGVtIGNsYXNzLiBGb3IgZXhpdCBjb2RlcyBmcm9tIGV4ZWMoKSBhbmQgc3VjaC4KCUZpeGVkIHN0YXR1cygpIGJ1Z3Mgd2l0aCBuZXdsaW5lcywgYXJyYXlzIChjaGFuZ2VkIGRlbGltaXRlcikuCjEuMC4yMSAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCB3eXNpd3lnIG9iamVjdCB5b3UgZm9ybSAmIHNldHRpbmdzIHN5c3RlbS4KCVRvdWNodXAgdG8gZmlsZXN5c3RlbSBjbGFzcy4KCUFkZGVkIGhpZGRlbiBmb3JtIG9iamVjdC4KCVNldHRpbmcgdGhlIHRpdGxlIG9mIGFueSBmb3JtL3NldHRpbmdzIG9iamVjdCB0byAnJyB3aWxsIGhpZGUgaXRzIGxlZnQgY29sdW1uIChjb2xsYXBzZXMgbGVmdCkuCglBZGRlZCB0aXRsZSBmb3JtIG9iamVjdCB0eXBlIGZvciBmb3JtYXR0aW5nLgoxLjAuMjIgLSAyMDEyLTAxLTAzIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgcGI6OiRzdGFydF90aW1lIHRvIHVzZSB0byBjb21wYXJlIHBhc3NhZ2Ugb2YgdGltZS4KMS4wLjIzIC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCVVwZGF0ZWQgdXBkYXRlci4KMS4wLjI0IC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCUZpeGVkIGNoZWNrYm94ICJZRVMhIiBkZWJ1ZyBvdXRwdXQuCglGaXhlZCByYWRpbyBpbnB1dCBkZWZhdWx0IGNoZWNrZWQgc2VsZWN0aW9uIG5vdCBiZWluZyBhcHBsaWVkLgoxLjAuMjUgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3JpZW50YXRpb24gb3B0aW9uIHRvIHJhZGlvIGJ1dHRvbnMuICBQb3NzaWJsZSB2YWxzOiBob3Jpem9udGFsLCB2ZXJ0aWNhbAoxLjAuMjYgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdGFiYmVkIGludGVyZmFjZXMgaW50byAkdWkgY2xhc3MuCjEuMC4yNyAtIDIwMTItMDItMTAgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB3aXRoIG9sZGVyIHNlcmllcyBjb25mbGljdGluZy4KMS4wLjI4IC0gMjAxMi0wMi0xNyAtIER1c3RpbiBCb2x0b24KCXN0cnN0cigpIHVzZWQgM3JkIHBhcmFtIHdoaWNoIHJlcXVpcmVkIFBIUCA+PSA1LjMgaW4gZm9ybTo6dGVzdF9ydWxlKCkuCglDbGVhbmVkIHVwIGluaXQucGhwIGEgYml0LgoJQ29sb3IgcGlja2VyOiBBZGRlZCBjb2xvciB0eXBlIHRvIGZvcm0vc2V0dGluZ3MuCgkKCUFkZGVkIHNldHRpbmdzIGNsYXNzIG1ldGhvZDogc2V0X3ZhbHVlKCkgdG8gb3ZlcndyaXRlIHZhbHVlcy4KCQ==
###PACKDATA,FILE_END,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
###PACKDATA,FILE_START,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
###PACKDATA,FILE_START,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
PD9waHAKLy8gSU1QT1JUQU5UOiBDb3B5IG9mIHRoaXMgZmlsZSAoIHN0YW5kYWxvbmVfcHJlbG9hZGVyLnBocCApIGluY2x1ZGVkIGluIF9yb2xsYmFja191bmRvLnBocC4KCiRwYl9zdHlsZXMgPSBhcnJheSgpOwokcGJfc2NyaXB0cyA9IGFycmF5KCk7CiRwYl9hY3Rpb25zID0gYXJyYXkoKTsKJHdwX3NjcmlwdHMgPSBhcnJheSgpOwoKLy8gTk9URTogTW9kaWZpZWQgZnJvbSBXUCB0byBydHJpbSBvbiBkaXJuYW1lKCkgZHVlIHRvIFdpbmRvd3MgaXNzdWVzLgpmdW5jdGlvbiBzaXRlX3VybCgpIHsKCSRwYWdlVVJMID0gJ2h0dHAnOwoJaWYgKCBpc3NldCggJF9TRVJWRVJbIkhUVFBTIl0gKSAmJiAoICRfU0VSVkVSWyJIVFRQUyJdID09ICJvbiIgKSApIHskcGFnZVVSTCAuPSAicyI7fQoJJHBhZ2VVUkwgLj0gIjovLyI7CglpZiAoJF9TRVJWRVJbIlNFUlZFUl9QT1JUIl0gIT0gIjgwIikgewoJCSRwYWdlVVJMIC49ICRfU0VSVkVSWyJTRVJWRVJfTkFNRSJdLiI6Ii4kX1NFUlZFUlsiU0VSVkVSX1BPUlQiXSAuIHJ0cmltKCBkaXJuYW1lKCRfU0VSVkVSWydQSFBfU0VMRiddKSwgJy9cXCcgKTsKCX0gZWxzZSB7CgkJJHBhZ2VVUkwgLj0gJF9TRVJWRVJbIlNFUlZFUl9OQU1FIl0gLiBydHJpbSggZGlybmFtZSgkX1NFUlZFUlsnUEhQX1NFTEYnXSksICcvXFwnICk7Cgl9CgkKCXJldHVybiAkcGFnZVVSTDsKfQoKLyoqCiAqIE5hdmlnYXRlcyB0aHJvdWdoIGFuIGFycmF5IGFuZCByZW1vdmVzIHNsYXNoZXMgZnJvbSB0aGUgdmFsdWVzLgogKgogKiBJZiBhbiBhcnJheSBpcyBwYXNzZWQsIHRoZSBhcnJheV9tYXAoKSBmdW5jdGlvbiBjYXVzZXMgYSBjYWxsYmFjayB0byBwYXNzIHRoZQogKiB2YWx1ZSBiYWNrIHRvIHRoZSBmdW5jdGlvbi4gVGhlIHNsYXNoZXMgZnJvbSB0aGlzIHZhbHVlIHdpbGwgcmVtb3ZlZC4KICoKICogQHNpbmNlIDIuMC4wCiAqCiAqIEBwYXJhbSBhcnJheXxzdHJpbmcgJHZhbHVlIFRoZSBhcnJheSBvciBzdHJpbmcgdG8gYmUgc3RyaXBwZWQuCiAqIEByZXR1cm4gYXJyYXl8c3RyaW5nIFN0cmlwcGVkIGFycmF5IChvciBzdHJpbmcgaW4gdGhlIGNhbGxiYWNrKS4KICovCmZ1bmN0aW9uIHN0cmlwc2xhc2hlc19kZWVwKCR2YWx1ZSkgewoJaWYgKCBpc19hcnJheSgkdmFsdWUpICkgewoJCSR2YWx1ZSA9IGFycmF5X21hcCgnc3RyaXBzbGFzaGVzX2RlZXAnLCAkdmFsdWUpOwoJfSBlbHNlaWYgKCBpc19vYmplY3QoJHZhbHVlKSApIHsKCQkkdmFycyA9IGdldF9vYmplY3RfdmFycyggJHZhbHVlICk7CgkJZm9yZWFjaCAoJHZhcnMgYXMgJGtleT0+JGRhdGEpIHsKCQkJJHZhbHVlLT57JGtleX0gPSBzdHJpcHNsYXNoZXNfZGVlcCggJGRhdGEgKTsKCQl9Cgl9IGVsc2UgewoJCSR2YWx1ZSA9IHN0cmlwc2xhc2hlcygkdmFsdWUpOwoJfQoKCXJldHVybiAkdmFsdWU7Cn0KCgovKioKICogQ2hlY2sgdmFsdWUgdG8gZmluZCBpZiBpdCB3YXMgc2VyaWFsaXplZC4KICoKICogSWYgJGRhdGEgaXMgbm90IGFuIHN0cmluZywgdGhlbiByZXR1cm5lZCB2YWx1ZSB3aWxsIGFsd2F5cyBiZSBmYWxzZS4KICogU2VyaWFsaXplZCBkYXRhIGlzIGFsd2F5cyBhIHN0cmluZy4KICogQ291cnRlc3kgV29yZFByZXNzOyBzaW5jZSBXb3JkUHJlc3MgMi4wLjUuCiAqCiAqIEBwYXJhbSBtaXhlZCAkZGF0YSBWYWx1ZSB0byBjaGVjayB0byBzZWUgaWYgd2FzIHNlcmlhbGl6ZWQuCiAqIEByZXR1cm4gYm9vbCBGYWxzZSBpZiBub3Qgc2VyaWFsaXplZCBhbmQgdHJ1ZSBpZiBpdCB3YXMuCiAqLwpmdW5jdGlvbiBpc19zZXJpYWxpemVkKCAkZGF0YSApIHsKCS8vIGlmIGl0IGlzbid0IGEgc3RyaW5nLCBpdCBpc24ndCBzZXJpYWxpemVkCglpZiAoICEgaXNfc3RyaW5nKCAkZGF0YSApICkKCQlyZXR1cm4gZmFsc2U7CgkkZGF0YSA9IHRyaW0oICRkYXRhICk7CiAJaWYgKCAnTjsnID09ICRkYXRhICkKCQlyZXR1cm4gdHJ1ZTsKCSRsZW5ndGggPSBzdHJsZW4oICRkYXRhICk7CglpZiAoICRsZW5ndGggPCA0ICkKCQlyZXR1cm4gZmFsc2U7CglpZiAoICc6JyAhPT0gJGRhdGFbMV0gKQoJCXJldHVybiBmYWxzZTsKCSRsYXN0YyA9ICRkYXRhWyRsZW5ndGgtMV07CglpZiAoICc7JyAhPT0gJGxhc3RjICYmICd9JyAhPT0gJGxhc3RjICkKCQlyZXR1cm4gZmFsc2U7CgkkdG9rZW4gPSAkZGF0YVswXTsKCXN3aXRjaCAoICR0b2tlbiApIHsKCQljYXNlICdzJyA6CgkJCWlmICggJyInICE9PSAkZGF0YVskbGVuZ3RoLTJdICkKCQkJCXJldHVybiBmYWxzZTsKCQljYXNlICdhJyA6CgkJY2FzZSAnTycgOgoJCQlyZXR1cm4gKGJvb2wpIHByZWdfbWF0Y2goICIvXnskdG9rZW59OlswLTldKzovcyIsICRkYXRhICk7CgkJY2FzZSAnYicgOgoJCWNhc2UgJ2knIDoKCQljYXNlICdkJyA6CgkJCXJldHVybiAoYm9vbCkgcHJlZ19tYXRjaCggIi9eeyR0b2tlbn06WzAtOS5FLV0rO1wkLyIsICRkYXRhICk7Cgl9CglyZXR1cm4gZmFsc2U7Cn0gLy8gRW5kIGlzX3NlcmlhbGl6ZWQoKS4KCmZ1bmN0aW9uIF9fKCAkdGV4dCwgJGRvbWFpbiA9ICcnICkgewoJcmV0dXJuICR0ZXh0Owp9CmZ1bmN0aW9uIF9lKCAkdGV4dCwgJGRvbWFpbiA9ICcnICkgewoJZWNobyAkdGV4dDsKfQoKZnVuY3Rpb24gd3Bfc3R5bGVfaXMoICRuYW1lICkgewoJZ2xvYmFsICRwYl9zdHlsZXM7CglyZXR1cm4gYXJyYXlfa2V5X2V4aXN0cyggJG5hbWUsICRwYl9zdHlsZXMgKTsKfQpmdW5jdGlvbiB3cF9lbnF1ZXVlX3N0eWxlKCAkbmFtZSwgJGZpbGUsICRkZXBzID0gYXJyYXkoKSwgJHZlciA9ICcnICkgewoJZ2xvYmFsICRwYl9zdHlsZXM7CgkkcGJfc3R5bGVzWyRuYW1lXVsnZmlsZSddID0gJGZpbGU7CgkkcGJfc3R5bGVzWyRuYW1lXVsndmVyc2lvbiddID0gJHZlcjsKCSRwYl9zdHlsZXNbJG5hbWVdWydwcmludGVkJ10gPSBmYWxzZTsKfQpmdW5jdGlvbiB3cF9wcmludF9zdHlsZXMoICRuYW1lICkgewoJZ2xvYmFsICRwYl9zdHlsZXM7CglpZiAoICRwYl9zdHlsZXNbJG5hbWVdWydwcmludGVkJ10gPT09IGZhbHNlICkgewoJCSRwYl9zdHlsZXNbJG5hbWVdWydwcmludGVkJ10gPSB0cnVlOwoJCQoJCWVjaG8gJzxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9IicgLiAkcGJfc3R5bGVzWyRuYW1lXVsnZmlsZSddIC4gJz92ZXI9JyAuIG1kNSggJHBiX3N0eWxlc1skbmFtZV1bJ3ZlcnNpb24nXSApIC4gJyI+JzsKCX0KfQoKZnVuY3Rpb24gd3Bfc2NyaXB0X2lzKCAkbmFtZSApIHsKCWdsb2JhbCAkcGJfc2NyaXB0czsKCXJldHVybiBhcnJheV9rZXlfZXhpc3RzKCAkbmFtZSwgJHBiX3NjcmlwdHMgKTsKfQpmdW5jdGlvbiB3cF9lbnF1ZXVlX3NjcmlwdCggJG5hbWUsICRmaWxlLCAkZGVwcyA9IGFycmF5KCksICR2ZXIgPSAnJyApIHsKCWdsb2JhbCAkcGJfc2NyaXB0czsKCSRwYl9zY3JpcHRzWyRuYW1lXVsnZmlsZSddID0gJGZpbGU7CgkkcGJfc2NyaXB0c1skbmFtZV1bJ3ZlcnNpb24nXSA9ICR2ZXI7CgkkcGJfc2NyaXB0c1skbmFtZV1bJ3ByaW50ZWQnXSA9IGZhbHNlOwp9CmZ1bmN0aW9uIHdwX3ByaW50X3NjcmlwdHMoICRuYW1lICkgewoJZ2xvYmFsICRwYl9zY3JpcHRzOwoJaWYgKCAkcGJfc2NyaXB0c1skbmFtZV1bJ3ByaW50ZWQnXSA9PT0gZmFsc2UgKSB7CgkJJHBiX3NjcmlwdHNbJG5hbWVdWydwcmludGVkJ10gPSB0cnVlOwoJCQoJCWVjaG8gJzxzY3JpcHQgc3JjPSInIC4gJHBiX3NjcmlwdHNbJG5hbWVdWydmaWxlJ10gLiAnP3Zlcj0nIC4gbWQ1KCAkcGJfc2NyaXB0c1skbmFtZV1bJ3ZlcnNpb24nXSApIC4gJyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4nOwoJfQp9CgpmdW5jdGlvbiBhZGRfYWN0aW9uKCAkdGFnLCAkY2FsbGJhY2sgKSB7CglnbG9iYWwgJHBiX2FjdGlvbnM7CgkkcGJfYWN0aW9uc1skdGFnXVsnY2FsbGJhY2snXSA9ICRjYWxsYmFjazsKfQoKCmZ1bmN0aW9uIGlzX2FkbWluKCkgewoJcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGFwcGx5X2ZpbHRlcnMoICRmaWx0ZXIsICR2YWx1ZSApIHsKCXJldHVybiAkdmFsdWU7Cn0KCmZ1bmN0aW9uIF9jbGVhbnVwX2hlYWRlcl9jb21tZW50KCRzdHIpIHsKCXJldHVybiB0cmltKHByZWdfcmVwbGFjZSgiL1xzKig/OlwqXC98XD8+KS4qLyIsICcnLCAkc3RyKSk7Cn0KCmZ1bmN0aW9uIGdldF9wbHVnaW5fZGF0YSggJHBsdWdpbl9maWxlLCAkbWFya3VwID0gdHJ1ZSwgJHRyYW5zbGF0ZSA9IHRydWUgKSB7CgoJJGRlZmF1bHRfaGVhZGVycyA9IGFycmF5KAoJCSdOYW1lJyA9PiAnUGx1Z2luIE5hbWUnLAoJCSdQbHVnaW5VUkknID0+ICdQbHVnaW4gVVJJJywKCQknVmVyc2lvbicgPT4gJ1ZlcnNpb24nLAoJCSdEZXNjcmlwdGlvbicgPT4gJ0Rlc2NyaXB0aW9uJywKCQknQXV0aG9yJyA9PiAnQXV0aG9yJywKCQknQXV0aG9yVVJJJyA9PiAnQXV0aG9yIFVSSScsCgkJJ1RleHREb21haW4nID0+ICdUZXh0IERvbWFpbicsCgkJJ0RvbWFpblBhdGgnID0+ICdEb21haW4gUGF0aCcsCgkJJ05ldHdvcmsnID0+ICdOZXR3b3JrJywKCQkvLyBTaXRlIFdpZGUgT25seSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIE5ldHdvcmsuCgkJJ19zaXRld2lkZScgPT4gJ1NpdGUgV2lkZSBPbmx5JywKCSk7CgoJJHBsdWdpbl9kYXRhID0gZ2V0X2ZpbGVfZGF0YSggJHBsdWdpbl9maWxlLCAkZGVmYXVsdF9oZWFkZXJzLCAncGx1Z2luJyApOwoKCS8vIFNpdGUgV2lkZSBPbmx5IGlzIHRoZSBvbGQgaGVhZGVyIGZvciBOZXR3b3JrCglpZiAoIGVtcHR5KCAkcGx1Z2luX2RhdGFbJ05ldHdvcmsnXSApICYmICEgZW1wdHkoICRwbHVnaW5fZGF0YVsnX3NpdGV3aWRlJ10gKSApIHsKCQlfZGVwcmVjYXRlZF9hcmd1bWVudCggX19GVU5DVElPTl9fLCAnMy4wJywgc3ByaW50ZiggX18oICdUaGUgPGNvZGU+JTEkczwvY29kZT4gcGx1Z2luIGhlYWRlciBpcyBkZXByZWNhdGVkLiBVc2UgPGNvZGU+JTIkczwvY29kZT4gaW5zdGVhZC4nICksICdTaXRlIFdpZGUgT25seTogdHJ1ZScsICdOZXR3b3JrOiB0cnVlJyApICk7CgkJJHBsdWdpbl9kYXRhWydOZXR3b3JrJ10gPSAkcGx1Z2luX2RhdGFbJ19zaXRld2lkZSddOwoJfQoJJHBsdWdpbl9kYXRhWydOZXR3b3JrJ10gPSAoICd0cnVlJyA9PSBzdHJ0b2xvd2VyKCAkcGx1Z2luX2RhdGFbJ05ldHdvcmsnXSApICk7Cgl1bnNldCggJHBsdWdpbl9kYXRhWydfc2l0ZXdpZGUnXSApOwoKCS8vRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYnkgZGVmYXVsdCBUaXRsZSBpcyB0aGUgc2FtZSBhcyBOYW1lLgoJJHBsdWdpbl9kYXRhWydUaXRsZSddID0gJHBsdWdpbl9kYXRhWydOYW1lJ107CgoJaWYgKCAkbWFya3VwIHx8ICR0cmFuc2xhdGUgKQoJCSRwbHVnaW5fZGF0YSA9IF9nZXRfcGx1Z2luX2RhdGFfbWFya3VwX3RyYW5zbGF0ZSggJHBsdWdpbl9maWxlLCAkcGx1Z2luX2RhdGEsICRtYXJrdXAsICR0cmFuc2xhdGUgKTsKCWVsc2UKCQkkcGx1Z2luX2RhdGFbJ0F1dGhvck5hbWUnXSA9ICRwbHVnaW5fZGF0YVsnQXV0aG9yJ107CgoJcmV0dXJuICRwbHVnaW5fZGF0YTsKfQoKCmZ1bmN0aW9uIGdldF9maWxlX2RhdGEoICRmaWxlLCAkZGVmYXVsdF9oZWFkZXJzLCAkY29udGV4dCA9ICcnICkgewoJLy8gV2UgZG9uJ3QgbmVlZCB0byB3cml0ZSB0byB0aGUgZmlsZSwgc28ganVzdCBvcGVuIGZvciByZWFkaW5nLgoJJGZwID0gZm9wZW4oICRmaWxlLCAncicgKTsKCgkvLyBQdWxsIG9ubHkgdGhlIGZpcnN0IDhraUIgb2YgdGhlIGZpbGUgaW4uCgkkZmlsZV9kYXRhID0gZnJlYWQoICRmcCwgODE5MiApOwoKCS8vIFBIUCB3aWxsIGNsb3NlIGZpbGUgaGFuZGxlLCBidXQgd2UgYXJlIGdvb2QgY2l0aXplbnMuCglmY2xvc2UoICRmcCApOwoKCWlmICggJGNvbnRleHQgIT0gJycgKSB7CgkJJGV4dHJhX2hlYWRlcnMgPSBhcHBseV9maWx0ZXJzKCAiZXh0cmFfeyRjb250ZXh0fV9oZWFkZXJzIiwgYXJyYXkoKSApOwoKCQkkZXh0cmFfaGVhZGVycyA9IGFycmF5X2ZsaXAoICRleHRyYV9oZWFkZXJzICk7CgkJZm9yZWFjaCggJGV4dHJhX2hlYWRlcnMgYXMgJGtleT0+JHZhbHVlICkgewoJCQkkZXh0cmFfaGVhZGVyc1ska2V5XSA9ICRrZXk7CgkJfQoJCSRhbGxfaGVhZGVycyA9IGFycmF5X21lcmdlKCAkZXh0cmFfaGVhZGVycywgKGFycmF5KSAkZGVmYXVsdF9oZWFkZXJzICk7Cgl9IGVsc2UgewoJCSRhbGxfaGVhZGVycyA9ICRkZWZhdWx0X2hlYWRlcnM7Cgl9CgoJZm9yZWFjaCAoICRhbGxfaGVhZGVycyBhcyAkZmllbGQgPT4gJHJlZ2V4ICkgewoJCXByZWdfbWF0Y2goICcvXlsgXHRcLyojQF0qJyAuIHByZWdfcXVvdGUoICRyZWdleCwgJy8nICkgLiAnOiguKikkL21pJywgJGZpbGVfZGF0YSwgJHskZmllbGR9KTsKCQlpZiAoICFlbXB0eSggJHskZmllbGR9ICkgKQoJCQkkeyRmaWVsZH0gPSBfY2xlYW51cF9oZWFkZXJfY29tbWVudCggJHskZmllbGR9WzFdICk7CgkJZWxzZQoJCQkkeyRmaWVsZH0gPSAnJzsKCX0KCgkkZmlsZV9kYXRhID0gY29tcGFjdCggYXJyYXlfa2V5cyggJGFsbF9oZWFkZXJzICkgKTsKCglyZXR1cm4gJGZpbGVfZGF0YTsKfQoKCmZ1bmN0aW9uIHdwX25vbmNlX2ZpZWxkKCkgewoJcmV0dXJuOwp9CgoKCi8vIFNvbWUgUEhQIGluc3RhbGxzIGRvbid0IGhhdmUgbmdldHRleHQuIE5lZWRlZCBieSBodW1hbl90aW1lX2RpZmYoKS4KaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ25nZXR0ZXh0JyApICkgewoJZnVuY3Rpb24gbmdldHRleHQoICRzaW5ndWxhciwgJHBsdXJhbCwgJG51bSApIHsKCQlpZiAoICRudW0gPiAxICkgewoJCQlyZXR1cm4gJHBsdXJhbDsKCQl9IGVsc2UgewoJCQlyZXR1cm4gJHNpbmd1bGFyOwoJCX0KCX0KfSAvLyBFbmQgbmdldHRleHQoKS4KCgoKLyoqCiAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdGltZXN0YW1wcy4KICoKICogVGhlIGRpZmZlcmVuY2UgaXMgcmV0dXJuZWQgaW4gYSBodW1hbiByZWFkYWJsZSBmb3JtYXQgc3VjaCBhcyAiMSBob3VyIiwKICogIjUgbWlucyIsICIyIGRheXMiLgogKgogKiBAc2luY2UgMS41LjAKICoKICogQHBhcmFtIGludCAkZnJvbSBVbml4IHRpbWVzdGFtcCBmcm9tIHdoaWNoIHRoZSBkaWZmZXJlbmNlIGJlZ2lucy4KICogQHBhcmFtIGludCAkdG8gT3B0aW9uYWwuIFVuaXggdGltZXN0YW1wIHRvIGVuZCB0aGUgdGltZSBkaWZmZXJlbmNlLiBEZWZhdWx0IGJlY29tZXMgdGltZSgpIGlmIG5vdCBzZXQuCiAqIEByZXR1cm4gc3RyaW5nIEh1bWFuIHJlYWRhYmxlIHRpbWUgZGlmZmVyZW5jZS4KICovCmZ1bmN0aW9uIGh1bWFuX3RpbWVfZGlmZiggJGZyb20sICR0byA9ICcnICkgewoJaWYgKCBlbXB0eSgkdG8pICkKCQkkdG8gPSB0aW1lKCk7CgkkZGlmZiA9IChpbnQpIGFicygkdG8gLSAkZnJvbSk7CglpZiAoJGRpZmYgPD0gMzYwMCkgewoJCSRtaW5zID0gcm91bmQoJGRpZmYgLyA2MCk7CgkJaWYgKCRtaW5zIDw9IDEpIHsKCQkJJG1pbnMgPSAxOwoJCX0KCQkvKiB0cmFuc2xhdG9yczogbWluPW1pbnV0ZSAqLwoJCSRzaW5jZSA9IHNwcmludGYoIG5nZXR0ZXh0KCAnJXMgbWluJywgJyVzIG1pbnMnLCAkbWlucyApLCAkbWlucyk7Cgl9IGVsc2UgaWYgKCgkZGlmZiA8PSA4NjQwMCkgJiYgKCRkaWZmID4gMzYwMCkpIHsKCQkkaG91cnMgPSByb3VuZCgkZGlmZiAvIDM2MDApOwoJCWlmICgkaG91cnMgPD0gMSkgewoJCQkkaG91cnMgPSAxOwoJCX0KCQkkc2luY2UgPSBzcHJpbnRmKCBuZ2V0dGV4dCgnJXMgaG91cicsICclcyBob3VycycsICRob3VycyApLCAkaG91cnMpOwoJfSBlbHNlaWYgKCRkaWZmID49IDg2NDAwKSB7CgkJJGRheXMgPSByb3VuZCgkZGlmZiAvIDg2NDAwKTsKCQlpZiAoJGRheXMgPD0gMSkgewoJCQkkZGF5cyA9IDE7CgkJfQoJCSRzaW5jZSA9IHNwcmludGYoIG5nZXR0ZXh0KCclcyBkYXknLCAnJXMgZGF5cycsICRkYXlzICksICRkYXlzKTsKCX0KCXJldHVybiAkc2luY2U7Cn0KCgoKLyoqCiAqIFVuc2VyaWFsaXplIHZhbHVlIG9ubHkgaWYgaXQgd2FzIHNlcmlhbGl6ZWQuCiAqCiAqIEBzaW5jZSAyLjAuMAogKgogKiBAcGFyYW0gc3RyaW5nICRvcmlnaW5hbCBNYXliZSB1bnNlcmlhbGl6ZWQgb3JpZ2luYWwsIGlmIGlzIG5lZWRlZC4KICogQHJldHVybiBtaXhlZCBVbnNlcmlhbGl6ZWQgZGF0YSBjYW4gYmUgYW55IHR5cGUuCiAqLwpmdW5jdGlvbiBtYXliZV91bnNlcmlhbGl6ZSggJG9yaWdpbmFsICkgewoJaWYgKCBpc19zZXJpYWxpemVkKCAkb3JpZ2luYWwgKSApIC8vIGRvbid0IGF0dGVtcHQgdG8gdW5zZXJpYWxpemUgZGF0YSB0aGF0IHdhc24ndCBzZXJpYWxpemVkIGdvaW5nIGluCgkJcmV0dXJuIEB1bnNlcmlhbGl6ZSggJG9yaWdpbmFsICk7CglyZXR1cm4gJG9yaWdpbmFsOwp9CgoKCgoKCi8vIE5PVCBJTVBMRU1FTlRFRCBCVVQgTk9OLUJMT0NLSU5HLgoKZnVuY3Rpb24gcmVnaXN0ZXJfYWN0aXZhdGlvbl9ob29rKCkgewp9CmZ1bmN0aW9uIGxvYWRfcGx1Z2luX3RleHRkb21haW4oKSB7Cn0KZnVuY3Rpb24gY3VycmVudF91c2VyX2NhbiggJHJvbGUgKSB7CglyZXR1cm4gdHJ1ZTsKfQpmdW5jdGlvbiBnZXRfdGVtcF9kaXIoKSB7CgkKCWlmICggZnVuY3Rpb25fZXhpc3RzKCdzeXNfZ2V0X3RlbXBfZGlyJykgKSB7CgkJJHRlbXAgPSBzeXNfZ2V0X3RlbXBfZGlyKCk7CgkJaWYgKCBAaXNfZGlyKCAkdGVtcCApICYmIGlzX3dyaXRhYmxlKCAkdGVtcCApICkKCQkJcmV0dXJuIHJ0cmltKCAkdGVtcCwgJy9cXCcgKSAuICcvJzsKCX0KCQoJJHRlbXAgPSBBQlNQQVRIIC4gJ3RlbXAvJzsKCUBta2RpciggJHRlbXAgKTsKCWlmICggaXNfZGlyKCAkdGVtcCApICYmIGlzX3dyaXRhYmxlKCAkdGVtcCApICkgewoJCXJldHVybiAkdGVtcDsKCX0KCQoJJHRlbXAgPSAnL3RtcC8nOwoJQG1rZGlyKCAkdGVtcCApOwoJcmV0dXJuICR0ZW1wOwp9CgoKZnVuY3Rpb24gd3BfdXBsb2FkX2RpcigpIHsKCXJldHVybiBhcnJheSggJ2Jhc2VkaXInID0+IEFCU1BBVEggKTsKfQoKCgpmdW5jdGlvbiB3cF9kaWUoICRtZXNzYWdlICkgewoJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ3dwX2RpZSgpIGNhbGxlZCB3aXRoIG1lc3NhZ2U6ICcgLiAkbWVzc2FnZSApOwoJZWNobyAkbWVzc2FnZTsKCWRpZSgpOwp9CgpmdW5jdGlvbiB3cF9sb2FkX3RyYW5zbGF0aW9uc19lYXJseSgpIHsKfQoKZnVuY3Rpb24gd3BfZGVidWdfYmFja3RyYWNlX3N1bW1hcnkoKSB7Cn0KCmlmICggIWRlZmluZWQoJ1dQX0RFQlVHJykgKQoJZGVmaW5lKCAnV1BfREVCVUcnLCBmYWxzZSApOwppZiAoICFkZWZpbmVkKCdXUF9ERUJVR19ESVNQTEFZJykgKQoJZGVmaW5lKCAnV1BfREVCVUdfRElTUExBWScsIHRydWUgKTsKaWYgKCAhZGVmaW5lZCgnV1BfREVCVUdfTE9HJykgKQoJZGVmaW5lKCdXUF9ERUJVR19MT0cnLCBmYWxzZSk7CmlmICggIWRlZmluZWQoJ1dQX0NBQ0hFJykgKQoJZGVmaW5lKCdXUF9DQUNIRScsIGZhbHNlKTsKCmZ1bmN0aW9uIGFkbWluX3VybCggJHZhbCApIHsKCXJldHVybiAnPycgLiAkdmFsOwp9CgoKLyoqCiAqIFdvcmRQcmVzcyBFcnJvciBjbGFzcy4KICoKICogQ29udGFpbmVyIGZvciBjaGVja2luZyBmb3IgV29yZFByZXNzIGVycm9ycyBhbmQgZXJyb3IgbWVzc2FnZXMuIFJldHVybgogKiBXUF9FcnJvciBhbmQgdXNlIHtAbGluayBpc193cF9lcnJvcigpfSB0byBjaGVjayBpZiB0aGlzIGNsYXNzIGlzIHJldHVybmVkLgogKiBNYW55IGNvcmUgV29yZFByZXNzIGZ1bmN0aW9ucyBwYXNzIHRoaXMgY2xhc3MgaW4gdGhlIGV2ZW50IG9mIGFuIGVycm9yIGFuZAogKiBpZiBub3QgaGFuZGxlZCBwcm9wZXJseSB3aWxsIHJlc3VsdCBpbiBjb2RlIGVycm9ycy4KICoKICogQHBhY2thZ2UgV29yZFByZXNzCiAqIEBzaW5jZSAyLjEuMAogKi8KY2xhc3MgV1BfRXJyb3IgewoJLyoqCgkgKiBTdG9yZXMgdGhlIGxpc3Qgb2YgZXJyb3JzLgoJICoKCSAqIEBzaW5jZSAyLjEuMAoJICogQHZhciBhcnJheQoJICovCglwdWJsaWMgJGVycm9ycyA9IGFycmF5KCk7CgoJLyoqCgkgKiBTdG9yZXMgdGhlIGxpc3Qgb2YgZGF0YSBmb3IgZXJyb3IgY29kZXMuCgkgKgoJICogQHNpbmNlIDIuMS4wCgkgKiBAdmFyIGFycmF5CgkgKi8KCXB1YmxpYyAkZXJyb3JfZGF0YSA9IGFycmF5KCk7CgoJLyoqCgkgKiBJbml0aWFsaXplIHRoZSBlcnJvci4KCSAqCgkgKiBJZiBgJGNvZGVgIGlzIGVtcHR5LCB0aGUgb3RoZXIgcGFyYW1ldGVycyB3aWxsIGJlIGlnbm9yZWQuCgkgKiBXaGVuIGAkY29kZWAgaXMgbm90IGVtcHR5LCBgJG1lc3NhZ2VgIHdpbGwgYmUgdXNlZCBldmVuIGlmCgkgKiBpdCBpcyBlbXB0eS4gVGhlIGAkZGF0YWAgcGFyYW1ldGVyIHdpbGwgYmUgdXNlZCBvbmx5IGlmIGl0CgkgKiBpcyBub3QgZW1wdHkuCgkgKgoJICogVGhvdWdoIHRoZSBjbGFzcyBpcyBjb25zdHJ1Y3RlZCB3aXRoIGEgc2luZ2xlIGVycm9yIGNvZGUgYW5kCgkgKiBtZXNzYWdlLCBtdWx0aXBsZSBjb2RlcyBjYW4gYmUgYWRkZWQgdXNpbmcgdGhlIGBhZGQoKWAgbWV0aG9kLgoJICoKCSAqIEBzaW5jZSAyLjEuMAoJICoKCSAqIEBwYXJhbSBzdHJpbmd8aW50ICRjb2RlIEVycm9yIGNvZGUKCSAqIEBwYXJhbSBzdHJpbmcgJG1lc3NhZ2UgRXJyb3IgbWVzc2FnZQoJICogQHBhcmFtIG1peGVkICRkYXRhIE9wdGlvbmFsLiBFcnJvciBkYXRhLgoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoICRjb2RlID0gJycsICRtZXNzYWdlID0gJycsICRkYXRhID0gJycgKSB7CgkJaWYgKCBlbXB0eSgkY29kZSkgKQoJCQlyZXR1cm47CgoJCSR0aGlzLT5lcnJvcnNbJGNvZGVdW10gPSAkbWVzc2FnZTsKCgkJaWYgKCAhIGVtcHR5KCRkYXRhKSApCgkJCSR0aGlzLT5lcnJvcl9kYXRhWyRjb2RlXSA9ICRkYXRhOwoJfQoKCS8qKgoJICogUmV0cmlldmUgYWxsIGVycm9yIGNvZGVzLgoJICoKCSAqIEBzaW5jZSAyLjEuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqCgkgKiBAcmV0dXJuIGFycmF5IExpc3Qgb2YgZXJyb3IgY29kZXMsIGlmIGF2YWlsYWJsZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9lcnJvcl9jb2RlcygpIHsKCQlpZiAoIGVtcHR5KCR0aGlzLT5lcnJvcnMpICkKCQkJcmV0dXJuIGFycmF5KCk7CgoJCXJldHVybiBhcnJheV9rZXlzKCR0aGlzLT5lcnJvcnMpOwoJfQoKCS8qKgoJICogUmV0cmlldmUgZmlyc3QgZXJyb3IgY29kZSBhdmFpbGFibGUuCgkgKgoJICogQHNpbmNlIDIuMS4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEByZXR1cm4gc3RyaW5nfGludCBFbXB0eSBzdHJpbmcsIGlmIG5vIGVycm9yIGNvZGVzLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0X2Vycm9yX2NvZGUoKSB7CgkJJGNvZGVzID0gJHRoaXMtPmdldF9lcnJvcl9jb2RlcygpOwoKCQlpZiAoIGVtcHR5KCRjb2RlcykgKQoJCQlyZXR1cm4gJyc7CgoJCXJldHVybiAkY29kZXNbMF07Cgl9CgoJLyoqCgkgKiBSZXRyaWV2ZSBhbGwgZXJyb3IgbWVzc2FnZXMgb3IgZXJyb3IgbWVzc2FnZXMgbWF0Y2hpbmcgY29kZS4KCSAqCgkgKiBAc2luY2UgMi4xLjAKCSAqCgkgKiBAcGFyYW0gc3RyaW5nfGludCAkY29kZSBPcHRpb25hbC4gUmV0cmlldmUgbWVzc2FnZXMgbWF0Y2hpbmcgY29kZSwgaWYgZXhpc3RzLgoJICogQHJldHVybiBhcnJheSBFcnJvciBzdHJpbmdzIG9uIHN1Y2Nlc3MsIG9yIGVtcHR5IGFycmF5IG9uIGZhaWx1cmUgKGlmIHVzaW5nIGNvZGUgcGFyYW1ldGVyKS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9lcnJvcl9tZXNzYWdlcygkY29kZSA9ICcnKSB7CgkJLy8gUmV0dXJuIGFsbCBtZXNzYWdlcyBpZiBubyBjb2RlIHNwZWNpZmllZC4KCQlpZiAoIGVtcHR5KCRjb2RlKSApIHsKCQkJJGFsbF9tZXNzYWdlcyA9IGFycmF5KCk7CgkJCWZvcmVhY2ggKCAoYXJyYXkpICR0aGlzLT5lcnJvcnMgYXMgJGNvZGUgPT4gJG1lc3NhZ2VzICkKCQkJCSRhbGxfbWVzc2FnZXMgPSBhcnJheV9tZXJnZSgkYWxsX21lc3NhZ2VzLCAkbWVzc2FnZXMpOwoKCQkJcmV0dXJuICRhbGxfbWVzc2FnZXM7CgkJfQoKCQlpZiAoIGlzc2V0KCR0aGlzLT5lcnJvcnNbJGNvZGVdKSApCgkJCXJldHVybiAkdGhpcy0+ZXJyb3JzWyRjb2RlXTsKCQllbHNlCgkJCXJldHVybiBhcnJheSgpOwoJfQoKCS8qKgoJICogR2V0IHNpbmdsZSBlcnJvciBtZXNzYWdlLgoJICoKCSAqIFRoaXMgd2lsbCBnZXQgdGhlIGZpcnN0IG1lc3NhZ2UgYXZhaWxhYmxlIGZvciB0aGUgY29kZS4gSWYgbm8gY29kZSBpcwoJICogZ2l2ZW4gdGhlbiB0aGUgZmlyc3QgY29kZSBhdmFpbGFibGUgd2lsbCBiZSB1c2VkLgoJICoKCSAqIEBzaW5jZSAyLjEuMAoJICoKCSAqIEBwYXJhbSBzdHJpbmd8aW50ICRjb2RlIE9wdGlvbmFsLiBFcnJvciBjb2RlIHRvIHJldHJpZXZlIG1lc3NhZ2UuCgkgKiBAcmV0dXJuIHN0cmluZwoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0X2Vycm9yX21lc3NhZ2UoJGNvZGUgPSAnJykgewoJCWlmICggZW1wdHkoJGNvZGUpICkKCQkJJGNvZGUgPSAkdGhpcy0+Z2V0X2Vycm9yX2NvZGUoKTsKCQkkbWVzc2FnZXMgPSAkdGhpcy0+Z2V0X2Vycm9yX21lc3NhZ2VzKCRjb2RlKTsKCQlpZiAoIGVtcHR5KCRtZXNzYWdlcykgKQoJCQlyZXR1cm4gJyc7CgkJcmV0dXJuICRtZXNzYWdlc1swXTsKCX0KCgkvKioKCSAqIFJldHJpZXZlIGVycm9yIGRhdGEgZm9yIGVycm9yIGNvZGUuCgkgKgoJICogQHNpbmNlIDIuMS4wCgkgKgoJICogQHBhcmFtIHN0cmluZ3xpbnQgJGNvZGUgT3B0aW9uYWwuIEVycm9yIGNvZGUuCgkgKiBAcmV0dXJuIG1peGVkIEVycm9yIGRhdGEsIGlmIGl0IGV4aXN0cy4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9lcnJvcl9kYXRhKCRjb2RlID0gJycpIHsKCQlpZiAoIGVtcHR5KCRjb2RlKSApCgkJCSRjb2RlID0gJHRoaXMtPmdldF9lcnJvcl9jb2RlKCk7CgoJCWlmICggaXNzZXQoJHRoaXMtPmVycm9yX2RhdGFbJGNvZGVdKSApCgkJCXJldHVybiAkdGhpcy0+ZXJyb3JfZGF0YVskY29kZV07Cgl9CgoJLyoqCgkgKiBBZGQgYW4gZXJyb3Igb3IgYXBwZW5kIGFkZGl0aW9uYWwgbWVzc2FnZSB0byBhbiBleGlzdGluZyBlcnJvci4KCSAqCgkgKiBAc2luY2UgMi4xLjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKgoJICogQHBhcmFtIHN0cmluZ3xpbnQgJGNvZGUgRXJyb3IgY29kZS4KCSAqIEBwYXJhbSBzdHJpbmcgJG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS4KCSAqIEBwYXJhbSBtaXhlZCAkZGF0YSBPcHRpb25hbC4gRXJyb3IgZGF0YS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGFkZCgkY29kZSwgJG1lc3NhZ2UsICRkYXRhID0gJycpIHsKCQkkdGhpcy0+ZXJyb3JzWyRjb2RlXVtdID0gJG1lc3NhZ2U7CgkJaWYgKCAhIGVtcHR5KCRkYXRhKSApCgkJCSR0aGlzLT5lcnJvcl9kYXRhWyRjb2RlXSA9ICRkYXRhOwoJfQoKCS8qKgoJICogQWRkIGRhdGEgZm9yIGVycm9yIGNvZGUuCgkgKgoJICogVGhlIGVycm9yIGNvZGUgY2FuIG9ubHkgY29udGFpbiBvbmUgZXJyb3IgZGF0YS4KCSAqCgkgKiBAc2luY2UgMi4xLjAKCSAqCgkgKiBAcGFyYW0gbWl4ZWQgJGRhdGEgRXJyb3IgZGF0YS4KCSAqIEBwYXJhbSBzdHJpbmd8aW50ICRjb2RlIEVycm9yIGNvZGUuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBhZGRfZGF0YSgkZGF0YSwgJGNvZGUgPSAnJykgewoJCWlmICggZW1wdHkoJGNvZGUpICkKCQkJJGNvZGUgPSAkdGhpcy0+Z2V0X2Vycm9yX2NvZGUoKTsKCgkJJHRoaXMtPmVycm9yX2RhdGFbJGNvZGVdID0gJGRhdGE7Cgl9CgoJLyoqCgkgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgZXJyb3IuCgkgKgoJICogVGhpcyBmdW5jdGlvbiByZW1vdmVzIGFsbCBlcnJvciBtZXNzYWdlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZAoJICogZXJyb3IgY29kZSwgYWxvbmcgd2l0aCBhbnkgZXJyb3IgZGF0YSBmb3IgdGhhdCBjb2RlLgoJICoKCSAqIEBzaW5jZSA0LjEuMAoJICoKCSAqIEBwYXJhbSBzdHJpbmd8aW50ICRjb2RlIEVycm9yIGNvZGUuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiByZW1vdmUoICRjb2RlICkgewoJCXVuc2V0KCAkdGhpcy0+ZXJyb3JzWyAkY29kZSBdICk7CgkJdW5zZXQoICR0aGlzLT5lcnJvcl9kYXRhWyAkY29kZSBdICk7Cgl9Cn0KCi8qKgogKiBDaGVjayB3aGV0aGVyIHZhcmlhYmxlIGlzIGEgV29yZFByZXNzIEVycm9yLgogKgogKiBSZXR1cm5zIHRydWUgaWYgJHRoaW5nIGlzIGFuIG9iamVjdCBvZiB0aGUgV1BfRXJyb3IgY2xhc3MuCiAqCiAqIEBzaW5jZSAyLjEuMAogKgogKiBAcGFyYW0gbWl4ZWQgJHRoaW5nIENoZWNrIGlmIHVua25vd24gdmFyaWFibGUgaXMgYSBXUF9FcnJvciBvYmplY3QuCiAqIEByZXR1cm4gYm9vbCBUcnVlLCBpZiBXUF9FcnJvci4gRmFsc2UsIGlmIG5vdCBXUF9FcnJvci4KICovCmZ1bmN0aW9uIGlzX3dwX2Vycm9yKCAkdGhpbmcgKSB7CglyZXR1cm4gKCAkdGhpbmcgaW5zdGFuY2VvZiBXUF9FcnJvciApOwp9CgovKioKICogU2V0IHRoZSBtYnN0cmluZyBpbnRlcm5hbCBlbmNvZGluZyB0byBhIGJpbmFyeSBzYWZlIGVuY29kaW5nIHdoZW4gZnVuY19vdmVybG9hZAogKiBpcyBlbmFibGVkLgogKgogKiBXaGVuIG1ic3RyaW5nLmZ1bmNfb3ZlcmxvYWQgaXMgaW4gdXNlIGZvciBtdWx0aS1ieXRlIGVuY29kaW5ncywgdGhlIHJlc3VsdHMgZnJvbQogKiBzdHJsZW4oKSBhbmQgc2ltaWxhciBmdW5jdGlvbnMgcmVzcGVjdCB0aGUgdXRmOCBjaGFyYWN0ZXJzLCBjYXVzaW5nIGJpbmFyeSBkYXRhCiAqIHRvIHJldHVybiBpbmNvcnJlY3QgbGVuZ3Rocy4KICoKICogVGhpcyBmdW5jdGlvbiBvdmVycmlkZXMgdGhlIG1ic3RyaW5nIGVuY29kaW5nIHRvIGEgYmluYXJ5LXNhZmUgZW5jb2RpbmcsIGFuZAogKiByZXNldHMgaXQgdG8gdGhlIHVzZXJzIGV4cGVjdGVkIGVuY29kaW5nIGFmdGVyd2FyZHMgdGhyb3VnaCB0aGUKICogYHJlc2V0X21ic3RyaW5nX2VuY29kaW5nYCBmdW5jdGlvbi4KICoKICogSXQgaXMgc2FmZSB0byByZWN1cnNpdmVseSBjYWxsIHRoaXMgZnVuY3Rpb24sIGhvd2V2ZXIgZWFjaAogKiBgbWJzdHJpbmdfYmluYXJ5X3NhZmVfZW5jb2RpbmcoKWAgY2FsbCBtdXN0IGJlIGZvbGxvd2VkIHVwIHdpdGggYW4gZXF1YWwgbnVtYmVyCiAqIG9mIGByZXNldF9tYnN0cmluZ19lbmNvZGluZygpYCBjYWxscy4KICoKICogQHNpbmNlIDMuNy4wCiAqCiAqIEBzZWUgcmVzZXRfbWJzdHJpbmdfZW5jb2RpbmcoKQogKgogKiBAc3RhdGljdmFyIGFycmF5ICRlbmNvZGluZ3MKICogQHN0YXRpY3ZhciBib29sICAkb3ZlcmxvYWRlZAogKgogKiBAcGFyYW0gYm9vbCAkcmVzZXQgT3B0aW9uYWwuIFdoZXRoZXIgdG8gcmVzZXQgdGhlIGVuY29kaW5nIGJhY2sgdG8gYSBwcmV2aW91c2x5LXNldCBlbmNvZGluZy4KICogICAgICAgICAgICAgICAgICAgIERlZmF1bHQgZmFsc2UuCiAqLwpmdW5jdGlvbiBtYnN0cmluZ19iaW5hcnlfc2FmZV9lbmNvZGluZyggJHJlc2V0ID0gZmFsc2UgKSB7CglzdGF0aWMgJGVuY29kaW5ncyA9IGFycmF5KCk7CglzdGF0aWMgJG92ZXJsb2FkZWQgPSBudWxsOwoKCWlmICggaXNfbnVsbCggJG92ZXJsb2FkZWQgKSApCgkJJG92ZXJsb2FkZWQgPSBmdW5jdGlvbl9leGlzdHMoICdtYl9pbnRlcm5hbF9lbmNvZGluZycgKSAmJiAoIGluaV9nZXQoICdtYnN0cmluZy5mdW5jX292ZXJsb2FkJyApICYgMiApOwoKCWlmICggZmFsc2UgPT09ICRvdmVybG9hZGVkICkKCQlyZXR1cm47CgoJaWYgKCAhICRyZXNldCApIHsKCQkkZW5jb2RpbmcgPSBtYl9pbnRlcm5hbF9lbmNvZGluZygpOwoJCWFycmF5X3B1c2goICRlbmNvZGluZ3MsICRlbmNvZGluZyApOwoJCW1iX2ludGVybmFsX2VuY29kaW5nKCAnSVNPLTg4NTktMScgKTsKCX0KCglpZiAoICRyZXNldCAmJiAkZW5jb2RpbmdzICkgewoJCSRlbmNvZGluZyA9IGFycmF5X3BvcCggJGVuY29kaW5ncyApOwoJCW1iX2ludGVybmFsX2VuY29kaW5nKCAkZW5jb2RpbmcgKTsKCX0KfQoKLyoqCiAqIFJlc2V0IHRoZSBtYnN0cmluZyBpbnRlcm5hbCBlbmNvZGluZyB0byBhIHVzZXJzIHByZXZpb3VzbHkgc2V0IGVuY29kaW5nLgogKgogKiBAc2VlIG1ic3RyaW5nX2JpbmFyeV9zYWZlX2VuY29kaW5nKCkKICoKICogQHNpbmNlIDMuNy4wCiAqLwpmdW5jdGlvbiByZXNldF9tYnN0cmluZ19lbmNvZGluZygpIHsKCW1ic3RyaW5nX2JpbmFyeV9zYWZlX2VuY29kaW5nKCB0cnVlICk7Cn0KCgpmdW5jdGlvbiBkaWRfYWN0aW9uKCAkYWN0aW9uICkgewoJaWYgKCAndGVtcGxhdGVfcmVkaXJlY3QnID09ICRhY3Rpb24gKSB7CgkJcmV0dXJuIHRydWU7Cgl9Cn0KCmZ1bmN0aW9uIF9kb2luZ19pdF93cm9uZyggJGZ1bmN0aW9uLCAkbWVzc2FnZSwgJHZlcnNpb24gKSB7CglyZXR1cm47Cn0KCmZ1bmN0aW9uIGhhc19maWx0ZXIoICRuYW1lLCAkY2FsbGJhY2sgKSB7CglyZXR1cm4gdHJ1ZTsKfQ==
###PACKDATA,FILE_END,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
###PACKDATA,FILE_START,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php
PD9waHAKCgoKCi8qCWNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2FjdGlvbnMKICoJCiAqCUhhbmRsZXMgYWN0aW9ucy4gQ3VycmVudGx5IGp1c3QgcmVwb3J0cyBpZiBhY3Rpb25zIHdlcmUgcmVnaXN0ZXJlZCBhbmQgY2FsbGVkIGJ1dCB0aGUgY2FsbGJhY2sgd2FzIG1pc3NpbmcuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9hY3Rpb25zY29yZSB7CgkKCQoJLyoJcGx1Z2luYnVkZHlfYWN0aW9uc2NvcmUtPl9fY2FsbCgpCgkgKgkKCSAqCU1hZ2ljIG1ldGhvZCBpZiBhIG1ldGhvZCBpcyBjYWxsZWQgdGhhdCBkb2VzIG5vdCBleGlzdC4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRuYW1lCQkJRnVuY3Rpb24gbmFtZS4KCSAqCUBwYXJhbQkJYXJyYXkJCSRhcmd1bWVudHMJCUFycmF5IG9mIGFyZ3VtZW50cyBwYXNzZWQgdG8gZnVuY3Rpb24uCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIF9fY2FsbCggJG5hbWUsICRhcmd1bWVudHMgKSB7CgkJZWNobyAne01pc3NpbmcgYWN0aW9ucyBtZXRob2QgYCcgLiAkbmFtZSAuICdgLn0nOwoJfSAvLyBFbmQgX19jYWxsKCkuCgkKCQoJCn0gLy8gRW5kIGNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2FjdGlvbnMuCgoKCi8qCWNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2FqYXhjb3JlCiAqCQogKglIYW5kbGVzIGFqYXguIEN1cnJlbnRseSBqdXN0IHJlcG9ydHMgaWYgYWpheCB3YXMgcmVnaXN0ZXJlZCBhbmQgY2FsbGVkIGJ1dCB0aGUgY2FsbGJhY2sgd2FzIG1pc3NpbmcuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9hamF4Y29yZSB7CgkKCQoJLyoJcGx1Z2luYnVkZHlfc2hvcnRjb2Rlcy0+X19jYWxsKCkKCSAqCQoJICoJTWFnaWMgbWV0aG9kIGlmIGEgbWV0aG9kIGlzIGNhbGxlZCB0aGF0IGRvZXMgbm90IGV4aXN0LgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJG5hbWUJCQlGdW5jdGlvbiBuYW1lLgoJICoJQHBhcmFtCQlhcnJheQkJJGFyZ3VtZW50cwkJQXJyYXkgb2YgYXJndW1lbnRzIHBhc3NlZCB0byBmdW5jdGlvbi4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gX19jYWxsKCAkbmFtZSwgJGFyZ3VtZW50cyApIHsKCQlkaWUoICd7TWlzc2luZyBhamF4IG1ldGhvZCBgJyAuICRuYW1lIC4gJ2AufScgKTsKCX0gLy8gRW5kIF9fY2FsbCgpLgoJCgkKfSAvLyBFbmQgY2xhc3MgcGJfYmFja3VwYnVkZHlfYWpheC4KCgoKLyoJY2xhc3MgYmFja3VwYnVkZHlfY3JvbmNvcmUKICoJCiAqCUhhbmRsZXMgY3JvbnMuIEN1cnJlbnRseSBqdXN0IHJlcG9ydHMgaWYgY3JvbnMgd2VyZSByZWdpc3RlcmVkIGFuZCBjYWxsZWQgYnV0IHRoZSBjYWxsYmFjayB3YXMgbWlzc2luZy4KICoJCiAqCUByZXR1cm4JCW51bGwKICovCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2Nyb25jb3JlIHsKCQoJCgkvKglwbHVnaW5idWRkeV9zaG9ydGNvZGVzLT5fX2NhbGwoKQoJICoJCgkgKglNYWdpYyBtZXRob2QgaWYgYSBtZXRob2QgaXMgY2FsbGVkIHRoYXQgZG9lcyBub3QgZXhpc3QuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkbmFtZQkJCUZ1bmN0aW9uIG5hbWUuCgkgKglAcGFyYW0JCWFycmF5CQkkYXJndW1lbnRzCQlBcnJheSBvZiBhcmd1bWVudHMgcGFzc2VkIHRvIGZ1bmN0aW9uLgoJICoJQHJldHVybgkJbnVsbAoJICovCglmdW5jdGlvbiBfX2NhbGwoICRuYW1lLCAkYXJndW1lbnRzICkgewoJCWRpZSggJ3tNaXNzaW5nIGNyb24gbWV0aG9kIGAnIC4gJG5hbWUgLiAnYC59JyApOwoJfSAvLyBFbmQgX19jYWxsKCkuCgkKCQp9IC8vIEVuZCBjbGFzcyBiYWNrdXBidWRkeV9jcm9uLgoKCgovKgljbGFzcyBwYl9iYWNrdXBidWRkeV9kYXNoYm9hcmRjb3JlCiAqCQogKglIYW5kbGVzIGRhc2hib2FyZCB3aWRnZXRzIChvbiBtYWluIGFkbWluIHNjcmVlbikuIFJlcG9ydHMgaWYgYWRtaW4gZGFzaGJvYXJkIHdpZGdldHMgd2VyZSByZWdpc3RlcmVkIGFuZCBjYWxsZWQgYnV0IHRoZSBjYWxsYmFjayB3YXMgbWlzc2luZy4KICoJQWxzbyBoYW5kbGVzIHRoZSBhY3R1YWwgcmVnaXN0ZXJpbmcgb2YgdGhlIHdpZGdldHMuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9kYXNoYm9hcmRjb3JlIHsKCQoJCgkvKglwbHVnaW5idWRkeV9zaG9ydGNvZGVzLT5fX2NhbGwoKQoJICoJCgkgKglNYWdpYyBtZXRob2QgaWYgYSBtZXRob2QgaXMgY2FsbGVkIHRoYXQgZG9lcyBub3QgZXhpc3QuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkbmFtZQkJCUZ1bmN0aW9uIG5hbWUuCgkgKglAcGFyYW0JCWFycmF5CQkkYXJndW1lbnRzCQlBcnJheSBvZiBhcmd1bWVudHMgcGFzc2VkIHRvIGZ1bmN0aW9uLgoJICoJQHJldHVybgkJbnVsbAoJICovCglmdW5jdGlvbiBfX2NhbGwoICRuYW1lLCAkYXJndW1lbnRzICkgewoJCWRpZSggJ3tNaXNzaW5nIGRhc2hib2FyZCBtZXRob2QgYCcgLiAkbmFtZSAuICdgLn0nICk7Cgl9IC8vIEVuZCBfX2NhbGwoKS4KCQoJCgkvKglwbHVnaW5idWRkeV9kYXNoYm9hcmQtPnJlZ2lzdGVyX3dpZGdldHMoKQoJICoJCgkgKglDYWxsZWQgYmFjayBieSBXb3JkUHJlc3MgdG8gYWN0dWFsbHkgcmVnaXN0ZXIgdGhlIGRhc2hib2FyZCB3aWRnZXQgaW4gdGhlIGFkbWluLgoJICoJCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIHJlZ2lzdGVyX3dpZGdldHMoKSB7CgkJLy93cF9hZGRfZGFzaGJvYXJkX3dpZGdldCggJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICkgLiAnXycgLiAkdGFnLCAkdGl0bGUsICBhcnJheSggJnNlbGY6OiRfZGFzaGJvYXJkLCAkdGFnICkgKTsKCQlmb3JlYWNoICggcGJfYmFja3VwYnVkZHk6OiRfZGFzaGJvYXJkX3dpZGdldHMgYXMgJHdpZGdldCApIHsKCQkJCgkJCWlmICggJHdpZGdldFsnY2FwYWJpbGl0eSddID09ICdnb2Rtb2RlJyApIHsgLy8gZ29kbW9kZSBjYXBhYmlsdGl5LgoJCQkJaWYgKCBpc19tdWx0aXNpdGUoKSAmJiBiYWNrdXBidWRkeV9jb3JlOjppc19uZXR3b3JrX2FjdGl2YXRlZCgpICkgeyAvLyBJbiBhIG5ldHdvcmsgaW5zdGFsbGF0aW9uLgoJCQkJCWlmICggIWN1cnJlbnRfdXNlcl9jYW4oICdtYW5hZ2VfbmV0d29yaycgKSApIHsKCQkJCQkJY29udGludWU7IC8vIFNraXAgdGhpcyB3aWRnZXQuIEFjY2VzcyBkZW5pZWQgdG8gaXQuCgkJCQkJfQoJCQkJfSBlbHNlIHsgLy8gU3RhbmRhbG9uZQoJCQkJCWlmICggIWN1cnJlbnRfdXNlcl9jYW4oICdhY3RpdmF0ZV9wbHVnaW5zJyApICkgewoJCQkJCQljb250aW51ZTsgLy8gU2tpcCB0aGlzIHdpZGdldC4gQWNjZXNzIGRlbmllZCB0byBpdC4KCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7IC8vIFdQIGNhcGFiaWxpdHkuCgkJCQlpZiAoICFjdXJyZW50X3VzZXJfY2FuKCAkd2lkZ2V0WydjYXBhYmlsaXR5J10gKSApIHsKCQkJCQljb250aW51ZTsgLy8gU2tpcCB0aGlzIHdpZGdldC4gQWNjZXNzIGRlbmllZCB0byBpdC4KCQkJCX0KCQkJfQoJCQkKCQkJJHdpZGdldF9zbHVnID0gJ3BiXycgLiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdzbHVnJyApIC4gJ18nIC4gJHdpZGdldFsndGFnJ107CgkJCXdwX2FkZF9kYXNoYm9hcmRfd2lkZ2V0KCAkd2lkZ2V0X3NsdWcsICR3aWRnZXRbJ3RpdGxlJ10sICBhcnJheSggJiR0aGlzLCAkd2lkZ2V0Wyd0YWcnXSApICk7CgoJCQkvLyBJZiBmb3JjZSB0b3AgaXMgZW5hYmxlZCB0aGVuIHdlIHdpbGwgYXR0ZW1wdCB0byBmb3JjZSB0aGUgd2lkZ2V0IHRvIHRoZSB0b3AgaWYgcG9zc2libGUuCgkJCWlmICggaXNzZXQoICR3aWRnZXRbJ2ZvcmNlX3RvcCddICkgJiYgKCAkd2lkZ2V0Wydmb3JjZV90b3AnXSA9PT0gdHJ1ZSApICkgewoJCQkJLy8gTm90ZTogT25seSB3b3JrcyBpZiB1c2VycyBoYXZlIG5ldmVyIHJlLWFycmFuZ2VkIHRoZWlyIGRhc2hib2FyZCB3aWRnZXRzLgoJCQkJZ2xvYmFsICR3cF9tZXRhX2JveGVzOwoJCQkJJG5vcm1hbF9kYXNoYm9hcmQgPSAkd3BfbWV0YV9ib3hlc1snZGFzaGJvYXJkJ11bJ25vcm1hbCddWydjb3JlJ107CgkJCQkkd2lkZ2V0X2JhY2t1cCA9IGFycmF5KCAkd2lkZ2V0X3NsdWcgPT4gJG5vcm1hbF9kYXNoYm9hcmRbJHdpZGdldF9zbHVnXSApOyAvLyBTYXZlIGNvcHkgb2Ygb3VyIHdpZGdldC4KCQkJCXVuc2V0KCAkbm9ybWFsX2Rhc2hib2FyZFskd2lkZ2V0X3NsdWddICk7IC8vIERlbGV0ZSBvdXIgd2lkZ2V0LgoJCQkJJHdwX21ldGFfYm94ZXNbJ2Rhc2hib2FyZCddWydub3JtYWwnXVsnY29yZSddID0gYXJyYXlfbWVyZ2UoICR3aWRnZXRfYmFja3VwLCAkbm9ybWFsX2Rhc2hib2FyZCApOyAvLyBNZXJnZSBvdXIgd2lkZ2V0IGludG8gdGhlIHRvcC4KCQkJfQoJCX0KCX0gLy8gRW5kIHJlZ2lzdGVyX3dpZGdldHMoKS4KCQoJCn0gLy8gRW5kIGNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2Rhc2hib2FyZC4KCgoKLyoJY2xhc3MgcGJfYmFja3VwYnVkZHlfZmlsdGVyc2NvcmUKICoJCiAqCUhhbmRsZXMgZmlsdGVycy4gQ3VycmVudGx5IGp1c3QgcmVwb3J0cyBpZiBmaWx0ZXJzIHdlcmUgcmVnaXN0ZXJlZCBhbmQgY2FsbGVkIGJ1dCB0aGUgY2FsbGJhY2sgd2FzIG1pc3NpbmcuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9maWx0ZXJzY29yZSB7CgkKCQoJLyoJcGx1Z2luYnVkZHlfc2hvcnRjb2Rlcy0+X19jYWxsKCkKCSAqCQoJICoJTWFnaWMgbWV0aG9kIGlmIGEgbWV0aG9kIGlzIGNhbGxlZCB0aGF0IGRvZXMgbm90IGV4aXN0LgoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJG5hbWUJCQlGdW5jdGlvbiBuYW1lLgoJICoJQHBhcmFtCQlhcnJheQkJJGFyZ3VtZW50cwkJQXJyYXkgb2YgYXJndW1lbnRzIHBhc3NlZCB0byBmdW5jdGlvbi4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gX19jYWxsKCAkbmFtZSwgJGFyZ3VtZW50cyApIHsKCQlyZXR1cm4gJ3tNaXNzaW5nIGZpbHRlcnMgbWV0aG9kIGAnIC4gJG5hbWUgLiAnYC59JzsKCX0gLy8gRW5kIF9fY2FsbCgpLgoJCgkKfSAvLyBFbmQgY2xhc3MgcGJfYmFja3VwYnVkZHlfZmlsdGVycy4KCgoKLyoJY2xhc3MgcGJfYmFja3VwYnVkZHlfcGFnZXNjb3JlCiAqCQogKglIYW5kbGVzIGFkbWluIHBhZ2VzLiBSZXBvcnRzIGlmIHBhZ2VzIHdlcmUgcmVnaXN0ZXJlZCBhbmQgY2FsbGVkIGJ1dCB0aGUgY2FsbGJhY2sgd2FzIG1pc3NpbmcuCiAqCUFsc28gcHJvdmlkZXMgbG9hZF9jb250cm9sbGVyKCkgZnVuY3Rpb24gZm9yIHBhZ2VzIHRvIGNhbGwgdG8gbG9hZCBhIGNvbnRyb2xsZXIgd2hpbGUgaW4gdGhlIGNvbnRyb2xsZXIuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9wYWdlc2NvcmUgewoJCgkKCS8qCXBsdWdpbmJ1ZGR5X3BhZ2VzLT5fX2NhbGwoKQoJICoJCgkgKglNYWdpYyBtZXRob2QgaWYgYSBtZXRob2QgaXMgY2FsbGVkIHRoYXQgZG9lcyBub3QgZXhpc3QuCgkgKglBdHRlbXB0cyB0byBsb2FkIGEgY29udHJvbGxlciBwYWdlIG1hdGNoaW5nIHRoZSBtZXRob2QgbmFtZSBpZiBwb3NzaWJsZS4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRuYW1lCQkJRnVuY3Rpb24gbmFtZS4KCSAqCUBwYXJhbQkJYXJyYXkJCSRhcmd1bWVudHMJCUFycmF5IG9mIGFyZ3VtZW50cyBwYXNzZWQgdG8gZnVuY3Rpb24uCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIF9fY2FsbCggJG5hbWUsICRhcmd1bWVudHMgKSB7CgkJJHBhZ2VfZmlsZSA9IHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy9wYWdlcy8nIC4gJG5hbWUgLiAnLnBocCc7CgkJaWYgKCAkbmFtZSA9PSAnZ2V0dGluZ19zdGFydGVkJyApIHsKCQkJJHBhZ2VfZmlsZSA9IHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9wbHVnaW5idWRkeS9fJyAuICRuYW1lIC4gJy5waHAnOwoJCX0KCQkKCQlpZiAoIGZpbGVfZXhpc3RzKCAkcGFnZV9maWxlICkgKSB7IC8vIExvYWQgZnJvbSAvY29udHJvbGxlcnMvcGFnZXMvUEFHRS5waHAgaWYgaXQgZXhpc3RzLgoJCQkKCQkJLy8gRGlzcGxheSBwYWdlLgoJCQlwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdhZG1pbi5qcycsIHRydWUgKTsKCQkJcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhZG1pbi5jc3MnICk7CgkJCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2pxdWVyeS11aS10b29sdGlwJywgZmFsc2UgKTsKCQkJcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdqUXVlcnktdWktMS4xMS4yLmNzcycsIHRydWUgKTsKCQkJZWNobyAnPGRpdiBjbGFzcz0id3JhcCI+JzsKIAkJCXJlcXVpcmVfb25jZSggJHBhZ2VfZmlsZSApOwoJCQllY2hvICc8L2Rpdj4nOwoJCQkKCQkJLy9lY2hvICc8ZGl2IGlkPSJmb290ZXItdGhhbmt5b3UiIHN0eWxlPSJmbG9hdDogcmlnaHQ7IGNvbG9yOiAjNzc3OyBtYXJnaW4tcmlnaHQ6IDIxcHg7IG1hcmdpbi10b3A6IDIwcHg7IG1hcmdpbi1ib3R0b206IC0zNHB4OyI+UnVubmluZyBCYWNrdXBCdWRkeSB2JyAuIHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ3ZlcnNpb24nICkgLiAnLjwvZGl2Pic7CgkJCQoJCX0gZWxzZSB7IC8vIE5vdCBmb3VuZAoJCQllY2hvICd7TWlzc2luZyBwYWdlcyBtZXRob2QgYCcgLiAkbmFtZSAuICdgLn0nOwoJCX0KCX0gLy8gRW5kIF9fY2FsbCgpLgoJCgkKCS8qCXBsdWdpbmJ1ZGR5X3BhZ2VzLT5sb2FkX2NvbnRyb2xsZXIoKQoJICoJCgkgKglMb2FkIGEgY29udHJvbGxlciBmcm9tIHdpdGhpbiBhIHBhZ2UgKHdoaWNoIGlzIGxvYWRlZCBieSBhIGNvbnRyb2xsZXIgaXRzZWxmKS4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRwYWdlCQlOYW1lIG9mIHRoZSBwYWdlLiBMb2FkcyBwYWdlIGZyb20gL2NvbnRyb2xsZXJzL3BhZ2VzL05BTUUucGhwLgoJICoJQHJldHVybgkJCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBsb2FkX2NvbnRyb2xsZXIoICRwYWdlICkgewoJCWlmICggZmlsZV9leGlzdHMoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy9wYWdlcy8nIC4gJHBhZ2UgLiAnLnBocCcgKSApIHsKCQkJcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvY29udHJvbGxlcnMvcGFnZXMvJyAuICRwYWdlIC4gJy5waHAnICk7CgkJfSBlbHNlIHsKCQkJZWNobyAne0Vycm9yOiBVbmFibGUgdG8gbG9hZCBwYWdlIGNvbnRyb2xsZXIgYCcgLiAkcGFnZSAuICdgOyBmaWxlIG5vdCBmb3VuZC59JzsKCQl9Cgl9CgkKCQoJCn0gLy8gRW5kIGNsYXNzIHBiX2JhY2t1cGJ1ZGR5X3BhZ2VzLgoKCgovKgljbGFzcyBwYl9iYWNrdXBidWRkeV9zaG9ydGNvZGVzY29yZQogKgkKICoJSGFuZGxlcyBzaG9ydGNvZGVzLiBDdXJyZW50bHkganVzdCByZXBvcnRzIGlmIHNob3J0Y29kZXMgd2VyZSByZWdpc3RlcmVkIGFuZCBjYWxsZWQgYnV0IHRoZSBjYWxsYmFjayB3YXMgbWlzc2luZy4KICoJCiAqCUByZXR1cm4JCW51bGwKICovCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X3Nob3J0Y29kZXNjb3JlIHsKCQoJCgkvKglwbHVnaW5idWRkeV9zaG9ydGNvZGVzLT5fX2NhbGwoKQoJICoJCgkgKglNYWdpYyBtZXRob2QgaWYgYSBtZXRob2QgaXMgY2FsbGVkIHRoYXQgZG9lcyBub3QgZXhpc3QuCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkbmFtZQkJCUZ1bmN0aW9uIG5hbWUuCgkgKglAcGFyYW0JCWFycmF5CQkkYXJndW1lbnRzCQlBcnJheSBvZiBhcmd1bWVudHMgcGFzc2VkIHRvIGZ1bmN0aW9uLgoJICoJQHJldHVybgkJbnVsbAoJICovCglmdW5jdGlvbiBfX2NhbGwoICRuYW1lLCAkYXJndW1lbnRzICkgewoJCXJldHVybiAne01pc3Npbmcgc2hvcnRjb2RlcyBtZXRob2QgYCcgLiAkbmFtZSAuICdgLn0nOwoJfSAvLyBFbmQgX19jYWxsKCkuCgkKCQp9IC8vIEVuZCBjbGFzcyBwYl9iYWNrdXBidWRkeV9zaG9ydGNvZGVzLgoK
###PACKDATA,FILE_END,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php
###PACKDATA,FILE_START,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php

###PACKDATA,FILE_END,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php
###PACKDATA,FILE_START,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php

###PACKDATA,FILE_END,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php
###PACKDATA,FILE_START,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
PD9waHAKCgoKLyoJY2xhc3MgcGx1Z2luYnVkZHlfZm9ybWF0CiAqCUBhdXRob3IgRHVzdGluIEJvbHRvbgogKgkKICoJSGVscHMgZm9ybWF0IGNvbnRlbnQgb3IgZGF0YSBzdWNoIGFzIHRpbWUsIGRhdGUsIGZpbGUgc2l6ZSwgZXRjLgogKi8KY2xhc3MgcGJfYmFja3VwYnVkZHlfZm9ybWF0IHsKCQoJCgkKCS8vICoqKioqKioqKiogUFVCTElDIFBST1BFUlRJRVMgKioqKioqKioqKgoJCgkKCQoJLy8gKioqKioqKioqKiBQUklWQVRFIFBST1BFUlRJRVMgKioqKioqKioqKgoJcHJpdmF0ZSAkX3RpbWVzdGFtcCA9ICdNIGosIFkgZzppOnMgYSc7CgkKCQoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKgoJCgkKCQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5fX2NvbnN0cnVjdCgpCgkgKgkKCSAqCURlZmF1bHQgY29uc3RydWN0b3IuCgkgKgkKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7Cgl9IC8vIEVuZCBfX2NvbnN0cnVjdCgpLgoJCgkKCQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5maWxlX3NpemUoKQoJICoJCgkgKglUYWtlcyBhIGZpbGUgc2l6ZSBpbiBieXRlcyBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0IHdpdGggbW9yZSBmcmllbmRseSB1bml0cy4gRGVjaWRlcyBvbiB1bml0IGJhc2VkIG9uIHRoZSBzaXplLgoJICoJCgkgKglAcGFyYW0JCWludAkJJHNpemUJRmlsZSBzaXplLgoJICoJQHJldHVybgkJc3RyaW5nCQkJSHVtYW4gZm9ybWF0dGVkIGZyaWVuZGx5IHJlYWRhYmxlIGZvcm1hdC4KCSAqLwoJZnVuY3Rpb24gZmlsZV9zaXplKCAkc2l6ZSApIHsKCQkkc2l6ZXMgPSBhcnJheSggJyBCeXRlcycsICcgS0InLCAnIE1CJywgJyBHQicsICcgVEInLCAnIFBCJywgJyBFQicsICcgWkInLCAnIFlCJyk7CgkJaWYgKCAkc2l6ZSA9PSAwICkgewoJCQlyZXR1cm4oICcwIE1CJyApOwoJCX0gZWxzZSB7CgkJCXJldHVybiAoIHJvdW5kKCAkc2l6ZSAvIHBvdyggMTAyNCwgKCAkaSA9IGZsb29yKCBsb2coICRzaXplLCAxMDI0ICkgKSApICksICRpID4gMSA/IDIgOiAwKSAuICRzaXplc1skaV0gKTsKCQl9Cgl9IC8vIEVuZCBmaWxlX3NpemUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZGF0ZSgpCgkgKgkKCSAqCUZvcm1hdHMgYSB0aW1lc3RhbXAgaW50byBhIG5pY2UgaHVtYW4gZGF0ZSBmb3JtYXQuCgkgKgkKCSAqCUBwYXJhbQkJaW50CQkkdGltZXN0YW1wCQlUaW1lc3RhbXAgdG8gbWFrZSBwcmV0dHkuCgkgKglAcGFyYW0JCXN0cmluZwkkY3VzdG9tRm9ybWF0CUN1c3RvbSB0aW1lc3RhbXAgZm9ybWF0LiBFbHNlIHVzZXMgJHRoaXMtPl90aW1lc3RhbXAgZGVmaW5lZCBhdCB0b3Agb2YgdGhpcyBmaWxlLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlQcmV0dHkgaHVtYW4gdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiBkYXRlKCAkdGltZXN0YW1wLCAkY3VzdG9tRm9ybWF0ID0gJycgKSB7CgkJaWYgKCAnJyA9PSAkY3VzdG9tRm9ybWF0ICkgewoJCQlyZXR1cm4gZGF0ZSggJHRoaXMtPl90aW1lc3RhbXAsICR0aW1lc3RhbXAgKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0ZSggJGN1c3RvbUZvcm1hdCwgJHRpbWVzdGFtcCApOwoJCX0KCX0gLy8gRW5kIGRhdGUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+bG9jYWxpemVfdGltZSgpCgkgKgkKCSAqCUxvY2FsaXplcyB0aW1lIGZvciB0aGUgY3VycmVudCB1c2VyIGZvciBkaXNwbGF5LgoJICoJCgkgKglAcGFyYW0JCWludAkJJHRpbWVzdGFtcAkJVGltZXN0YW1wIHRvIHJlbW92ZSB0aW1lIG9mZnNldCBmb3IuCgkgKglAcmV0dXJuCQlpbnQJCQkJCQlDb3JyZWN0ZWQgdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiBsb2NhbGl6ZV90aW1lKCAkdGltZXN0YW1wICkgewoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnZ2V0X29wdGlvbicgKSApIHsKCQkJJGdtdF9vZmZzZXQgPSBnZXRfb3B0aW9uKCAnZ210X29mZnNldCcgKTsKCQl9IGVsc2UgewoJCQkkZ210X29mZnNldCA9IDA7CgkJfQoJCXJldHVybiAkdGltZXN0YW1wICsgKCAkZ210X29mZnNldCAqIDM2MDAgKTsKCX0gLy8gRW5kIGxvY2FsaXplX3RpbWUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+dW5sb2NhbGl6ZV90aW1lKCkKCSAqCQoJICoJUmVtb3ZlcyB0aGUgdGltZXpvbmUgb2Zmc2V0IG9mIGEgbG9jYWxpemVkIHRpbWUgZGlzcGxheSBmb3IgYSB1c2VyLgoJICoJCgkgKglAcGFyYW0JCWludAkJJHRpbWVzdGFtcAkJVGltZXN0YW1wIHRvIHJlbW92ZSB0aW1lIG9mZnNldCBmb3IuCgkgKglAcmV0dXJuCQlpbnQJCQkJCQlDb3JyZWN0ZWQgdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiB1bmxvY2FsaXplX3RpbWUoICR0aW1lc3RhbXAgKSB7CgkJcmV0dXJuICR0aW1lc3RhbXAgLSAoIGdldF9vcHRpb24oICdnbXRfb2Zmc2V0JyApICogMzYwMCApOwoJfSAvLyBFbmQgdW5sb2NhbGl6ZV90aW1lKCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9mb3JtYXQtPnRpbWVfYWdvKCkKCSAqCQoJICoJQWNjZXB0cyBOT04tbG9jYWxpemVkIHRpbWVzdGFtcHMuCgkgKglAc2VlIHRpbWVfZHVyYXRpb24KCSAqCQoJICoJQHBhcmFtCQkKCSAqCUByZXR1cm4JCQoJICovCgkgLy8gVE9ETzogZGVwcmVjYXRlZD8KCWZ1bmN0aW9uIHRpbWVfYWdvKCAkdGltZXN0YW1wICkgewoJCXJldHVybiBodW1hbl90aW1lX2RpZmYoICR0aW1lc3RhbXAsIHRpbWUoKSApOwoJfSAvLyBFbmQgdGltZV9hZ28oKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZHVyYXRpb24oKQoJICoJCgkgKglSZXR1cm5zIGEgaHVtYW4gcmVhZGFibGUgZHVyYXRpb24uIFVzZWZ1bCBmb3IgdGltZSBhZ28gb3IgY291bnRkb3ducy4KCSAqCUV4OiA1IGhvdXJzLCA0IG1pbnV0ZXMsIDQzIHNlY29uZHMuCgkgKgkKCSAqCUBwYXJhbQkJaW50CQkkc2Vjb25kcwkJTnVtYmVyIG9mIHNlY29uZHMgdG8gdHVybiBpbnRvIGEgaHVtYW4gZnJpZW5kbHkgcmVhZGFibGUgZm9ybWF0LgoJICoJQHJldHVybgkJCQlzdHJpbmcJCQlIdW1hbiByZWFkYWJsZSBzdHJpbmcgZHVyYXRpb24uCgkgKi8KCWZ1bmN0aW9uIHRpbWVfZHVyYXRpb24oICRzZWNvbmRzICkgewoJCSR0aW1lID0gdGltZSgpIC0gJHNlY29uZHM7CgkJCgkJJHBlcmlvZHMgPSBhcnJheShfXygnc2Vjb25kJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbWludXRlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnaG91cicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGF5JywgCSAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnd2VlaycsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbW9udGgnLCAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygneWVhcicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGVjYWRlJy4gJ0xJT04nICkKCQkJCQkJICk7CgkJJGxlbmd0aHMgPSBhcnJheSgnNjAnLCc2MCcsJzI0JywnNycsJzQuMzUnLCcxMicsJzEwJyk7CgkJCgkJJG5vdyA9IHRpbWUoKTsKCQkKCQkkZGlmZmVyZW5jZSA9ICRub3cgLSAkdGltZTsKCQkkdGVuc2UgPSBfXygnYWdvJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7CgkJCgkJCgkJZm9yKCRqID0gMDsgJGRpZmZlcmVuY2UgPj0gJGxlbmd0aHNbJGpdICYmICRqIDwgY291bnQoJGxlbmd0aHMpLTE7ICRqKyspIHsKCQkJJGRpZmZlcmVuY2UgLz0gJGxlbmd0aHNbJGpdOwoJCX0KCQkKCQkkZGlmZmVyZW5jZSA9IHJvdW5kKCRkaWZmZXJlbmNlKTsKCQkKCQlpZigkZGlmZmVyZW5jZSAhPSAxKSB7CgkJCSRwZXJpb2RzWyRqXS49ICJzIjsKCQl9CgkJCgkJcmV0dXJuICIkZGlmZmVyZW5jZSAkcGVyaW9kc1skal0iOwoJfSAvLyBFbmQgZHVyYXRpb24oKS4KCQoJCgkKCS8qCXByZXR0aWZ5KCkKCSAqCQoJICoJVGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYSBtb3JlIHByZXR0eSB2ZXJzaW9uLiBMb29rcyBpbiBhbiBhcnJheSBmb3IgYSBrZXkgbWF0Y2hpbmcgdGhlIHN0cmluZy4KCSAqCVJldHVybnMgdGhlIGFzc29jaWF0ZWQgdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgdmFsdWUgaWYgbm8gcHJldHR5IHJlcGxhY2VyIGlzIGZvdW5kLgoJICoJRXg6CgkgKgkJcHJldHRpZnkoICdkb2cnLCBhcnJheSggJ2NhdHMnID0+ICdDYXRzJywgJ2RvZycgPT4gJ0RvZycgKSApOwoJICoJCVJldHVybnM6IERvZwoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHZhbHVlCQkJVmFsdWUgdG8gYmUgcmVwbGFjZWQgd2l0aCBhIHByZXR0eSB2ZXJzaW9uLgoJICoJQHBhcmFtCQlhcnJheQkJJHJlcGxhY2VtZW50cwlBcnJheSBvZjogdmFsdWUgdG8gbG9vayBmb3IgPT4gdmFsdWUgdG8gcmVwbGFjZSB3aXRoLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQkJUHJldHR5IHZlcnNpb24gdGhhdCByZXBsYWNlZCAkdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgJHZhbHVlIGlmIG5vdCBmb3VuZCBpbiAkcmVwbGFjZW1lbnRzIGtleXMuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBwcmV0dGlmeSggJHZhbHVlLCAkcmVwbGFjZW1lbnRzICkgewoJCQoJCWlmICggaXNzZXQoICRyZXBsYWNlbWVudHNbJHZhbHVlXSApICkgeyAvLyBGb3VuZCByZXBsYWNlbWVudC4KCQkJcmV0dXJuICRyZXBsYWNlbWVudHNbJHZhbHVlXTsKCQl9IGVsc2UgeyAvLyBObyByZXBsYWNlbWVudDsgcmV0dXJuIG9yaWdpbmFsIHZhbHVlLgoJCQlyZXR1cm4gJHZhbHVlOwoJCX0KCQkKCX0gLy8gRW5kIHByZXR0aWZ5KCk7CgkKCQoJCgkvKiBtdWx0aV9pbXBsb2RlKCkKCSAqCgkgKiBEZWVwIHJlY3Vyc2l2ZSBpbXBsb3Npb24uCgkgKgoJICovCglwdWJsaWMgZnVuY3Rpb24gbXVsdGlfaW1wbG9kZSgkYXJyYXksICRnbHVlKSB7CgkgICAgJHJldCA9ICcnOwoKCSAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGl0ZW0pIHsKCSAgICAgICAgaWYgKGlzX2FycmF5KCRpdGVtKSkgewoJICAgICAgICAgICAgJHJldCAuPSAkdGhpcy0+bXVsdGlfaW1wbG9kZSgkaXRlbSwgJGdsdWUpIC4gJGdsdWU7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAkcmV0IC49ICRpdGVtIC4gJGdsdWU7CgkgICAgICAgIH0KCSAgICB9CgoJICAgICRyZXQgPSBzdWJzdHIoJHJldCwgMCwgMC1zdHJsZW4oJGdsdWUpKTsKCgkgICAgcmV0dXJuICRyZXQ7Cgl9IC8vIEVuZCBtdWx0aV9pbXBsb2RlKCkuCgkKCQoJCn0gLy8gRW5kIGNsYXNzIHBsdWdpbmJ1ZGR5X3NldHRpbmdzLgoK
###PACKDATA,FILE_END,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
###PACKDATA,FILE_START,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
###PACKDATA,FILE_START,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php

###PACKDATA,FILE_END,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php
###PACKDATA,FILE_START,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php

###PACKDATA,FILE_END,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php
###PACKDATA,FILE_START,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
###PACKDATA,FILE_START,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
LnVpLXRvb2x0aXAgewoJcGFkZGluZzogOHB4OwoJcG9zaXRpb246IGFic29sdXRlOwoJei1pbmRleDogOTk5OTsKCW1heC13aWR0aDogMzAwcHg7Cgktd2Via2l0LWJveC1zaGFkb3c6IDAgMCA1cHggI2FhYTsKCWJveC1zaGFkb3c6IDAgMCA1cHggI2FhYTsKCXdvcmQtd3JhcDogYnJlYWstd29yZDsKfQpib2R5IC51aS10b29sdGlwIHsKCWJvcmRlci13aWR0aDogMnB4Owp9Ci51aS13aWRnZXQgewoJcGFkZGluZzogMTBweDsKCWxpbmUtaGVpZ2h0OiAxLjZlbTsKfQoudWktd2lkZ2V0IC51aS13aWRnZXQgewoJZm9udC1zaXplOiAxZW07Cn0KLnVpLXdpZGdldC1jb250ZW50IHsKCWJvcmRlcjogMXB4IHNvbGlkICNhYWFhYWE7CgliYWNrZ3JvdW5kOiAjZmZmZmZmOwoJY29sb3I6ICMyMjIyMjI7Cn0K
###PACKDATA,FILE_END,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
###PACKDATA,FILE_START,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
Lm1pbmlDb2xvcnMtdHJpZ2dlciB7CgloZWlnaHQ6IDIycHg7Cgl3aWR0aDogMjJweDsKCXZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CgltYXJnaW46IDAgLjI1ZW07CglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CglvdXRsaW5lOiBub25lOwp9CgoubWluaUNvbG9ycy1zZWxlY3RvciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7Cgl3aWR0aDogMTc1cHg7CgloZWlnaHQ6IDE1MHB4OwoJYmFja2dyb3VuZDogI0ZGRjsKCWJvcmRlcjogc29saWQgMXB4ICNCQkI7CgktbW96LWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMCwgMCwgMCwgLjI1KTsKCWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLW1vei1ib3JkZXItcmFkaXVzOiA1cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsKCWJvcmRlci1yYWRpdXM6IDVweDsKCXBhZGRpbmc6IDVweDsKCXotaW5kZXg6IDk5OTk5OTsKfQoKLm1pbmlDb2xvcnMtc2VsZWN0b3IuYmxhY2sgewoJYmFja2dyb3VuZDogIzAwMDsKCWJvcmRlci1jb2xvcjogIzAwMDsKfQoKLm1pbmlDb2xvcnMtY29sb3JzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogNXB4OwoJd2lkdGg6IDE1MHB4OwoJaGVpZ2h0OiAxNTBweDsKCWN1cnNvcjogY3Jvc3NoYWlyOwp9CgoubWluaUNvbG9ycy1odWVzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogMTYwcHg7Cgl3aWR0aDogMjBweDsKCWhlaWdodDogMTUwcHg7CgljdXJzb3I6IGNyb3NzaGFpcjsKfQoKLm1pbmlDb2xvcnMtY29sb3JQaWNrZXIgewoJcG9zaXRpb246IGFic29sdXRlOwoJd2lkdGg6IDExcHg7CgloZWlnaHQ6IDExcHg7Cn0KCi5taW5pQ29sb3JzLWh1ZVBpY2tlciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7CglsZWZ0OiAtM3B4OwoJd2lkdGg6IDI2cHg7CgloZWlnaHQ6IDNweDsKfQ==
###PACKDATA,FILE_END,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
###PACKDATA,FILE_START,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAYCAYAAADzoH0MAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9oHHRIvI8D7+LoAAALwSURBVDjLrZTNa11FGMZ/78ycnPvVNG3QlqTxkiuYxaUFQVMoLqqCilD6H0gFF4W4EbdduHDbnbisIIiCtOBKs9GNVKziouoiFmOTtOKtJNE093tmXhdzqpeeuNJZznmf33mfmXceUVUmlgEqwHGgBZwo9u8A68BvwACIDwRuQixADhwDTgLL71/ffArglTOPfQvUAZ2AKID76t3XFARjLa46TX12num5JdbvZ3xysw5Ay996oXVozN6va3S37+L7e8QQAMUpwpln22ArkB+F2gK7oymufOfxhb0rtxpcfskxd+Iw9LZguANhwPUvfsTFKCCGzz/9gaMLS9SPVXlnbYbtXva3t+2e8tZqj9eX/qDb6bCztcZzLz5BjIIJGECwLqN9foXVYZvb3YyH1+1uxuqwTfv8CtZlgBAwmKAGUNSPALh4dpGrK6dLgKsrp7l4dhGgqFWCGpxXAxrxox4+KlZApKRHVVGFoIof9ZJGDc5JBDG4qRrOCHKQGhARREAU3FQtaST+Dx1EbHEGY3xQMGBMmRAVYlR8TLWgRCzOR5tm2GgCAO6ADqImsQ+KManOR4vrDCsAVOs5Wzt9arnlUMWVAHt9z/2BpzcMVOs5AJ1h5cEcgLGOUYioKj7EEsAX30YhYmz6QcBgxlEAwU1VCitC0LKFoP+cTaoVxlFwXtMoZ9U6QdKT/LcOBDACtloHMXgVjBMFjYz7XaKmN+qsKQGcNWhxG+N+FzTiRP97BwmAYLOcKMKHX9/hxi+7JcAbH33P8uIRXj51HJvlgCQLCaBoDMysX+PCwiat6VACtKYDFxY2mVm/hsYUJl4FFxTQyMkn5yFvQK3BpdmMNz/z7PaT+EgVLj2fM5sbmGnA3DyEAUHBRRXe/vhPrN2n0RjwyKNjms0m55qGD9bStZ1rKj9tDtnY2OD3e/fY398nhAAIMpHKMpHIp4Dl977ceBrg1Wea3wA3gJsPh6ocEOvVIpkfB+aL/bvAz0AH6E/G+l/J23lk4gYAJAAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
###PACKDATA,FILE_START,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAITSURBVBgZpcHLThNhGIDh9/vn7/RApwc5VCmFWBPi1mvwAlx7BW69Afeu3bozcSE7E02ILjCRhRrds8AEbKVS2gIdSjvTmf+TYqLu+zyiqszDMCf75PnnnVwhuNcLpwsXk8Q4BYeSOsWpkqrinJI6JXVK6lSRdDq9PO+19vb37XK13Hj0YLMUTVVyWY//Cf8IVwQEGEeJN47S1YdPo4npDpNmnDh5udOh1YsZRcph39EaONpnjs65oxsqvZEyTaHdj3n2psPpKDLBcuOOGUWpZDOG+q0S7751ObuYUisJGQ98T/Ct4Fuo5IX+MGZr95jKjRKLlSxXxFxOEmaaN4us1Upsf+1yGk5ZKhp8C74H5ZwwCGO2drssLZZo1ouIcs2MJikz1oPmapHlaoFXH1oMwphyTghyQj+MefG+RblcoLlaJG/5y4zGCTMikEwTctaxXq/w9kuXdm9Cuzfh9acujXqFwE8xmuBb/hCwl1GKAnGccDwIadQCfD9DZ5Dj494QA2w2qtQW84wmMZ1eyFI1QBVQwV5GiaZOpdsPaSwH5HMZULi9UmB9pYAAouBQbMHHrgQcnQwZV/KgTu1o8PMgipONu2t5KeaNiEkxgAiICDMCCFeEK5aNauAOfoXx8KR9ZOOLk8P7j7er2WBhwWY9sdbDeIJnwBjBWBBAhGsCmiZxPD4/7Z98b/0QVWUehjkZ5vQb/Un5e/DIsVsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
###PACKDATA,FILE_START,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJFSURBVBgZBcHda5V1AADg5/d733Oc7tjOaNs5GC6KdrEwmpPRxG7spoKghOim7oK8y0MIEQRL+geGEIQ3UXQvSJ8IafZxUbjQhRDZoU60iYsSc9t5v87b84TsVe3mrBWpHoCICIAIACixYTUfOJM2Z62YO97TOULSIKaEQAyESAzEgISAgLpi48de87MLUqmezhGyhO4SCW7f4O81YiSJiCQIkbqmNcXMIjMXeilIGsQxDp8AnKDY5teL3PyU6h4CdY3Av7cYu58R0QghZWeT9fP0v2V7i8Y4j77As2c5sAwIFAXDgjInJxURAzub/PwxMZBGphZYeIWJWZ44xdo5bl4kK8kzioohUUREd4kXP+Kpd3nkee72+epNBleAxdfoLJBlDEuKkpxoBAkBjXGm53n8ZZ45S/shrr7P75eBo6eo9zAsKCqGRBEB/1zj89e5eo7tLRr7ePJtWg9wZZV7t2i2OPQcw5JiRE4UESN1ZPc2g0tceos/LtPYx9HTaPDNe8Dhl9gtyStyUiMIJDXLp2m0GHzN2gdMzdPq0F3k+pcc/4+x/UwepKzIiSDWTB/iwBLT8xw8xt07rJ8HHj7GbkX/B+DBxyhrciIQ2N2i2AG2fiPL+OsXoNVlWPDnDaC5l6qiJJWjLlHxxRs0JhhcIyvp/8SHJylKdiu++4Tr31NW7B8nkrwzp627d9nkHM0Wsea+GSY6tDvESEyY6TIxyZ4GSUp/nTubqyF7WrvZtaKrZ4QSQ+TIMUSJHCVypGhaHW448z+h1tLAgvKk7gAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
###PACKDATA,FILE_START,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
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
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB7klEQVR42oWRT4gSURzHZ9u9tKmHos4WBB0VscPSEuEloot2yEsHIRE8hEIHQbBUEFSQQVBQ0EMHRRAvoh78OySMBMqSYKh7URDZg6mYLrK6r28DbjPTxn7gc3nz+7z3Zoa6jmq1+gi+hK/hE3iLuolisfgC0t9At9v90e/3u01QKpVqhULhzX/DXC5nZBiGnc1mUyJitVr9ajQazXQ6/RGjwltkMpnn5XK5sdlsLnbBdrslfC4BNjiJRCLvkexfxYlEIjCZTH7yh7PZLFksFuIbnKdSKUYul9/nwlgs9gDXYYmIaDRK4vE4GY/HgvVarfbdaDS+RXpAhUKh40ql0hbHwWCQ+P1+EggESLv993Gr1To1mUyfEEspDBzl8/l/Yq/XS1wuFyc2v1pnWfZUr9d7EN+j3G63FLvXLwE/djqdxOFwcKfySSaTLbVa/YGL/2Cz2T73er0z/pDP5yODwUAQjkajqcFgyCHRwDtcbLFYFDipPp/Pz3eDy+VSEK7X6wu8CotT/UgeC34XvuA7u91e73Q6Z0TEcDicejyehkaj+YLRZ1ACBezpdLojfAzabDYzNE03w+HwidVq/arVarMKhcKHmWN4F+5BMdzioUQikatUKp1SqTTIZLJXWHsKH0LpLryJfXgbHsKD66Lfk7TS2QhfFGsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB/ElEQVR42n2RPYgaQRiG585rclGLhKQ2gYOUipjiyBGCTQhpNEVsrhAigsWhkEKwSEQQjCBroSBiYQpFEBv/Cn+XCLsElOMCBvUaFYWARoXgKSc3eVlQ9jY/LzwwzHzPzDczJJPJCOTzeVIqlQRqtdpj8BK8Bk/AfrFYJOl0mogjlV8A5ivS6XS+93q9ThMpl8t1yG/+J1tYluXm8/mMSrJcLn/xPN+E/B7KvlR+XqlU+M1mc03/kRsEG5xHIpF30GSCHIvFSCKRCEyn05/bwsFgQLPZLI3H4xQ3EHdwlUqlWJVK9WArP0Q7HBUll8sJTCYTGo1G6Xg83q3V6/ULi8XyFuoBCYVCJ9Vq9ZtYXq1WdDgcChsEg0G6WCx2a61W69JqtX6ArCB+v/+4UChAvhWhXWxM+/0+FYfjuEuTyeSFfJ94PB5FIBBo3CCiGqFVdESlSSaTLZ1Od7aVidPp/Njtdn+Ii/Bt1OVy3RJHo9HMbDbnIerBXWK32wlQu93uBu52JS7GD+zG6/X62ufzcTjVD/EIyLYywQue4qRGu93edSD6upnX6+X1ev1nSM+AnEiyZzQaj/EYjM1mYxmGaYbD4XOHw/HFYDBk1Wr1J9ScgHtgD0gjTB7K5XKVVqs1ajQas1KpfIW5p+ARUEjEPwOZIDJwBxyCg79JvwFn8/sITKnYXQAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
###PACKDATA,FILE_START,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
R0lGODlhLwA9ALMAAP//////AMbGxgDXAP8AAABLAL0AAFkAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJBQAJACwKAA4AHAAqAAAEzTAlNKm8OGtJ7f5fN2FIWYKZ2JVC25rhZVqmC6e0TApsH+c7l+3HSbUIAiRPoyoGhUvcaZQKIKxYT0onnU2ZTqlhfNuGL4UrYmxQb7TfwqDAy0ZJb4R8joDqZ2cZe3w2cgUyWhqDcwWNe4coaAOTlJWUkJGLlpWYKJqbk50gn6CiH6SbphuolqqKoKmRkrChsrO0rqu0tbYSrLkhpGm9OpqHibIWjo1cvch4xM/NydS20tDVkdfYKNscXyFlYCJEVGbkb0XPOddA6d7cFxEAIfkECRQACQAsCAAJABwAKgAABM0wJTSpvDhrSe3+XzdhSFmCmdiVQtua4WVapguntEwKbB/nO5ftx0m1CAIkT6MqBoVL3GmUCiCsWE9KJ51NmU6pYXzbhi+HK2JsUG+03wPhwMtGSW+EfI6A6mdnGXt8NnIHMloag3MHjXuHKGgEk5SVlJCRi5aVmCiam5OdIJ+goh+km6YbqJaqiqCpkZKwobKztK6rtLW2Eqy5IaRpvTqah4myFo6NXL3IeMTPzcnUttLQ1ZHX2CjbHF8hZWAiRFRm5G9FzznXQOne3BcRACH5BAkFAAkALAkADAAcACoAAATNMCU0qbw4a0nt/l83YUhZgpnYlULbmuFlWqYLp7RMCmwf5zuX7cdJtQgCJE+jKgaFS9xplAogrFhPSiedTZlOqWF824YvhStibFBvtN/CoMDLRklvhHyOgOpnZxl7fDZyBTJaGoNzBY17hyhoA5OUlZSQkYuWlZgompuTnSCfoKIfpJumG6iWqoqgqZGSsKGys7Suq7S1thKsuSGkab06moeJshaOjVy9yHjEz83J1LbS0NWR19go2xxfIWVgIkRUZuRvRc8510Dp3twXEQAh+QQJFAAJACwIABIAIAAoAAAExBClJKe9OGtZUdUg6I1hGXoZN3Lm9bmIIMuoqb7TOJNibuEUgUcYA/4oGFxstisBlTKCQCoUrV5YZjP5MXavvNwz9QsgzOiO8SQ+u1FrZ+JQXBFboAPhoKXhNXp7dDsHdH8YgQSChYEHhxeJipKSjo9zk5iTlYeRmZSWnZ57oKKYm3+hnqd4qZmrLa2mlpelo7Oxiq+stba3pbp/CKmGsz6dlXE2E4yFLrPJPpbQSNIt02TKj2EbK3gka3DRJyzWweJyJREAOw==
###PACKDATA,FILE_END,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
###PACKDATA,FILE_START,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSgnLmJhY2t1cGJ1ZGR5LWRvX2J1bGtfYWN0aW9uJykuY2xpY2soIGZ1bmN0aW9uKCl7CgkJaWYgKCAhIGNvbmZpcm0oICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZG8gdGhpcyB0byBhbGwgc2VsZWN0ZWQgaXRlbXM/JyApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfSk7CgkKCQoJCglqUXVlcnkoJy5wYl9kZWJ1Z19zaG93JykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSh0aGlzKS5oaWRlKCk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCAnLnBiX2RlYnVnX2hpZGUnKS5zaG93KCk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ2Zsb2F0JywgJ2xlZnQnICk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ3dpZHRoJywgJzgwJScgKTsKCQlqUXVlcnkodGhpcykucGFyZW50KCkuY2hpbGRyZW4oICdkaXYnKS5zaG93KCk7Cgl9KTsKCWpRdWVyeSgnLnBiX2RlYnVnX2hpZGUnKS5jbGljayhmdW5jdGlvbihlKSB7CgkJalF1ZXJ5KHRoaXMpLmhpZGUoKTsKCQlqUXVlcnkodGhpcykucGFyZW50KCkuY2hpbGRyZW4oICcucGJfZGVidWdfc2hvdycpLnNob3coKTsKCQlqUXVlcnkodGhpcykucGFyZW50KCkuY3NzKCAnZmxvYXQnLCAncmlnaHQnICk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ3dpZHRoJywgJzQwcHgnICk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCAnZGl2JykuaGlkZSgpOwoJfSk7CgkKCWpRdWVyeSggJy5hZHZhbmNlZC10b2dnbGUtdGl0bGUnICkuY2xpY2soZnVuY3Rpb24oKXsKCQljb250YWluZXJXcmFwID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICdmb3JtJyApOwoJCXRpdGxlVG9nZ2xlID0gY29udGFpbmVyV3JhcC5maW5kKCAnLmFkdmFuY2VkLXRvZ2dsZS10aXRsZScgKTsKCQlyaWdodEFycm93ID0gdGl0bGVUb2dnbGUuZmluZCggJy5kYXNoaWNvbnMtYXJyb3ctcmlnaHQnICk7CgkJaWYgKCByaWdodEFycm93Lmxlbmd0aCA+IDAgKSB7CgkJCXJpZ2h0QXJyb3cucmVtb3ZlQ2xhc3MoICdkYXNoaWNvbnMtYXJyb3ctcmlnaHQnICkuYWRkQ2xhc3MoICdkYXNoaWNvbnMtYXJyb3ctZG93bicgKTsKCQl9IGVsc2UgewoJCQl0aXRsZVRvZ2dsZS5maW5kKCAnLmRhc2hpY29ucy1hcnJvdy1kb3duJyApLnJlbW92ZUNsYXNzKCAnZGFzaGljb25zLWFycm93LWRvd24nICkuYWRkQ2xhc3MoICdkYXNoaWNvbnMtYXJyb3ctcmlnaHQnICk7CgkJfQoJCWNvbnRhaW5lcldyYXAuZmluZCggJy5hZHZhbmNlZC10b2dnbGUnICkudG9nZ2xlKCk7Cgl9KTsKCQoJCglqUXVlcnkoJy5wbHVnaW5idWRkeV90aXAnKS50b29sdGlwKCk7IC8vIE5vdyB1c2luZyBqUXVlcnkgVUkgdG9vbHRpcC4KCQoJCglpZiAodHlwZW9mIGpRdWVyeS50YWJsZURuRCAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gSWYgdGFibGVEbkQgZnVuY3Rpb24gbG9hZGVkLgoJCWpRdWVyeSgnLnBiX3Jlb3JkZXInKS50YWJsZURuRCh7CgkJCW9uRHJvcDogZnVuY3Rpb24odGJvZHksIHJvdykgewoJCQkJdmFyIG5ld19vcmRlciA9IG5ldyBBcnJheSgpOwoJCQkJdmFyIHJvd3MgPSB0Ym9keS5yb3dzOwoJCQkJZm9yICh2YXIgaT0wOyBpPHJvd3MubGVuZ3RoOyBpKyspIHsKCQkJCQluZXdfb3JkZXIucHVzaCggcm93c1tpXS5pZC5zdWJzdHJpbmcoMTEpICk7CgkJCQl9CgkJCQluZXdfb3JkZXIgPSBuZXdfb3JkZXIuam9pbiggJywnICk7CgkJCQlqUXVlcnkoICcjcGJfb3JkZXInICkudmFsKCBuZXdfb3JkZXIgKQoJCQl9LAoJCQlkcmFnSGFuZGxlOiAicGJfZHJhZ2hhbmRsZSIKCQl9KTsKCX0KCQoJalF1ZXJ5KCcucGJfdG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSggJyNwYl90b2dnbGUtJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICkuc2xpZGVUb2dnbGUoKTsKCX0pOwoJCgkKfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
###PACKDATA,FILE_START,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
###PACKDATA,FILE_START,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js
LyoKICogalF1ZXJ5IG1pbmlDb2xvcnM6IEEgc21hbGwgY29sb3Igc2VsZWN0b3IKICoKICogQ29weXJpZ2h0IDIwMTEgQ29yeSBMYVZpc2thIGZvciBBIEJlYXV0aWZ1bCBTaXRlLCBMTEMuIChodHRwOi8vYWJlYXV0aWZ1bHNpdGUubmV0LykKICoKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMKICoKKi8KaWYoalF1ZXJ5KShmdW5jdGlvbigkKXskLmV4dGVuZCgkLmZuLHttaW5pQ29sb3JzOmZ1bmN0aW9uKG8sZGF0YSl7dmFyIGNyZWF0ZT1mdW5jdGlvbihpbnB1dCxvLGRhdGEpe3ZhciBjb2xvcj1leHBhbmRIZXgoaW5wdXQudmFsKCkpO2lmKCFjb2xvciljb2xvcj0nZmZmZmZmJzt2YXIgaHNiPWhleDJoc2IoY29sb3IpO3ZhciB0cmlnZ2VyPSQoJzxhIGNsYXNzPSJtaW5pQ29sb3JzLXRyaWdnZXIiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjJytjb2xvcisnIiBocmVmPSIjIj48L2E+Jyk7dHJpZ2dlci5pbnNlcnRBZnRlcihpbnB1dCk7aW5wdXQuYWRkQ2xhc3MoJ21pbmlDb2xvcnMnKS5kYXRhKCdvcmlnaW5hbC1tYXhsZW5ndGgnLGlucHV0LmF0dHIoJ21heGxlbmd0aCcpfHxudWxsKS5kYXRhKCdvcmlnaW5hbC1hdXRvY29tcGxldGUnLGlucHV0LmF0dHIoJ2F1dG9jb21wbGV0ZScpfHxudWxsKS5kYXRhKCdsZXR0ZXJDYXNlJywndXBwZXJjYXNlJykuZGF0YSgndHJpZ2dlcicsdHJpZ2dlcikuZGF0YSgnaHNiJyxoc2IpLmRhdGEoJ2NoYW5nZScsby5jaGFuZ2U/by5jaGFuZ2U6bnVsbCkuYXR0cignbWF4bGVuZ3RoJyw3KS5hdHRyKCdhdXRvY29tcGxldGUnLCdvZmYnKS52YWwoJyMnK2NvbnZlcnRDYXNlKGNvbG9yLG8ubGV0dGVyQ2FzZSkpO2lmKG8ucmVhZG9ubHkpaW5wdXQucHJvcCgncmVhZG9ubHknLHRydWUpO2lmKG8uZGlzYWJsZWQpZGlzYWJsZShpbnB1dCk7dHJpZ2dlci5iaW5kKCdjbGljay5taW5pQ29sb3JzJyxmdW5jdGlvbihldmVudCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtpZihpbnB1dC52YWwoKT09PScnKWlucHV0LnZhbCgnIycpO3Nob3coaW5wdXQpfSk7aW5wdXQuYmluZCgnZm9jdXMubWluaUNvbG9ycycsZnVuY3Rpb24oZXZlbnQpe2lmKGlucHV0LnZhbCgpPT09JycpaW5wdXQudmFsKCcjJyk7c2hvdyhpbnB1dCl9KTtpbnB1dC5iaW5kKCdibHVyLm1pbmlDb2xvcnMnLGZ1bmN0aW9uKGV2ZW50KXt2YXIgaGV4PWV4cGFuZEhleChpbnB1dC52YWwoKSk7aW5wdXQudmFsKGhleD8nIycrY29udmVydENhc2UoaGV4LGlucHV0LmRhdGEoJ2xldHRlckNhc2UnKSk6JycpfSk7aW5wdXQuYmluZCgna2V5ZG93bi5taW5pQ29sb3JzJyxmdW5jdGlvbihldmVudCl7aWYoZXZlbnQua2V5Q29kZT09PTkpaGlkZShpbnB1dCl9KTtpbnB1dC5iaW5kKCdrZXl1cC5taW5pQ29sb3JzJyxmdW5jdGlvbihldmVudCl7c2V0Q29sb3JGcm9tSW5wdXQoaW5wdXQpfSk7aW5wdXQuYmluZCgncGFzdGUubWluaUNvbG9ycycsZnVuY3Rpb24oZXZlbnQpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtzZXRDb2xvckZyb21JbnB1dChpbnB1dCl9LDUpfSl9O3ZhciBkZXN0cm95PWZ1bmN0aW9uKGlucHV0KXtoaWRlKCk7aW5wdXQ9JChpbnB1dCk7aW5wdXQuZGF0YSgndHJpZ2dlcicpLnJlbW92ZSgpO2lucHV0LmF0dHIoJ2F1dG9jb21wbGV0ZScsaW5wdXQuZGF0YSgnb3JpZ2luYWwtYXV0b2NvbXBsZXRlJykpLmF0dHIoJ21heGxlbmd0aCcsaW5wdXQuZGF0YSgnb3JpZ2luYWwtbWF4bGVuZ3RoJykpLnJlbW92ZURhdGEoKS5yZW1vdmVDbGFzcygnbWluaUNvbG9ycycpLnVuYmluZCgnLm1pbmlDb2xvcnMnKTskKGRvY3VtZW50KS51bmJpbmQoJy5taW5pQ29sb3JzJyl9O3ZhciBlbmFibGU9ZnVuY3Rpb24oaW5wdXQpe2lucHV0LnByb3AoJ2Rpc2FibGVkJyxmYWxzZSkuZGF0YSgndHJpZ2dlcicpLmNzcygnb3BhY2l0eScsMSl9O3ZhciBkaXNhYmxlPWZ1bmN0aW9uKGlucHV0KXtoaWRlKGlucHV0KTtpbnB1dC5wcm9wKCdkaXNhYmxlZCcsdHJ1ZSkuZGF0YSgndHJpZ2dlcicpLmNzcygnb3BhY2l0eScsMC41KX07dmFyIHNob3c9ZnVuY3Rpb24oaW5wdXQpe2lmKGlucHV0LnByb3AoJ2Rpc2FibGVkJykpcmV0dXJuIGZhbHNlO2hpZGUoKTt2YXIgc2VsZWN0b3I9JCgnPGRpdiBjbGFzcz0ibWluaUNvbG9ycy1zZWxlY3RvciI+PC9kaXY+Jyk7c2VsZWN0b3IuYXBwZW5kKCc8ZGl2IGNsYXNzPSJtaW5pQ29sb3JzLWNvbG9ycyIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNGRkY7Ij48ZGl2IGNsYXNzPSJtaW5pQ29sb3JzLWNvbG9yUGlja2VyIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmQoJzxkaXYgY2xhc3M9Im1pbmlDb2xvcnMtaHVlcyI+PGRpdiBjbGFzcz0ibWluaUNvbG9ycy1odWVQaWNrZXIiPjwvZGl2PjwvZGl2PicpLmNzcyh7dG9wOmlucHV0LmlzKCc6dmlzaWJsZScpP2lucHV0Lm9mZnNldCgpLnRvcCtpbnB1dC5vdXRlckhlaWdodCgpOmlucHV0LmRhdGEoJ3RyaWdnZXInKS5vZmZzZXQoKS50b3AraW5wdXQuZGF0YSgndHJpZ2dlcicpLm91dGVySGVpZ2h0KCksbGVmdDppbnB1dC5pcygnOnZpc2libGUnKT9pbnB1dC5vZmZzZXQoKS5sZWZ0OmlucHV0LmRhdGEoJ3RyaWdnZXInKS5vZmZzZXQoKS5sZWZ0LGRpc3BsYXk6J25vbmUnfSkuYWRkQ2xhc3MoaW5wdXQuYXR0cignY2xhc3MnKSk7dmFyIGhzYj1pbnB1dC5kYXRhKCdoc2InKTtzZWxlY3Rvci5maW5kKCcubWluaUNvbG9ycy1jb2xvcnMnKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsJyMnK2hzYjJoZXgoe2g6aHNiLmgsczoxMDAsYjoxMDB9KSk7dmFyIGNvbG9yUG9zaXRpb249aW5wdXQuZGF0YSgnY29sb3JQb3NpdGlvbicpO2lmKCFjb2xvclBvc2l0aW9uKWNvbG9yUG9zaXRpb249Z2V0Q29sb3JQb3NpdGlvbkZyb21IU0IoaHNiKTtzZWxlY3Rvci5maW5kKCcubWluaUNvbG9ycy1jb2xvclBpY2tlcicpLmNzcygndG9wJyxjb2xvclBvc2l0aW9uLnkrJ3B4JykuY3NzKCdsZWZ0Jyxjb2xvclBvc2l0aW9uLngrJ3B4Jyk7dmFyIGh1ZVBvc2l0aW9uPWlucHV0LmRhdGEoJ2h1ZVBvc2l0aW9uJyk7aWYoIWh1ZVBvc2l0aW9uKWh1ZVBvc2l0aW9uPWdldEh1ZVBvc2l0aW9uRnJvbUhTQihoc2IpO3NlbGVjdG9yLmZpbmQoJy5taW5pQ29sb3JzLWh1ZVBpY2tlcicpLmNzcygndG9wJyxodWVQb3NpdGlvbi55KydweCcpO2lucHV0LmRhdGEoJ3NlbGVjdG9yJyxzZWxlY3RvcikuZGF0YSgnaHVlUGlja2VyJyxzZWxlY3Rvci5maW5kKCcubWluaUNvbG9ycy1odWVQaWNrZXInKSkuZGF0YSgnY29sb3JQaWNrZXInLHNlbGVjdG9yLmZpbmQoJy5taW5pQ29sb3JzLWNvbG9yUGlja2VyJykpLmRhdGEoJ21vdXNlYnV0dG9uJywwKTskKCdCT0RZJykuYXBwZW5kKHNlbGVjdG9yKTtzZWxlY3Rvci5mYWRlSW4oMTAwKTtzZWxlY3Rvci5iaW5kKCdzZWxlY3RzdGFydCcsZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2V9KTskKGRvY3VtZW50KS5iaW5kKCdtb3VzZWRvd24ubWluaUNvbG9ycyB0b3VjaHN0YXJ0Lm1pbmlDb2xvcnMnLGZ1bmN0aW9uKGV2ZW50KXtpbnB1dC5kYXRhKCdtb3VzZWJ1dHRvbicsMSk7aWYoJChldmVudC50YXJnZXQpLnBhcmVudHMoKS5hbmRTZWxmKCkuaGFzQ2xhc3MoJ21pbmlDb2xvcnMtY29sb3JzJykpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7aW5wdXQuZGF0YSgnbW92aW5nJywnY29sb3JzJyk7bW92ZUNvbG9yKGlucHV0LGV2ZW50KX1pZigkKGV2ZW50LnRhcmdldCkucGFyZW50cygpLmFuZFNlbGYoKS5oYXNDbGFzcygnbWluaUNvbG9ycy1odWVzJykpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7aW5wdXQuZGF0YSgnbW92aW5nJywnaHVlcycpO21vdmVIdWUoaW5wdXQsZXZlbnQpfWlmKCQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCkuYW5kU2VsZigpLmhhc0NsYXNzKCdtaW5pQ29sb3JzLXNlbGVjdG9yJykpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7cmV0dXJufWlmKCQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCkuYW5kU2VsZigpLmhhc0NsYXNzKCdtaW5pQ29sb3JzJykpcmV0dXJuO2hpZGUoaW5wdXQpfSk7JChkb2N1bWVudCkuYmluZCgnbW91c2V1cC5taW5pQ29sb3JzIHRvdWNoZW5kLm1pbmlDb2xvcnMnLGZ1bmN0aW9uKGV2ZW50KXtldmVudC5wcmV2ZW50RGVmYXVsdCgpO2lucHV0LmRhdGEoJ21vdXNlYnV0dG9uJywwKS5yZW1vdmVEYXRhKCdtb3ZpbmcnKX0pLmJpbmQoJ21vdXNlbW92ZS5taW5pQ29sb3JzIHRvdWNobW92ZS5taW5pQ29sb3JzJyxmdW5jdGlvbihldmVudCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtpZihpbnB1dC5kYXRhKCdtb3VzZWJ1dHRvbicpPT09MSl7aWYoaW5wdXQuZGF0YSgnbW92aW5nJyk9PT0nY29sb3JzJyltb3ZlQ29sb3IoaW5wdXQsZXZlbnQpO2lmKGlucHV0LmRhdGEoJ21vdmluZycpPT09J2h1ZXMnKW1vdmVIdWUoaW5wdXQsZXZlbnQpfX0pfTt2YXIgaGlkZT1mdW5jdGlvbihpbnB1dCl7aWYoIWlucHV0KWlucHV0PScubWluaUNvbG9ycyc7JChpbnB1dCkuZWFjaChmdW5jdGlvbigpe3ZhciBzZWxlY3Rvcj0kKHRoaXMpLmRhdGEoJ3NlbGVjdG9yJyk7JCh0aGlzKS5yZW1vdmVEYXRhKCdzZWxlY3RvcicpOyQoc2VsZWN0b3IpLmZhZGVPdXQoMTAwLGZ1bmN0aW9uKCl7JCh0aGlzKS5yZW1vdmUoKX0pfSk7JChkb2N1bWVudCkudW5iaW5kKCdtb3VzZWRvd24ubWluaUNvbG9ycyB0b3VjaHN0YXJ0Lm1pbmlDb2xvcnMnKS51bmJpbmQoJ21vdXNlbW92ZS5taW5pQ29sb3JzIHRvdWNobW92ZS5taW5pQ29sb3JzJyl9O3ZhciBtb3ZlQ29sb3I9ZnVuY3Rpb24oaW5wdXQsZXZlbnQpe3ZhciBjb2xvclBpY2tlcj1pbnB1dC5kYXRhKCdjb2xvclBpY2tlcicpO2NvbG9yUGlja2VyLmhpZGUoKTt2YXIgcG9zaXRpb249e3g6ZXZlbnQucGFnZVgseTpldmVudC5wYWdlWX07aWYoZXZlbnQub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyl7cG9zaXRpb24ueD1ldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO3Bvc2l0aW9uLnk9ZXZlbnQub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWX1wb3NpdGlvbi54PXBvc2l0aW9uLngtaW5wdXQuZGF0YSgnc2VsZWN0b3InKS5maW5kKCcubWluaUNvbG9ycy1jb2xvcnMnKS5vZmZzZXQoKS5sZWZ0LTU7cG9zaXRpb24ueT1wb3NpdGlvbi55LWlucHV0LmRhdGEoJ3NlbGVjdG9yJykuZmluZCgnLm1pbmlDb2xvcnMtY29sb3JzJykub2Zmc2V0KCkudG9wLTU7aWYocG9zaXRpb24ueDw9LTUpcG9zaXRpb24ueD0tNTtpZihwb3NpdGlvbi54Pj0xNDQpcG9zaXRpb24ueD0xNDQ7aWYocG9zaXRpb24ueTw9LTUpcG9zaXRpb24ueT0tNTtpZihwb3NpdGlvbi55Pj0xNDQpcG9zaXRpb24ueT0xNDQ7aW5wdXQuZGF0YSgnY29sb3JQb3NpdGlvbicscG9zaXRpb24pO2NvbG9yUGlja2VyLmNzcygnbGVmdCcscG9zaXRpb24ueCkuY3NzKCd0b3AnLHBvc2l0aW9uLnkpLnNob3coKTt2YXIgcz1NYXRoLnJvdW5kKChwb3NpdGlvbi54KzUpKjAuNjcpO2lmKHM8MClzPTA7aWYocz4xMDApcz0xMDA7dmFyIGI9MTAwLU1hdGgucm91bmQoKHBvc2l0aW9uLnkrNSkqMC42Nyk7aWYoYjwwKWI9MDtpZihiPjEwMCliPTEwMDt2YXIgaHNiPWlucHV0LmRhdGEoJ2hzYicpO2hzYi5zPXM7aHNiLmI9YjtzZXRDb2xvcihpbnB1dCxoc2IsdHJ1ZSl9O3ZhciBtb3ZlSHVlPWZ1bmN0aW9uKGlucHV0LGV2ZW50KXt2YXIgaHVlUGlja2VyPWlucHV0LmRhdGEoJ2h1ZVBpY2tlcicpO2h1ZVBpY2tlci5oaWRlKCk7dmFyIHBvc2l0aW9uPXt5OmV2ZW50LnBhZ2VZfTtpZihldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzKXtwb3NpdGlvbi55PWV2ZW50Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVl9cG9zaXRpb24ueT1wb3NpdGlvbi55LWlucHV0LmRhdGEoJ3NlbGVjdG9yJykuZmluZCgnLm1pbmlDb2xvcnMtY29sb3JzJykub2Zmc2V0KCkudG9wLTE7aWYocG9zaXRpb24ueTw9LTEpcG9zaXRpb24ueT0tMTtpZihwb3NpdGlvbi55Pj0xNDkpcG9zaXRpb24ueT0xNDk7aW5wdXQuZGF0YSgnaHVlUG9zaXRpb24nLHBvc2l0aW9uKTtodWVQaWNrZXIuY3NzKCd0b3AnLHBvc2l0aW9uLnkpLnNob3coKTt2YXIgaD1NYXRoLnJvdW5kKCgxNTAtcG9zaXRpb24ueS0xKSoyLjQpO2lmKGg8MCloPTA7aWYoaD4zNjApaD0zNjA7dmFyIGhzYj1pbnB1dC5kYXRhKCdoc2InKTtoc2IuaD1oO3NldENvbG9yKGlucHV0LGhzYix0cnVlKX07dmFyIHNldENvbG9yPWZ1bmN0aW9uKGlucHV0LGhzYix1cGRhdGVJbnB1dCl7aW5wdXQuZGF0YSgnaHNiJyxoc2IpO3ZhciBoZXg9aHNiMmhleChoc2IpO2lmKHVwZGF0ZUlucHV0KWlucHV0LnZhbCgnIycrY29udmVydENhc2UoaGV4LGlucHV0LmRhdGEoJ2xldHRlckNhc2UnKSkpO2lucHV0LmRhdGEoJ3RyaWdnZXInKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsJyMnK2hleCk7aWYoaW5wdXQuZGF0YSgnc2VsZWN0b3InKSlpbnB1dC5kYXRhKCdzZWxlY3RvcicpLmZpbmQoJy5taW5pQ29sb3JzLWNvbG9ycycpLmNzcygnYmFja2dyb3VuZENvbG9yJywnIycraHNiMmhleCh7aDpoc2IuaCxzOjEwMCxiOjEwMH0pKTtpZihpbnB1dC5kYXRhKCdjaGFuZ2UnKSl7aWYoaGV4PT09aW5wdXQuZGF0YSgnbGFzdENoYW5nZScpKXJldHVybjtpbnB1dC5kYXRhKCdjaGFuZ2UnKS5jYWxsKGlucHV0LCcjJytoZXgsaHNiMnJnYihoc2IpKTtpbnB1dC5kYXRhKCdsYXN0Q2hhbmdlJyxoZXgpfX07dmFyIHNldENvbG9yRnJvbUlucHV0PWZ1bmN0aW9uKGlucHV0KXtpbnB1dC52YWwoJyMnK2NsZWFuSGV4KGlucHV0LnZhbCgpKSk7dmFyIGhleD1leHBhbmRIZXgoaW5wdXQudmFsKCkpO2lmKCFoZXgpcmV0dXJuIGZhbHNlO3ZhciBoc2I9aGV4MmhzYihoZXgpO3ZhciBjdXJyZW50SFNCPWlucHV0LmRhdGEoJ2hzYicpO2lmKGhzYi5oPT09Y3VycmVudEhTQi5oJiZoc2Iucz09PWN1cnJlbnRIU0IucyYmaHNiLmI9PT1jdXJyZW50SFNCLmIpcmV0dXJuIHRydWU7dmFyIGNvbG9yUG9zaXRpb249Z2V0Q29sb3JQb3NpdGlvbkZyb21IU0IoaHNiKTt2YXIgY29sb3JQaWNrZXI9JChpbnB1dC5kYXRhKCdjb2xvclBpY2tlcicpKTtjb2xvclBpY2tlci5jc3MoJ3RvcCcsY29sb3JQb3NpdGlvbi55KydweCcpLmNzcygnbGVmdCcsY29sb3JQb3NpdGlvbi54KydweCcpO2lucHV0LmRhdGEoJ2NvbG9yUG9zaXRpb24nLGNvbG9yUG9zaXRpb24pO3ZhciBodWVQb3NpdGlvbj1nZXRIdWVQb3NpdGlvbkZyb21IU0IoaHNiKTt2YXIgaHVlUGlja2VyPSQoaW5wdXQuZGF0YSgnaHVlUGlja2VyJykpO2h1ZVBpY2tlci5jc3MoJ3RvcCcsaHVlUG9zaXRpb24ueSsncHgnKTtpbnB1dC5kYXRhKCdodWVQb3NpdGlvbicsaHVlUG9zaXRpb24pO3NldENvbG9yKGlucHV0LGhzYik7cmV0dXJuIHRydWV9O3ZhciBjb252ZXJ0Q2FzZT1mdW5jdGlvbihzdHJpbmcsbGV0dGVyQ2FzZSl7aWYobGV0dGVyQ2FzZT09PSdsb3dlcmNhc2UnKXJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKTtpZihsZXR0ZXJDYXNlPT09J3VwcGVyY2FzZScpcmV0dXJuIHN0cmluZy50b1VwcGVyQ2FzZSgpO3JldHVybiBzdHJpbmd9O3ZhciBnZXRDb2xvclBvc2l0aW9uRnJvbUhTQj1mdW5jdGlvbihoc2Ipe3ZhciB4PU1hdGguY2VpbChoc2Iucy8wLjY3KTtpZih4PDApeD0wO2lmKHg+MTUwKXg9MTUwO3ZhciB5PTE1MC1NYXRoLmNlaWwoaHNiLmIvMC42Nyk7aWYoeTwwKXk9MDtpZih5PjE1MCl5PTE1MDtyZXR1cm57eDp4LTUseTp5LTV9fTt2YXIgZ2V0SHVlUG9zaXRpb25Gcm9tSFNCPWZ1bmN0aW9uKGhzYil7dmFyIHk9MTUwLShoc2IuaC8yLjQpO2lmKHk8MCloPTA7aWYoeT4xNTApaD0xNTA7cmV0dXJue3k6eS0xfX07dmFyIGNsZWFuSGV4PWZ1bmN0aW9uKGhleCl7cmV0dXJuIGhleC5yZXBsYWNlKC9bXkEtRjAtOV0vaWcsJycpfTt2YXIgZXhwYW5kSGV4PWZ1bmN0aW9uKGhleCl7aGV4PWNsZWFuSGV4KGhleCk7aWYoIWhleClyZXR1cm4gbnVsbDtpZihoZXgubGVuZ3RoPT09MyloZXg9aGV4WzBdK2hleFswXStoZXhbMV0raGV4WzFdK2hleFsyXStoZXhbMl07cmV0dXJuIGhleC5sZW5ndGg9PT02P2hleDpudWxsfTt2YXIgaHNiMnJnYj1mdW5jdGlvbihoc2Ipe3ZhciByZ2I9e307dmFyIGg9TWF0aC5yb3VuZChoc2IuaCk7dmFyIHM9TWF0aC5yb3VuZChoc2IucyoyNTUvMTAwKTt2YXIgdj1NYXRoLnJvdW5kKGhzYi5iKjI1NS8xMDApO2lmKHM9PT0wKXtyZ2Iucj1yZ2IuZz1yZ2IuYj12fWVsc2V7dmFyIHQxPXY7dmFyIHQyPSgyNTUtcykqdi8yNTU7dmFyIHQzPSh0MS10MikqKGglNjApLzYwO2lmKGg9PT0zNjApaD0wO2lmKGg8NjApe3JnYi5yPXQxO3JnYi5iPXQyO3JnYi5nPXQyK3QzfWVsc2UgaWYoaDwxMjApe3JnYi5nPXQxO3JnYi5iPXQyO3JnYi5yPXQxLXQzfWVsc2UgaWYoaDwxODApe3JnYi5nPXQxO3JnYi5yPXQyO3JnYi5iPXQyK3QzfWVsc2UgaWYoaDwyNDApe3JnYi5iPXQxO3JnYi5yPXQyO3JnYi5nPXQxLXQzfWVsc2UgaWYoaDwzMDApe3JnYi5iPXQxO3JnYi5nPXQyO3JnYi5yPXQyK3QzfWVsc2UgaWYoaDwzNjApe3JnYi5yPXQxO3JnYi5nPXQyO3JnYi5iPXQxLXQzfWVsc2V7cmdiLnI9MDtyZ2IuZz0wO3JnYi5iPTB9fXJldHVybntyOk1hdGgucm91bmQocmdiLnIpLGc6TWF0aC5yb3VuZChyZ2IuZyksYjpNYXRoLnJvdW5kKHJnYi5iKX19O3ZhciByZ2IyaGV4PWZ1bmN0aW9uKHJnYil7dmFyIGhleD1bcmdiLnIudG9TdHJpbmcoMTYpLHJnYi5nLnRvU3RyaW5nKDE2KSxyZ2IuYi50b1N0cmluZygxNildOyQuZWFjaChoZXgsZnVuY3Rpb24obnIsdmFsKXtpZih2YWwubGVuZ3RoPT09MSloZXhbbnJdPScwJyt2YWx9KTtyZXR1cm4gaGV4LmpvaW4oJycpfTt2YXIgaGV4MnJnYj1mdW5jdGlvbihoZXgpe2hleD1wYXJzZUludCgoKGhleC5pbmRleE9mKCcjJyk+LTEpP2hleC5zdWJzdHJpbmcoMSk6aGV4KSwxNik7cmV0dXJue3I6aGV4Pj4xNixnOihoZXgmMHgwMEZGMDApPj44LGI6KGhleCYweDAwMDBGRil9fTt2YXIgcmdiMmhzYj1mdW5jdGlvbihyZ2Ipe3ZhciBoc2I9e2g6MCxzOjAsYjowfTt2YXIgbWluPU1hdGgubWluKHJnYi5yLHJnYi5nLHJnYi5iKTt2YXIgbWF4PU1hdGgubWF4KHJnYi5yLHJnYi5nLHJnYi5iKTt2YXIgZGVsdGE9bWF4LW1pbjtoc2IuYj1tYXg7aHNiLnM9bWF4IT09MD8yNTUqZGVsdGEvbWF4OjA7aWYoaHNiLnMhPT0wKXtpZihyZ2Iucj09PW1heCl7aHNiLmg9KHJnYi5nLXJnYi5iKS9kZWx0YX1lbHNlIGlmKHJnYi5nPT09bWF4KXtoc2IuaD0yKyhyZ2IuYi1yZ2IucikvZGVsdGF9ZWxzZXtoc2IuaD00KyhyZ2Iuci1yZ2IuZykvZGVsdGF9fWVsc2V7aHNiLmg9LTF9aHNiLmgqPTYwO2lmKGhzYi5oPDApe2hzYi5oKz0zNjB9aHNiLnMqPTEwMC8yNTU7aHNiLmIqPTEwMC8yNTU7cmV0dXJuIGhzYn07dmFyIGhleDJoc2I9ZnVuY3Rpb24oaGV4KXt2YXIgaHNiPXJnYjJoc2IoaGV4MnJnYihoZXgpKTtpZihoc2Iucz09PTApaHNiLmg9MzYwO3JldHVybiBoc2J9O3ZhciBoc2IyaGV4PWZ1bmN0aW9uKGhzYil7cmV0dXJuIHJnYjJoZXgoaHNiMnJnYihoc2IpKX07c3dpdGNoKG8pe2Nhc2UncmVhZG9ubHknOiQodGhpcykuZWFjaChmdW5jdGlvbigpe2lmKCEkKHRoaXMpLmhhc0NsYXNzKCdtaW5pQ29sb3JzJykpcmV0dXJuOyQodGhpcykucHJvcCgncmVhZG9ubHknLGRhdGEpfSk7cmV0dXJuICQodGhpcyk7Y2FzZSdkaXNhYmxlZCc6JCh0aGlzKS5lYWNoKGZ1bmN0aW9uKCl7aWYoISQodGhpcykuaGFzQ2xhc3MoJ21pbmlDb2xvcnMnKSlyZXR1cm47aWYoZGF0YSl7ZGlzYWJsZSgkKHRoaXMpKX1lbHNle2VuYWJsZSgkKHRoaXMpKX19KTtyZXR1cm4gJCh0aGlzKTtjYXNlJ3ZhbHVlJzppZihkYXRhPT09dW5kZWZpbmVkKXtpZighJCh0aGlzKS5oYXNDbGFzcygnbWluaUNvbG9ycycpKXJldHVybjt2YXIgaW5wdXQ9JCh0aGlzKSxoZXg9ZXhwYW5kSGV4KGlucHV0LnZhbCgpKTtyZXR1cm4gaGV4PycjJytjb252ZXJ0Q2FzZShoZXgsaW5wdXQuZGF0YSgnbGV0dGVyQ2FzZScpKTpudWxsfSQodGhpcykuZWFjaChmdW5jdGlvbigpe2lmKCEkKHRoaXMpLmhhc0NsYXNzKCdtaW5pQ29sb3JzJykpcmV0dXJuOyQodGhpcykudmFsKGRhdGEpO3NldENvbG9yRnJvbUlucHV0KCQodGhpcykpfSk7cmV0dXJuICQodGhpcyk7Y2FzZSdkZXN0cm95JzokKHRoaXMpLmVhY2goZnVuY3Rpb24oKXtpZighJCh0aGlzKS5oYXNDbGFzcygnbWluaUNvbG9ycycpKXJldHVybjtkZXN0cm95KCQodGhpcykpfSk7cmV0dXJuICQodGhpcyk7ZGVmYXVsdDppZighbylvPXt9OyQodGhpcykuZWFjaChmdW5jdGlvbigpe2lmKCQodGhpcylbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpIT09J2lucHV0JylyZXR1cm47aWYoJCh0aGlzKS5kYXRhKCd0cmlnZ2VyJykpcmV0dXJuO2NyZWF0ZSgkKHRoaXMpLG8sZGF0YSl9KTtyZXR1cm4gJCh0aGlzKX19fSl9KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js
###PACKDATA,FILE_START,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQoJLy8gQ2hhbmdlIHRhYiBvbiBjbGljay4KCWpRdWVyeSggJy5iYWNrdXBidWRkeS10YWJzLXdyYXAgLm5hdi10YWJbaHJlZl49IiMiXScgKS5jbGljayggZnVuY3Rpb24oZSl7IC8qIGlnbm9yZXMgYW55IG5vbiBoYXNodGFnIGxpbmtzIHNpbmNlIHRoZXkgZ28gZGlyZWN0IHRvIGEgVVJMLi4uICovCgkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuCgkJdGhpc1RhYkJsb2NrID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICcuYmFja3VwYnVkZHktdGFicy13cmFwJyApOwoJCXRoaXNUYWJCbG9jay5maW5kKCAnLmJhY2t1cGJ1ZGR5LXRhYicgKS5oaWRlKCk7CgkJCgkJLy8gVXBkYXRlIHNlbGVjdGVkIHRhYi4KCQl0aGlzVGFiQmxvY2suZmluZCggJy5uYXYtdGFiLWFjdGl2ZScgKS5yZW1vdmVDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCQoJCS8vIFNob3cgdGhlIGNvcnJlY3QgdGFiIGJsb2NrLgoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOwoJCXRoaXNUYWJCbG9jay5maW5kKCBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkgKS5zaG93KCk7Cgl9KTsKCQoJLy8gQ2hhbmdlIHRhYiBvbiBjbGljayAtLSBBSkFYIHZlcnNpb24uCglqUXVlcnkoICcuYmFja3VwYnVkZHktdGFicy13cmFwIC5uYXYtdGFiW2hyZWZePSJqYXZhc2NyaXB0Il0nICkuY2xpY2soIGZ1bmN0aW9uKGUpeyAvKiBpZ25vcmVzIGFueSBub24gaGFzaHRhZyBsaW5rcyBzaW5jZSB0aGV5IGdvIGRpcmVjdCB0byBhIFVSTC4uLiAqLwoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuCgkJdGhpc1RhYkJsb2NrID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICcuYmFja3VwYnVkZHktdGFicy13cmFwJyApOwoJCXRoaXNUYWJCbG9jay5maW5kKCAnLmJhY2t1cGJ1ZGR5LXRhYicgKS5oaWRlKCk7CgkJCgkJLy8gVXBkYXRlIHNlbGVjdGVkIHRhYi4KCQl0aGlzVGFiQmxvY2suZmluZCggJy5uYXYtdGFiLWFjdGl2ZScgKS5yZW1vdmVDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCQoJCS8vIFNob3cgdGhlIGNvcnJlY3QgdGFiIGJsb2NrLgoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOwoJCXRoaXNUYWJCbG9jay5maW5kKCBqUXVlcnkodGhpcykuYXR0ciggJ2RhdGEtYWpheCcgKSApLnNob3coKTsKCX0pOwoJCgkvLyBBdXRvLWRpc3BsYXkgdGhlIGNvcnJlY3QgdGFiIG9uIGxvYWQgaWYgc3BlY2lmeWluZyBhIG5vbi1kZWZhdWx0LgoJalF1ZXJ5KCAnLm5hdi10YWItYWN0aXZlJyApLmVhY2goIGZ1bmN0aW9uKCl7CgkJalF1ZXJ5KHRoaXMpLmNsaWNrKCk7Cgl9KTsKfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
###PACKDATA,FILE_START,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js
LyoqCiAqIFRhYmxlRG5EIHBsdWctaW4gZm9yIEpRdWVyeSwgYWxsb3dzIHlvdSB0byBkcmFnIGFuZCBkcm9wIHRhYmxlIHJvd3MKICogWW91IGNhbiBzZXQgdXAgdmFyaW91cyBvcHRpb25zIHRvIGNvbnRyb2wgaG93IHRoZSBzeXN0ZW0gd2lsbCB3b3JrCiAqIENvcHlyaWdodCAoYykgRGVuaXMgSG93bGV0dCA8ZGVuaXNoQGlzb2NyYS5jb20+CiAqIExpY2Vuc2VkIGxpa2UgalF1ZXJ5LCBzZWUgaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9MaWNlbnNlLgogKi8KalF1ZXJ5LnRhYmxlRG5EID0gewogICAgLyoqIEtlZXAgaG9sZCBvZiB0aGUgY3VycmVudCB0YWJsZSBiZWluZyBkcmFnZ2VkICovCiAgICBjdXJyZW50VGFibGUgOiBudWxsLAogICAgLyoqIEtlZXAgaG9sZCBvZiB0aGUgY3VycmVudCBkcmFnIG9iamVjdCBpZiBhbnkgKi8KICAgIGRyYWdPYmplY3Q6IG51bGwsCiAgICAvKiogVGhlIGN1cnJlbnQgbW91c2Ugb2Zmc2V0ICovCiAgICBtb3VzZU9mZnNldDogbnVsbCwKICAgIC8qKiBSZW1lbWJlciB0aGUgb2xkIHZhbHVlIG9mIFkgc28gdGhhdCB3ZSBkb24ndCBkbyB0b28gbXVjaCBwcm9jZXNzaW5nICovCiAgICBvbGRZOiAwLAoKICAgIC8qKiBBY3R1YWxseSBidWlsZCB0aGUgc3RydWN0dXJlICovCiAgICBidWlsZDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgIC8vIFNldCB1cCB0aGUgZGVmYXVsdHMgaWYgYW55CgogICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gVGhpcyBpcyBib3VuZCB0byBlYWNoIG1hdGNoaW5nIHRhYmxlLCBzZXQgdXAgdGhlIGRlZmF1bHRzIGFuZCBvdmVycmlkZSB3aXRoIHVzZXIgb3B0aW9ucwogICAgICAgICAgICB0aGlzLnRhYmxlRG5EQ29uZmlnID0galF1ZXJ5LmV4dGVuZCh7CiAgICAgICAgICAgICAgICBvbkRyYWdTdHlsZTogbnVsbCwKICAgICAgICAgICAgICAgIG9uRHJvcFN0eWxlOiBudWxsLAoJCQkJLy8gQWRkIGluIHRoZSBkZWZhdWx0IGNsYXNzIGZvciB3aGlsZURyYWdnaW5nCgkJCQlvbkRyYWdDbGFzczogInREbkRfd2hpbGVEcmFnIiwKICAgICAgICAgICAgICAgIG9uRHJvcDogbnVsbCwKICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBudWxsLAogICAgICAgICAgICAgICAgc2Nyb2xsQW1vdW50OiA1LAoJCQkJc2VyaWFsaXplUmVnZXhwOiAvW15cLV0qJC8sIC8vIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gdXNlIHRvIHRyaW0gcm93IElEcwoJCQkJc2VyaWFsaXplUGFyYW1OYW1lOiBudWxsLCAvLyBJZiB5b3Ugd2FudCB0byBzcGVjaWZ5IGFub3RoZXIgcGFyYW1ldGVyIG5hbWUgaW5zdGVhZCBvZiB0aGUgdGFibGUgSUQKICAgICAgICAgICAgICAgIGRyYWdIYW5kbGU6IG51bGwgLy8gSWYgeW91IGdpdmUgdGhlIG5hbWUgb2YgYSBjbGFzcyBoZXJlLCB0aGVuIG9ubHkgQ2VsbHMgd2l0aCB0aGlzIGNsYXNzIHdpbGwgYmUgZHJhZ2dhYmxlCiAgICAgICAgICAgIH0sIG9wdGlvbnMgfHwge30pOwogICAgICAgICAgICAvLyBOb3cgbWFrZSB0aGUgcm93cyBkcmFnZ2FibGUKICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELm1ha2VEcmFnZ2FibGUodGhpcyk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIE5vdyB3ZSBuZWVkIHRvIGNhcHR1cmUgdGhlIG1vdXNlIHVwIGFuZCBtb3VzZSBtb3ZlIGV2ZW50CiAgICAgICAgLy8gV2UgY2FuIHVzZSBiaW5kIHNvIHRoYXQgd2UgZG9uJ3QgaW50ZXJmZXJlIHdpdGggb3RoZXIgZXZlbnQgaGFuZGxlcnMKICAgICAgICBqUXVlcnkoZG9jdW1lbnQpCiAgICAgICAgICAgIC5iaW5kKCdtb3VzZW1vdmUnLCBqUXVlcnkudGFibGVEbkQubW91c2Vtb3ZlKQogICAgICAgICAgICAuYmluZCgnbW91c2V1cCcsIGpRdWVyeS50YWJsZURuRC5tb3VzZXVwKTsKCiAgICAgICAgLy8gRG9uJ3QgYnJlYWsgdGhlIGNoYWluCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8qKiBUaGlzIGZ1bmN0aW9uIG1ha2VzIGFsbCB0aGUgcm93cyBvbiB0aGUgdGFibGUgZHJhZ2dhYmxlIGFwYXJ0IGZyb20gdGhvc2UgbWFya2VkIGFzICJOb0RyYWciICovCiAgICBtYWtlRHJhZ2dhYmxlOiBmdW5jdGlvbih0YWJsZSkgewogICAgICAgIHZhciBjb25maWcgPSB0YWJsZS50YWJsZURuRENvbmZpZzsKCQlpZiAodGFibGUudGFibGVEbkRDb25maWcuZHJhZ0hhbmRsZSkgewoJCQkvLyBXZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBldmVudCB0byB0aGUgc3BlY2lmaWVkIGNlbGxzCgkJCXZhciBjZWxscyA9IGpRdWVyeSgidGQuIit0YWJsZS50YWJsZURuRENvbmZpZy5kcmFnSGFuZGxlLCB0YWJsZSk7CgkJCWNlbGxzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkvLyBUaGUgY2VsbCBpcyBib3VuZCB0byAidGhpcyIKICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5tb3VzZWRvd24oZnVuY3Rpb24oZXYpIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdCA9IHRoaXMucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkudGFibGVEbkQuY3VycmVudFRhYmxlID0gdGFibGU7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELm1vdXNlT2Zmc2V0ID0galF1ZXJ5LnRhYmxlRG5ELmdldE1vdXNlT2Zmc2V0KHRoaXMsIGV2KTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLm9uRHJhZ1N0YXJ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIG9uRHJvcCBtZXRob2QgaWYgdGhlcmUgaXMgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5vbkRyYWdTdGFydCh0YWJsZSwgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoJCQl9KQoJCX0gZWxzZSB7CgkJCS8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgYWRkIHRoZSBldmVudCB0byB0aGUgd2hvbGUgcm93CgkgICAgICAgIHZhciByb3dzID0galF1ZXJ5KCJ0ciIsIHRhYmxlKTsgLy8gZ2V0IGFsbCB0aGUgcm93cyBhcyBhIHdyYXBwZWQgc2V0CgkgICAgICAgIHJvd3MuZWFjaChmdW5jdGlvbigpIHsKCQkJCS8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJvdywgdGhlIHJvdyBpcyBib3VuZCB0byAidGhpcyIKCQkJCXZhciByb3cgPSBqUXVlcnkodGhpcyk7CgkJCQlpZiAoISByb3cuaGFzQ2xhc3MoIm5vZHJhZyIpKSB7CgkgICAgICAgICAgICAgICAgcm93Lm1vdXNlZG93bihmdW5jdGlvbihldikgewoJICAgICAgICAgICAgICAgICAgICBpZiAoZXYudGFyZ2V0LnRhZ05hbWUgPT0gIlREIikgewoJICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELmRyYWdPYmplY3QgPSB0aGlzOwoJICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELmN1cnJlbnRUYWJsZSA9IHRhYmxlOwoJICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELm1vdXNlT2Zmc2V0ID0galF1ZXJ5LnRhYmxlRG5ELmdldE1vdXNlT2Zmc2V0KHRoaXMsIGV2KTsKCSAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcub25EcmFnU3RhcnQpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBvbkRyb3AgbWV0aG9kIGlmIHRoZXJlIGlzIG9uZQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5vbkRyYWdTdGFydCh0YWJsZSwgdGhpcyk7CgkgICAgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9KS5jc3MoImN1cnNvciIsICJtb3ZlIik7IC8vIFN0b3JlIHRoZSB0YWJsZURuRCBvYmplY3QKCQkJCX0KCQkJfSk7CgkJfQoJfSwKCgl1cGRhdGVUYWJsZXM6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJLy8gdGhpcyBpcyBub3cgYm91bmQgdG8gZWFjaCBtYXRjaGluZyB0YWJsZQoJCQlpZiAodGhpcy50YWJsZURuRENvbmZpZykgewoJCQkJalF1ZXJ5LnRhYmxlRG5ELm1ha2VEcmFnZ2FibGUodGhpcyk7CgkJCX0KCQl9KQoJfSwKCiAgICAvKiogR2V0IHRoZSBtb3VzZSBjb29yZGluYXRlcyBmcm9tIHRoZSBldmVudCAoYWxsb3dpbmcgZm9yIGJyb3dzZXIgZGlmZmVyZW5jZXMpICovCiAgICBtb3VzZUNvb3JkczogZnVuY3Rpb24oZXYpewogICAgICAgIGlmKGV2LnBhZ2VYIHx8IGV2LnBhZ2VZKXsKICAgICAgICAgICAgcmV0dXJuIHt4OmV2LnBhZ2VYLCB5OmV2LnBhZ2VZfTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgeDpldi5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IC0gZG9jdW1lbnQuYm9keS5jbGllbnRMZWZ0LAogICAgICAgICAgICB5OmV2LmNsaWVudFkgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCAgLSBkb2N1bWVudC5ib2R5LmNsaWVudFRvcAogICAgICAgIH07CiAgICB9LAoKICAgIC8qKiBHaXZlbiBhIHRhcmdldCBlbGVtZW50IGFuZCBhIG1vdXNlIGV2ZW50LCBnZXQgdGhlIG1vdXNlIG9mZnNldCBmcm9tIHRoYXQgZWxlbWVudC4KICAgICAgICBUbyBkbyB0aGlzIHdlIG5lZWQgdGhlIGVsZW1lbnQncyBwb3NpdGlvbiBhbmQgdGhlIG1vdXNlIHBvc2l0aW9uICovCiAgICBnZXRNb3VzZU9mZnNldDogZnVuY3Rpb24odGFyZ2V0LCBldikgewogICAgICAgIGV2ID0gZXYgfHwgd2luZG93LmV2ZW50OwoKICAgICAgICB2YXIgZG9jUG9zICAgID0gdGhpcy5nZXRQb3NpdGlvbih0YXJnZXQpOwogICAgICAgIHZhciBtb3VzZVBvcyAgPSB0aGlzLm1vdXNlQ29vcmRzKGV2KTsKICAgICAgICByZXR1cm4ge3g6bW91c2VQb3MueCAtIGRvY1Bvcy54LCB5Om1vdXNlUG9zLnkgLSBkb2NQb3MueX07CiAgICB9LAoKICAgIC8qKiBHZXQgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgYnkgZ29pbmcgdXAgdGhlIERPTSB0cmVlIGFuZCBhZGRpbmcgdXAgYWxsIHRoZSBvZmZzZXRzICovCiAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24oZSl7CiAgICAgICAgdmFyIGxlZnQgPSAwOwogICAgICAgIHZhciB0b3AgID0gMDsKICAgICAgICAvKiogU2FmYXJpIGZpeCAtLSB0aGFua3MgdG8gTHVpcyBDaGF0byBmb3IgdGhpcyEgKi8KICAgICAgICBpZiAoZS5vZmZzZXRIZWlnaHQgPT0gMCkgewogICAgICAgICAgICAvKiogU2FmYXJpIDIgZG9lc24ndCBjb3JyZWN0bHkgZ3JhYiB0aGUgb2Zmc2V0VG9wIG9mIGEgdGFibGUgcm93CiAgICAgICAgICAgIHRoaXMgaXMgZGV0YWlsZWQgaGVyZToKICAgICAgICAgICAgaHR0cDovL2phY29iLnBlYXJncm92ZS5jb20vYmxvZy8yMDA2L3RlY2huaWNhbC90YWJsZS1yb3ctb2Zmc2V0dG9wLWJ1Zy1pbi1zYWZhcmkvCiAgICAgICAgICAgIHRoZSBzb2x1dGlvbiBpcyBsaWtld2lzZSBub3RlZCB0aGVyZSwgZ3JhYiB0aGUgb2Zmc2V0IG9mIGEgdGFibGUgY2VsbCBpbiB0aGUgcm93IC0gdGhlIGZpcnN0Q2hpbGQuCiAgICAgICAgICAgIG5vdGUgdGhhdCBmaXJlZm94IHdpbGwgcmV0dXJuIGEgdGV4dCBub2RlIGFzIGEgZmlyc3QgY2hpbGQsIHNvIGRlc2lnbmluZyBhIG1vcmUgdGhvcm91Z2gKICAgICAgICAgICAgc29sdXRpb24gbWF5IG5lZWQgdG8gdGFrZSB0aGF0IGludG8gYWNjb3VudCwgZm9yIG5vdyB0aGlzIHNlZW1zIHRvIHdvcmsgaW4gZmlyZWZveCwgc2FmYXJpLCBpZSAqLwogICAgICAgICAgICBlID0gZS5maXJzdENoaWxkOyAvLyBhIHRhYmxlIGNlbGwKICAgICAgICB9CgogICAgICAgIHdoaWxlIChlLm9mZnNldFBhcmVudCl7CiAgICAgICAgICAgIGxlZnQgKz0gZS5vZmZzZXRMZWZ0OwogICAgICAgICAgICB0b3AgICs9IGUub2Zmc2V0VG9wOwogICAgICAgICAgICBlICAgICA9IGUub2Zmc2V0UGFyZW50OwogICAgICAgIH0KCiAgICAgICAgbGVmdCArPSBlLm9mZnNldExlZnQ7CiAgICAgICAgdG9wICArPSBlLm9mZnNldFRvcDsKCiAgICAgICAgcmV0dXJuIHt4OmxlZnQsIHk6dG9wfTsKICAgIH0sCgogICAgbW91c2Vtb3ZlOiBmdW5jdGlvbihldikgewogICAgICAgIGlmIChqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdCA9PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBkcmFnT2JqID0galF1ZXJ5KGpRdWVyeS50YWJsZURuRC5kcmFnT2JqZWN0KTsKICAgICAgICB2YXIgY29uZmlnID0galF1ZXJ5LnRhYmxlRG5ELmN1cnJlbnRUYWJsZS50YWJsZURuRENvbmZpZzsKICAgICAgICB2YXIgbW91c2VQb3MgPSBqUXVlcnkudGFibGVEbkQubW91c2VDb29yZHMoZXYpOwogICAgICAgIHZhciB5ID0gbW91c2VQb3MueSAtIGpRdWVyeS50YWJsZURuRC5tb3VzZU9mZnNldC55OwogICAgICAgIC8vYXV0byBzY3JvbGwgdGhlIHdpbmRvdwoJICAgIHZhciB5T2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0OwoJIAlpZiAoZG9jdW1lbnQuYWxsKSB7CgkgICAgICAgIC8vIFdpbmRvd3MgdmVyc2lvbgoJICAgICAgICAvL3lPZmZzZXQ9ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7CgkgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuY29tcGF0TW9kZSAhPSAndW5kZWZpbmVkJyAmJgoJICAgICAgICAgICAgIGRvY3VtZW50LmNvbXBhdE1vZGUgIT0gJ0JhY2tDb21wYXQnKSB7CgkgICAgICAgICAgIHlPZmZzZXQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wOwoJICAgICAgICB9CgkgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5ICE9ICd1bmRlZmluZWQnKSB7CgkgICAgICAgICAgIHlPZmZzZXQ9ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7CgkgICAgICAgIH0KCgkgICAgfQoJCSAgICAKCQlpZiAobW91c2VQb3MueS15T2Zmc2V0IDwgY29uZmlnLnNjcm9sbEFtb3VudCkgewoJICAgIAl3aW5kb3cuc2Nyb2xsQnkoMCwgLWNvbmZpZy5zY3JvbGxBbW91bnQpOwoJICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgPyB3aW5kb3cuaW5uZXJIZWlnaHQKICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7CiAgICAgICAgICAgIGlmICh3aW5kb3dIZWlnaHQtKG1vdXNlUG9zLnkteU9mZnNldCkgPCBjb25maWcuc2Nyb2xsQW1vdW50KSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgY29uZmlnLnNjcm9sbEFtb3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgoKICAgICAgICBpZiAoeSAhPSBqUXVlcnkudGFibGVEbkQub2xkWSkgewogICAgICAgICAgICAvLyB3b3JrIG91dCBpZiB3ZSdyZSBnb2luZyB1cCBvciBkb3duLi4uCiAgICAgICAgICAgIHZhciBtb3ZpbmdEb3duID0geSA+IGpRdWVyeS50YWJsZURuRC5vbGRZOwogICAgICAgICAgICAvLyB1cGRhdGUgdGhlIG9sZCB2YWx1ZQogICAgICAgICAgICBqUXVlcnkudGFibGVEbkQub2xkWSA9IHk7CiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc3R5bGUgdG8gc2hvdyB3ZSdyZSBkcmFnZ2luZwoJCQlpZiAoY29uZmlnLm9uRHJhZ0NsYXNzKSB7CgkJCQlkcmFnT2JqLmFkZENsYXNzKGNvbmZpZy5vbkRyYWdDbGFzcyk7CgkJCX0gZWxzZSB7CgkgICAgICAgICAgICBkcmFnT2JqLmNzcyhjb25maWcub25EcmFnU3R5bGUpOwoJCQl9CiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG92ZXIgYSByb3cgdGhlbiBtb3ZlIHRoZSBkcmFnZ2VkIHJvdyB0byB0aGVyZSBzbyB0aGF0IHRoZSB1c2VyIHNlZXMgdGhlCiAgICAgICAgICAgIC8vIGVmZmVjdCBkeW5hbWljYWxseQogICAgICAgICAgICB2YXIgY3VycmVudFJvdyA9IGpRdWVyeS50YWJsZURuRC5maW5kRHJvcFRhcmdldFJvdyhkcmFnT2JqLCB5KTsKICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3cpIHsKICAgICAgICAgICAgICAgIC8vIFRPRE8gd29ycnkgYWJvdXQgd2hhdCBoYXBwZW5zIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIFRCT0RJRVMKICAgICAgICAgICAgICAgIGlmIChtb3ZpbmdEb3duICYmIGpRdWVyeS50YWJsZURuRC5kcmFnT2JqZWN0ICE9IGN1cnJlbnRSb3cpIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdCwgY3VycmVudFJvdy5uZXh0U2libGluZyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEgbW92aW5nRG93biAmJiBqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdCAhPSBjdXJyZW50Um93KSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELmRyYWdPYmplY3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoalF1ZXJ5LnRhYmxlRG5ELmRyYWdPYmplY3QsIGN1cnJlbnRSb3cpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIC8qKiBXZSdyZSBvbmx5IHdvcnJpZWQgYWJvdXQgdGhlIHkgcG9zaXRpb24gcmVhbGx5LCBiZWNhdXNlIHdlIGNhbiBvbmx5IG1vdmUgcm93cyB1cCBhbmQgZG93biAqLwogICAgZmluZERyb3BUYXJnZXRSb3c6IGZ1bmN0aW9uKGRyYWdnZWRSb3csIHkpIHsKICAgICAgICB2YXIgcm93cyA9IGpRdWVyeS50YWJsZURuRC5jdXJyZW50VGFibGUucm93czsKICAgICAgICBmb3IgKHZhciBpPTA7IGk8cm93cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgcm93ID0gcm93c1tpXTsKICAgICAgICAgICAgdmFyIHJvd1kgICAgPSB0aGlzLmdldFBvc2l0aW9uKHJvdykueTsKICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IHBhcnNlSW50KHJvdy5vZmZzZXRIZWlnaHQpLzI7CiAgICAgICAgICAgIGlmIChyb3cub2Zmc2V0SGVpZ2h0ID09IDApIHsKICAgICAgICAgICAgICAgIHJvd1kgPSB0aGlzLmdldFBvc2l0aW9uKHJvdy5maXJzdENoaWxkKS55OwogICAgICAgICAgICAgICAgcm93SGVpZ2h0ID0gcGFyc2VJbnQocm93LmZpcnN0Q2hpbGQub2Zmc2V0SGVpZ2h0KS8yOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEJlY2F1c2Ugd2UgYWx3YXlzIGhhdmUgdG8gaW5zZXJ0IGJlZm9yZSwgd2UgbmVlZCB0byBvZmZzZXQgdGhlIGhlaWdodCBhIGJpdAogICAgICAgICAgICBpZiAoKHkgPiByb3dZIC0gcm93SGVpZ2h0KSAmJiAoeSA8IChyb3dZICsgcm93SGVpZ2h0KSkpIHsKICAgICAgICAgICAgICAgIC8vIHRoYXQncyB0aGUgcm93IHdlJ3JlIG92ZXIKCQkJCS8vIElmIGl0J3MgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgcm93LCBpZ25vcmUgaXQKCQkJCWlmIChyb3cgPT0gZHJhZ2dlZFJvdykge3JldHVybiBudWxsO30KICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBqUXVlcnkudGFibGVEbkQuY3VycmVudFRhYmxlLnRhYmxlRG5EQ29uZmlnOwogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5vbkFsbG93RHJvcCkgewogICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcub25BbGxvd0Ryb3AoZHJhZ2dlZFJvdywgcm93KSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJCQkJLy8gSWYgYSByb3cgaGFzIG5vZHJvcCBjbGFzcywgdGhlbiBkb24ndCBhbGxvdyBkcm9wcGluZyAoaW5zcGlyZWQgYnkgSm9obiBUYXJyIGFuZCBGYW1pYykKICAgICAgICAgICAgICAgICAgICB2YXIgbm9kcm9wID0galF1ZXJ5KHJvdykuaGFzQ2xhc3MoIm5vZHJvcCIpOwogICAgICAgICAgICAgICAgICAgIGlmICghIG5vZHJvcCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByb3c7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9LAoKICAgIG1vdXNldXA6IGZ1bmN0aW9uKGUpIHsKICAgICAgICBpZiAoalF1ZXJ5LnRhYmxlRG5ELmN1cnJlbnRUYWJsZSAmJiBqUXVlcnkudGFibGVEbkQuZHJhZ09iamVjdCkgewogICAgICAgICAgICB2YXIgZHJvcHBlZFJvdyA9IGpRdWVyeS50YWJsZURuRC5kcmFnT2JqZWN0OwogICAgICAgICAgICB2YXIgY29uZmlnID0galF1ZXJ5LnRhYmxlRG5ELmN1cnJlbnRUYWJsZS50YWJsZURuRENvbmZpZzsKICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGRyYWdPYmplY3QsIHRoZW4gd2UgbmVlZCB0byByZWxlYXNlIGl0LAogICAgICAgICAgICAvLyBUaGUgcm93IHdpbGwgYWxyZWFkeSBoYXZlIGJlZW4gbW92ZWQgdG8gdGhlIHJpZ2h0IHBsYWNlIHNvIHdlIGp1c3QgcmVzZXQgc3R1ZmYKCQkJaWYgKGNvbmZpZy5vbkRyYWdDbGFzcykgewoJICAgICAgICAgICAgalF1ZXJ5KGRyb3BwZWRSb3cpLnJlbW92ZUNsYXNzKGNvbmZpZy5vbkRyYWdDbGFzcyk7CgkJCX0gZWxzZSB7CgkgICAgICAgICAgICBqUXVlcnkoZHJvcHBlZFJvdykuY3NzKGNvbmZpZy5vbkRyb3BTdHlsZSk7CgkJCX0KICAgICAgICAgICAgalF1ZXJ5LnRhYmxlRG5ELmRyYWdPYmplY3QgICA9IG51bGw7CiAgICAgICAgICAgIGlmIChjb25maWcub25Ecm9wKSB7CiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBvbkRyb3AgbWV0aG9kIGlmIHRoZXJlIGlzIG9uZQogICAgICAgICAgICAgICAgY29uZmlnLm9uRHJvcChqUXVlcnkudGFibGVEbkQuY3VycmVudFRhYmxlLCBkcm9wcGVkUm93KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBqUXVlcnkudGFibGVEbkQuY3VycmVudFRhYmxlID0gbnVsbDsgLy8gbGV0IGdvIG9mIHRoZSB0YWJsZSB0b28KICAgICAgICB9CiAgICB9LAoKICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGpRdWVyeS50YWJsZURuRC5jdXJyZW50VGFibGUpIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS50YWJsZURuRC5zZXJpYWxpemVUYWJsZShqUXVlcnkudGFibGVEbkQuY3VycmVudFRhYmxlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIkVycm9yOiBObyBUYWJsZSBpZCBzZXQsIHlvdSBuZWVkIHRvIHNldCBhbiBpZCBvbiB5b3VyIHRhYmxlIGFuZCBldmVyeSByb3ciOwogICAgICAgIH0KICAgIH0sCgoJc2VyaWFsaXplVGFibGU6IGZ1bmN0aW9uKHRhYmxlKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICAgIHZhciB0YWJsZUlkID0gdGFibGUuaWQ7CiAgICAgICAgdmFyIHJvd3MgPSB0YWJsZS5yb3dzOwogICAgICAgIGZvciAodmFyIGk9MDsgaTxyb3dzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkgcmVzdWx0ICs9ICImIjsKICAgICAgICAgICAgdmFyIHJvd0lkID0gcm93c1tpXS5pZDsKICAgICAgICAgICAgaWYgKHJvd0lkICYmIHJvd0lkICYmIHRhYmxlLnRhYmxlRG5EQ29uZmlnICYmIHRhYmxlLnRhYmxlRG5EQ29uZmlnLnNlcmlhbGl6ZVJlZ2V4cCkgewogICAgICAgICAgICAgICAgcm93SWQgPSByb3dJZC5tYXRjaCh0YWJsZS50YWJsZURuRENvbmZpZy5zZXJpYWxpemVSZWdleHApWzBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXN1bHQgKz0gdGFibGVJZCArICdbXT0nICsgcm93SWQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7Cgl9LAoKCXNlcmlhbGl6ZVRhYmxlczogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJLy8gdGhpcyBpcyBub3cgYm91bmQgdG8gZWFjaCBtYXRjaGluZyB0YWJsZQoJCQlyZXN1bHQgKz0galF1ZXJ5LnRhYmxlRG5ELnNlcmlhbGl6ZVRhYmxlKHRoaXMpOwoJCX0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9Cgp9CgpqUXVlcnkuZm4uZXh0ZW5kKAoJewoJCXRhYmxlRG5EIDogalF1ZXJ5LnRhYmxlRG5ELmJ1aWxkLAoJCXRhYmxlRG5EVXBkYXRlIDogalF1ZXJ5LnRhYmxlRG5ELnVwZGF0ZVRhYmxlcywKCQl0YWJsZURuRFNlcmlhbGl6ZTogalF1ZXJ5LnRhYmxlRG5ELnNlcmlhbGl6ZVRhYmxlcwoJfQopOw==
###PACKDATA,FILE_END,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js
###PACKDATA,FILE_START,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
LyoKICogalF1ZXJ5IFRvb2x0aXAgcGx1Z2luIDEuMwogKgogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLwogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVG9vbHRpcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcgogKgogKiAkSWQ6IGpxdWVyeS50b29sdGlwLmpzIDU3NDEgMjAwOC0wNi0yMSAxNToyMjoxNlogam9lcm4uemFlZmZlcmVyICQKICogCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqLwogCiAKIAogCiBpZiAoICd1bmRlZmluZWQnID09IHR5cGVvZiBqUXVlcnkuYnJvd3NlciApIHsKCWpRdWVyeS5icm93c2VyPXt9OyhmdW5jdGlvbigpe2pRdWVyeS5icm93c2VyLm1zaWU9ZmFsc2U7CglqUXVlcnkuYnJvd3Nlci52ZXJzaW9uPTA7aWYobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvTVNJRSAoWzAtOV0rKVwuLykpewoJalF1ZXJ5LmJyb3dzZXIubXNpZT10cnVlO2pRdWVyeS5icm93c2VyLnZlcnNpb249UmVnRXhwLiQxO319KSgpOwp9CiAKIDsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQpzaG93KCk7dHJhY2s9ISFzZXR0aW5ncyh0aGlzKS50cmFjazskKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsdXBkYXRlKTt1cGRhdGUoZXZlbnQpO31mdW5jdGlvbiBzYXZlKCl7aWYoJC50b29sdGlwLmJsb2NrZWR8fHRoaXM9PWN1cnJlbnR8fCghdGhpcy50b29sdGlwVGV4dCYmIXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKSlyZXR1cm47Y3VycmVudD10aGlzO3RpdGxlPXRoaXMudG9vbHRpcFRleHQ7aWYoc2V0dGluZ3ModGhpcykuYm9keUhhbmRsZXIpe2hlbHBlci50aXRsZS5oaWRlKCk7dmFyIGJvZHlDb250ZW50PXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyLmNhbGwodGhpcyk7aWYoYm9keUNvbnRlbnQubm9kZVR5cGV8fGJvZHlDb250ZW50LmpxdWVyeSl7aGVscGVyLmJvZHkuZW1wdHkoKS5hcHBlbmQoYm9keUNvbnRlbnQpfWVsc2V7aGVscGVyLmJvZHkuaHRtbChib2R5Q29udGVudCk7fWhlbHBlci5ib2R5LnNob3coKTt9ZWxzZSBpZihzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSl7dmFyIHBhcnRzPXRpdGxlLnNwbGl0KHNldHRpbmdzKHRoaXMpLnNob3dCb2R5KTtoZWxwZXIudGl0bGUuaHRtbChwYXJ0cy5zaGlmdCgpKS5zaG93KCk7aGVscGVyLmJvZHkuZW1wdHkoKTtmb3IodmFyIGk9MCxwYXJ0OyhwYXJ0PXBhcnRzW2ldKTtpKyspe2lmKGk+MCloZWxwZXIuYm9keS5hcHBlbmQoIjxici8+Iik7aGVscGVyLmJvZHkuYXBwZW5kKHBhcnQpO31oZWxwZXIuYm9keS5oaWRlV2hlbkVtcHR5KCk7fWVsc2V7aGVscGVyLnRpdGxlLmh0bWwodGl0bGUpLnNob3coKTtoZWxwZXIuYm9keS5oaWRlKCk7fWlmKHNldHRpbmdzKHRoaXMpLnNob3dVUkwmJiQodGhpcykudXJsKCkpaGVscGVyLnVybC5odG1sKCQodGhpcykudXJsKCkucmVwbGFjZSgnaHR0cDovLycsJycpKS5zaG93KCk7ZWxzZQpoZWxwZXIudXJsLmhpZGUoKTtoZWxwZXIucGFyZW50LmFkZENsYXNzKHNldHRpbmdzKHRoaXMpLmV4dHJhQ2xhc3MpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LmZpeFBORygpO2hhbmRsZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHNob3coKXt0SUQ9bnVsbDtpZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnNldHRpbmdzKGN1cnJlbnQpLmZhZGUpe2lmKGhlbHBlci5wYXJlbnQuaXMoIjphbmltYXRlZCIpKWhlbHBlci5wYXJlbnQuc3RvcCgpLnNob3coKS5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTtlbHNlCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQpoZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlT3V0KHRzZXR0aW5ncy5mYWRlLGNvbXBsZXRlKTt9ZWxzZQpjb21wbGV0ZSgpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LnVuZml4UE5HKCk7fX0pKGpRdWVyeSk7Cg==
###PACKDATA,FILE_END,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
R0lGODlhCwALAJECAAAAAP///////wAAACH5BAEAAAIALAAAAAALAAsAAAIflINoG+AeGFgGxEaXxVns2X2dh4CZJXBadDxQlihGAQA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png

###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
R0lGODlhGgADAIAAAP///wAAACH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGODM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGOTM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjdBQzk3MkY2MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjdBQzk3MkY3MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAABoAAwAAAguEj6ka7Q+jW7SeAgA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
iVBORw0KGgoAAAANSUhEUgAAABQAAACWCAIAAABRkz+JAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0FDOTcyRjQzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0FDOTcyRjUzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGMjM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGMzM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PnzKFbcAAAcCSURBVHjanFnbcttG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
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RjU3RTU1MzIzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RjU3RTU1MzMzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEQxNkIyMTM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEQxNkIyMjM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PiDK9P0AAAHySURBVHjarJVBasJAFIYnyVgXtrorusgdXOrWZaHgFbooegv1EoI7j+AtXLsXFFy0FFRs0LYxmXT+YV6YxIgpzcDzJcN73/z5M06s4XD4zBhrsGLHGxdCNEaj0aRI6mAw6AFs4SaKokKglmUxMHkYhgqKaDabvf9AF4vFBBwwAbbkCgpcqVTYfD7/kjWnjD6BB9MZEeocyLhrt9suOBhgJhRXq1WmodsrMBNo5gfZ65KdpFhBsVqtVmO6MLwBEkYdwkZvAhwEgUXgUqmEeV/Gzw1Q+l71EhhMpRhQBOcc8986TAgWg/dHfU3zaiPIuEev4XFSsQYfNSTUC3xq38WVzQCZPnoTivGTUnzScE9nkWOnCVMxgdNWAPiht1HekQZnWrHNAeXaArIiurDifD7Hih3HYTmgzng8floul/XEpOwlxWAmFGtwwlN5+qkwX9ZqtarLg2aCt28OWADGtZcnTGhGVn4C4vt+5iEUW0GKbduOwSmVMRj1qKOe2WzGNpsNc12XdbtdNa9q0las12uRBaWBfxjqqEeeiGy326lMh5lS7HmeTYcQlEyn09dbe4sUI6C01WqpTHNg8v1+b5PH/X4/95cE/tIu6HQ68TUymPxwODh4tHK5/KevCHr0LrqYB9OSwBf5aI9FfvOk6vdfAQYA4jTPF9eEdoEAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
###PACKDATA,FILE_START,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
PD9waHAKLy8gT1VUUFVUOiAkY3JvbnMgcG9wdWxhdGVkCgppZiAoICEgaXNzZXQoICRjcm9uICkgKSB7CgkkY3JvbiA9IGdldF9vcHRpb24oJ2Nyb24nKTsKfQppZiAoICEgaXNzZXQoICRjcm9uX3dhcm5pbmdzICkgKSB7CgkkY3Jvbl93YXJuaW5ncyA9IGFycmF5KCk7Cn0KCi8vIExvb3AgdGhyb3VnaCBlYWNoIGNyb24gdGltZSB0byBjcmVhdGUgJGNyb25zIGFycmF5IGZvciBkaXNwbGF5aW5nIGxhdGVyLgokY3JvbnMgPSBhcnJheSgpOwpmb3JlYWNoICggKGFycmF5KSAkY3JvbiBhcyAkdGltZSA9PiAkY3Jvbl9pdGVtICkgewoJaWYgKCBpc19udW1lcmljKCAkdGltZSApICkgewoJCS8vIExvb3AgdGhyb3VnaCBlYWNoIHNjaGVkdWxlIGZvciB0aGlzIHRpbWUKCQlmb3JlYWNoICggKGFycmF5KSAkY3Jvbl9pdGVtIGFzICRob29rX25hbWUgPT4gJGV2ZW50ICkgewoKCQkJLy8gRG9uJ3Qgc2hvdyB0aGUgaXRidWJfY3Jvbl90ZXN0IHRhc2sgdG8gYXZvaWQgY29uZnVzaW9uLgoJCQkvLyBJdCB3aWxsIGFsd2F5cyBiZSBwcmVzZW50IG9uIHZpc2l0aW5nIHRoaXMgcGFnZSBpZiB3ZSBhcmUgZG9pbmcgYW4gYWN0aXZlCgkJCS8vIGNyb24gdGVzdCBhbmQgd2lsbCBhbHdheXMgYXBwZWFyIG92ZXJkdWUgYmVjYXVzZSB3ZSBzY2hlZHVsZSBpdCBpbiB0aGUgcGFzdCAtCgkJCS8vIHNvIHRvIGF2b2lkIGN1c3RvbWVyIGNvbmZ1c2lvbiB3ZSBoaWRlIGl0LiBJdCBjYW4gYmUgdmlld2VkIGJ5IGNsaWNraW5nIHRoZQoJCQkvLyBidXR0b24gdG8gc2VlIHRoZSByYXcgY3JvbiBhcnJheS4KCQkJaWYgKCAnaXRidWJfY3Jvbl90ZXN0JyA9PSAkaG9va19uYW1lICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCWZvcmVhY2ggKCAoYXJyYXkpICRldmVudCBhcyAkaXRlbV9uYW1lID0+ICRpdGVtICkgewoJCQkJCgkJCQkvLyBEZXRlcm1pbmUgcGVyaW9kLgoJCQkJaWYgKCAhZW1wdHkoICRpdGVtWydzY2hlZHVsZSddICkgKSB7IC8vIFJlY3VycmluZyBzY2hlZHVsZS4KCQkJCQkkcGVyaW9kID0gJyc7CgkJCQkJaWYgKCBmYWxzZSAhPT0gKCAkcHJldHR5SW50ZXJ2YWwgPSBiYWNrdXBidWRkeV9jb3JlOjpwcmV0dHlDcm9uSW50ZXJ2YWwoICRpdGVtWydpbnRlcnZhbCddICkgKSApIHsKCQkJCQkJJHBlcmlvZCAuPSAnPHNwYW4gdGl0bGU9IkludGVydmFsIHRhZzogYCcgLiAkcHJldHR5SW50ZXJ2YWxbMF0gLiAnYC4iPicgLiAkcHJldHR5SW50ZXJ2YWxbMV0gLiAnPC9zcGFuPic7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJHBlcmlvZCAuPSAnPHNwYW4gdGl0bGU9IkludGVydmFsIHRhZzogYCcgLiAkaXRlbVsnc2NoZWR1bGUnXSAuICdgLiI+JyAuICRpdGVtWydzY2hlZHVsZSddIC4gJzwvc3Bhbj4nOwoJCQkJCX0KCQkJCX0gZWxzZSB7IC8vIE9uZS10aW1lIG9ubHkgY3Jvbi4KCQkJCQkkcGVyaW9kID0gX18oJ29uZSB0aW1lIG9ubHknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCX0KCQkJCQoJCQkJLy8gRGV0ZXJtaW5lIGludGVydmFsLgoJCQkJaWYgKCAhIGVtcHR5KCAkaXRlbVsnaW50ZXJ2YWwnXSApICkgewoJCQkJCSRpbnRlcnZhbCA9ICRpdGVtWydpbnRlcnZhbCddIC4gJyBzZWNvbmRzJzsKCQkJCX0gZWxzZSB7CgkJCQkJJGludGVydmFsID0gX18oJ29uZSB0aW1lIG9ubHknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCX0KCQkJCQoJCQkJLy8gRGV0ZXJtaW5lIGFyZ3VtZW50cy4KCQkJCWlmICggIWVtcHR5KCAkaXRlbVsnYXJncyddICkgKSB7CgkJCQkJLy8kYXJndW1lbnRzID0gaW1wbG9kZSggJywnLCAkaXRlbVsnYXJncyddICk7CgkJCQkJJGFyZ3VtZW50cyA9ICcnOwoJCQkJCWZvcmVhY2goICRpdGVtWydhcmdzJ10gYXMgJGFyZ3MgKSB7CgkJCQkJCSRhcmd1bWVudHNfaW5uZXIgPSBhcnJheSgpOwoJCQkJCQkkaXNfYXJyYXkgPSBmYWxzZTsKCQkJCQkJaWYgKCAhIGlzX2FycmF5KCAkYXJncyApICkgewoJCQkJCQkJJGFyZ3VtZW50c19pbm5lcltdID0gJGFyZ3M7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkkaXNfYXJyYXkgPSB0cnVlOwoJCQkJCQkJZm9yZWFjaCggJGFyZ3MgYXMgJGFyZyApIHsKCQkJCQkJCQlpZiAoIGlzX2FycmF5KCAkYXJnICkgKSB7CgkJCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9IHByaW50X3IoICRhcmcsIHRydWUgKTsKCQkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCQkkYXJndW1lbnRzX2lubmVyW10gPSAkYXJnOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQlpZiAoIHRydWUgPT09ICRpc19hcnJheSApIHsKCQkJCQkJCSRhcmd1bWVudHNfaW5uZXIgPSAnQXJyYXkoICcgLiBpbXBsb2RlKCAnLCAnLCAkYXJndW1lbnRzX2lubmVyICkgLiAnICknOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJJGFyZ3VtZW50c19pbm5lciA9IGltcGxvZGUoICcsICcsICRhcmd1bWVudHNfaW5uZXIgKTsKCQkJCQkJfQoJCQkJCQkkYXJndW1lbnRzIC49ICc8dGV4dGFyZWEgd3JhcD0ib2ZmIj4nIC4gJGFyZ3VtZW50c19pbm5lciAuICc8L3RleHRhcmVhPic7CgkJCQkJCS8qCgkJCQkJCWlmICggaXNfYXJyYXkoICRhcmcgKSApIHsKCQkJCQkJCSRhcmd1bWVudHMgLj0gICdbJyAuIHByaW50X3IoICRhcmcsIHRydWUgKSAuICddJzsvL3BiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5tdWx0aV9pbXBsb2RlKCAkYXJnICwgJzsgJyApCgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkkYXJndW1lbnRzIC49ICRhcmc7CgkJCQkJCX0KCQkJCQkJKi8KCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCSRhcmd1bWVudHMgPSBfXygnbm9uZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCQkJfQoJCQkJCgkJCQkvLyBJZiBydW4gdGltZSBpcyBpbiB0aGUgcGFzdCwgbm90ZSB0aGlzLgoJCQkJJHBhc3RfdGltZSA9ICcnOwoJCQkJaWYgKCAkdGltZSA8IHRpbWUoKSApIHsKCQkJCQkkd2FybmluZyA9ICdXQVJOSU5HOiBOZXh0IHJ1biB0aW1lIGhhcyBwYXNzZWQuIEl0IHNob3VsZCBoYXZlIHJ1biAnIC4gcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPnRpbWVfYWdvKCAkdGltZSApIC4gJyBhZ28uIENyb24gcHJvYmxlbT8nOwoJCQkJCSRtc2cgPSAnU29tZXRoaW5nIG1heSBiZSB3cm9uZyB3aXRoIHlvdXIgV29yZFByZXNzIGNyb24gc3VjaCBhcyBhIG1hbGZ1bmN0aW9uaW5nIGNhY2hpbmcgcGx1Z2luIG9yIHdlYmhvc3QgcHJvYmxlbXMuJzsKCQkJCQlpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JHVpICkgJiYgaXNfb2JqZWN0KCBwYl9iYWNrdXBidWRkeTo6JHVpICkgKSB7CgkJCQkJCSR0aXAgPSBwYl9iYWNrdXBidWRkeTo6JHVpLT50aXAoICRtc2csICcnLCBmYWxzZSApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSR0aXAgPSAnKCcgLiAkbXNnIC4gJyknOwoJCQkJCX0KCQkJCQkkcGFzdF90aW1lID0gJzxicj48c3BhbiBzdHlsZT0iY29sb3I6IHJlZDsiPiAqKiAnIC4gJHdhcm5pbmcgLiAnICoqICcgLiAkdGlwIC4gJzwvc3Bhbj4nOwoJCQkJCSRjcm9uX3dhcm5pbmdzW10gPSAkd2FybmluZzsKCQkJCX0KCQkJCQoJCQkJLy8gUG9wdWxhdGUgY3JvbnMgYXJyYXkgZm9yIGRpc3BsYXlpbmcgbGF0ZXIuCgkJCQkkY3JvbnNbICR0aW1lIC4gJ3wnIC4gJGhvb2tfbmFtZSAuICd8JyAuICRpdGVtX25hbWVdID0gYXJyYXkoCgkJCQkJJzxzcGFuIHRpdGxlPVwnS2V5OiAnIC4gJGl0ZW1fbmFtZSAuICdcJz4nIC4gJGhvb2tfbmFtZSAuICc8L3NwYW4+JywKCQkJCQlwYl9iYWNrdXBidWRkeTo6JGZvcm1hdC0+ZGF0ZSggcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPmxvY2FsaXplX3RpbWUoICR0aW1lICkgKSAuICc8YnI+PHNwYW4gY2xhc3M9ImRlc2NyaXB0aW9uIj4gVGltZXN0YW1wOiAnIC4gJHRpbWUgLiAnPC9zcGFuPicgLiAkcGFzdF90aW1lLAoJCQkJCSRwZXJpb2QsCgkJCQkJJGludGVydmFsLAoJCQkJCSRhcmd1bWVudHMsCgkJCQkpOwoJCQkJCgkJCX0gLy8gRW5kIGZvcmVhY2guCgkJCXVuc2V0KCAkaXRlbSApOwoJCQl1bnNldCggJGl0ZW1fbmFtZSApOwoJCX0gLy8gRW5kIGZvcmVhY2guCgkJdW5zZXQoICRldmVudCApOwoJCXVuc2V0KCAkaG9va19uYW1lICk7Cgl9IC8vIEVuZCBpZiBpc19udW1lcmljLgp9IC8vIEVuZCBmb3JlYWNoLgp1bnNldCggJGNyb25faXRlbSApOwp1bnNldCggJHRpbWUgKTsK
###PACKDATA,FILE_END,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php
###PACKDATA,FILE_START,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php

###PACKDATA,FILE_END,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php

###PACKDATA,FILE_END,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php
###PACKDATA,FILE_START,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
###PACKDATA,FILE_START,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
PGJyPjw/cGhwCiR0ZXN0cyA9IGFycmF5KCk7CgokdXBsb2Fkc19kaXJzID0gd3BfdXBsb2FkX2RpcigpOwokZGlyZWN0b3JpZXMgPSBhcnJheSgKCUFCU1BBVEggLiAnJywKCUFCU1BBVEggLiAnd3AtaW5jbHVkZXMvJywKCUFCU1BBVEggLiAnd3AtYWRtaW4vJywKCVdQX0NPTlRFTlRfRElSIC4gJy90aGVtZXMvJywKCVdQX1BMVUdJTl9ESVIgLiAnLycsCglXUF9DT05URU5UX0RJUiAuICcvJywKCS8vQUJTUEFUSCAuICd3cC1jb250ZW50LycsCglydHJpbSggJHVwbG9hZHNfZGlyc1snYmFzZWRpciddLCAnXFwvJyApIC4gJy8nLAoJQUJTUEFUSCAuICd3cC1pbmNsdWRlcy8nLAoJYmFja3VwYnVkZHlfY29yZTo6Z2V0QmFja3VwRGlyZWN0b3J5KCksCgliYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKSwKKTsKaWYgKCBAZmlsZV9leGlzdHMoIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldFRlbXBEaXJlY3RvcnkoKSApICkgeyAvLyBUaGlzIGRpciBpcyB1c3VhbGx5IHRyYW5zaWVudCBzbyBtYXkgbm90IGV4aXN0LgoJJGRpcmVjdG9yaWVzW10gPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCk7Cn0KCgpmb3JlYWNoKCAkZGlyZWN0b3JpZXMgYXMgJGRpcmVjdG9yeSApIHsKCQoJJG1vZGVfb2N0YWxfZm91ciA9ICc8aT4nIC4gX18oICdVbmtub3duJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9pPic7Cgkkb3duZXIgPSAnPGk+JyAuIF9fKCAnVW5rbm93bicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvaT4nOwoJCglpZiAoICEgZmlsZV9leGlzdHMoICRkaXJlY3RvcnkgKSApIHsKCQkkbW9kZV9vY3RhbF9mb3VyID0gJ0RpcmVjdG9yeSBkb2VzXCd0IGV4aXN0JzsKCQkkb3duZXIgPSAnbi9hJzsKCX0KCSRzdGF0cyA9IHBsdWdpbmJ1ZGR5X3N0YXQ6OnN0YXQoICRkaXJlY3RvcnkgKTsKCWlmICggZmFsc2UgIT09ICRzdGF0cyApIHsKCQkkbW9kZV9vY3RhbF9mb3VyID0gJHN0YXRzWydtb2RlX29jdGFsX2ZvdXInXTsKCQkkb3duZXIgPSAkc3RhdHNbJ3VpZCddIC4gJzonIC4gJHN0YXRzWydnaWQnXTsKCX0KCSR0aGlzX3Rlc3QgPSBhcnJheSgKCQkJCQkndGl0bGUnCQkJPT4JCScvJyAuIHN0cl9yZXBsYWNlKCBBQlNQQVRILCAnJywgJGRpcmVjdG9yeSApLAoJCQkJCSdzdWdnZXN0aW9uJwk9PgkJJzw9IDc1NScsCgkJCQkJJ3ZhbHVlJwkJCT0+CQkkbW9kZV9vY3RhbF9mb3VyLAoJCQkJCSdvd25lcicJCQk9PgkJJG93bmVyLAoJCQkJKTsKCWlmICggZmFsc2UgPT09ICRzdGF0cyB8fCAkbW9kZV9vY3RhbF9mb3VyID4gNzU1ICkgewoJCSR0aGlzX3Rlc3RbJ3N0YXR1cyddID0gX18oJ1dBUk5JTkcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCX0gZWxzZSB7CgkJJHRoaXNfdGVzdFsnc3RhdHVzJ10gPSBfXygnT0snLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCX0KCWFycmF5X3B1c2goICR0ZXN0cywgJHRoaXNfdGVzdCApOwoJCn0gLy8gZW5kIGZvcmVhY2guCgoKPz4KCjx0YWJsZSBjbGFzcz0id2lkZWZhdCI+Cgk8dGhlYWQ+CgkJPHRyIGNsYXNzPSJ0aGVhZCI+CgkJCTw/cGhwIAoJCQkJZWNobyAnPHRoPicsIF9fKCdSZWxhdGl2ZSBQYXRoJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ1N1Z2dlc3Rpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JywKCQkJCQknPHRoPicsIF9fKCdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ093bmVyIChVSUQ6R0lEKScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCS8vICc8dGg+JywgX18oJ1Jlc3VsdCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAnPHRoIHN0eWxlPSJ3aWR0aDogNjBweDsiPicsIF9fKCdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JzsKCQkJPz4KCQk8L3RyPgoJPC90aGVhZD4KCTx0Zm9vdD4KCQk8dHIgY2xhc3M9InRoZWFkIj4KCQkJPD9waHAgCgkJCQllY2hvICc8dGg+JywgX18oJ1JlbGF0aXZlIFBhdGgnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCc8L3RoPicsCgkJCQkJJzx0aD4nLCBfXygnU3VnZ2VzdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJJzx0aD4nLCBfXygnT3duZXIgKFVJRDpHSUQpJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJLy8gJzx0aD4nLCBfXygnUmVzdWx0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJJzx0aCBzdHlsZT0id2lkdGg6IDYwcHg7Ij4nLCBfXygnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPic7CgkJCT8+CgkJPC90cj4KCTwvdGZvb3Q+Cgk8dGJvZHk+CgkJPD9waHAKCQlmb3JlYWNoKCAkdGVzdHMgYXMgJHRoaXNfdGVzdCApIHsKCQkJZWNobyAnPHRyIGNsYXNzPSJlbnRyeS1yb3cgYWx0ZXJuYXRlIj4nOwoJCQllY2hvICcJPHRkPicgLiAkdGhpc190ZXN0Wyd0aXRsZSddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsnc3VnZ2VzdGlvbiddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsndmFsdWUnXSAuICc8L3RkPic7CgkJCWVjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ293bmVyJ10gLiAnPC90ZD4nOwoJCQkvL2VjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ3N0YXR1cyddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nOwoJCQlpZiAoICR0aGlzX3Rlc3RbJ3N0YXR1cyddID09IF9fKCdPSycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICkgewoJCQkJLy9lY2hvICc8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjJFRTVCOyBib3JkZXI6IDFweCBzb2xpZCAjRTJFMkUyOyI+Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9kaXY+JzsKCQkJCWVjaG8gJzxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC1zdWNjZXNzIj5QYXNzPC9zcGFuPic7CgkJCX0gZWxzZWlmICggJHRoaXNfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ0ZBSUwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApIHsKCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0NGMzMzMzsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtaW1wb3J0YW50Ij5GYWlsPC9zcGFuPic7CgkJCX0gZWxzZWlmICggJHRoaXNfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ1dBUk5JTkcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApIHsKCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0ZFRkY3RjsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtd2FybmluZyI+V2FybmluZzwvc3Bhbj4nOwoJCQl9IGVsc2UgewoJCQkJZWNobyAndW5rbm93bic7CgkJCX0KCQkJZWNobyAnCTwvdGQ+JzsKCQkJZWNobyAnPC90cj4nOwoJCX0KCQk/PgoJPC90Ym9keT4KPC90YWJsZT4KCjxicj48YnI+
###PACKDATA,FILE_END,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
###PACKDATA,FILE_START,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQkKCQlqUXVlcnkoICcucGJfYmFja3VwYnVkZHlfcmVtb3Rlc2VuZF9hYm9ydCcgKS5jbGljayggZnVuY3Rpb24oKXsKCQkJalF1ZXJ5LmFqYXgoewoJCQkJdHlwZTogJ1BPU1QnLAoJCQkJdXJsOiBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICksCgkJCQlzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKCQkJCQlkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsKCQkJCQlpZiAoICcxJyA9PSBkYXRhICkgewoJCQkJCQlhbGVydCggJ1JlbW90ZSB0cmFuc2ZlciBhYm9ydGVkLiBUaGlzIG1heSB0YWtlIGEgbW9tZW50IHRvIHRha2UgZWZmZWN0LicgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlhbGVydCggJ0Vycm9yICM4NTQ0ODk0OS4gVW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UuIERldGFpbHM6IGAnICsgZGF0YSArICdgLicgKTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCQlyZXR1cm4gZmFsc2U7CgkJfSk7Cgl9KTsKPC9zY3JpcHQ+Cjw/cGhwCgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL2hvdXNla2VlcGluZy5waHAnICk7CmJhY2t1cGJ1ZGR5X2hvdXNla2VlcGluZzo6dHJpbV9yZW1vdGVfc2VuZF9zdGF0cygpOwoKCmluY2x1ZGUoICdfcmVtb3RlX3NlbmRzLnBocCcgKTsgLy8gU2V0cyAkc2VuZHMuCgoKaWYgKCBjb3VudCggJHNlbmRzICkgPT0gMCApIHsKCWVjaG8gJzxicj48c3BhbiBjbGFzcz0iZGVzY3JpcHRpb24iPicgLiBfXyggJ1RoZXJlIGhhdmUgYmVlbiBubyByZWNlbnQgZmlsZSB0cmFuc2ZlcnMuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9zcGFuPjxicj4nOwp9IGVsc2UgewoJJHNlbmRzID0gYXJyYXlfc2xpY2UoICRzZW5kcywgMCwgYmFja3VwYnVkZHlfY29uc3RhbnRzOjpSRUNFTlRfU0VORFNfTUFYX0xJU1RJTkdfQ09VTlQgKTsgLy8gT25seSBkaXNwbGF5IG1vc3QgcmVjZW50IFggc2VuZHMgdG8ga2VlcCBwYWdlIGZyb20gYmVpbmcgYm9nZ2VkIGRvd24uCglwYl9iYWNrdXBidWRkeTo6JHVpLT5saXN0X3RhYmxlKAoJCSRzZW5kcywKCQlhcnJheSgKCQkJJ2FjdGlvbicJCT0+CXBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpLAoJCQknY29sdW1ucycJCT0+CWFycmF5KAoJCQkJX18oICdTZW50IEZpbGUnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCV9fKCAnRGVzdGluYXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCV9fKCAnVHJpZ2dlcicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJX18oICdUcmFuc2ZlciBJbmZvcm1hdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyA8aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9zb3J0X2Rvd24ucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IDBweDsiIHRpdGxlPSJTb3J0ZWQgbW9zdCByZWNlbnQgc3RhcnRlZCBmaXJzdCI+JywKCQkJCV9fKCAnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIDxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+KGhvdmVyIGZvciBvcHRpb25zKTwvc3Bhbj4nLAoJCQkJKSwKCQkJJ2NzcycJCQk9PgkJJ3dpZHRoOiAxMDAlOycsCgkJKQoJKTsKCWVjaG8gJzxkaXYgY2xhc3M9ImFsaWducmlnaHQgYWN0aW9ucyI+JzsKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPm5vdGUoICdIb3ZlciBvdmVyIGl0ZW1zIGFib3ZlIGZvciBhZGRpdGlvbmFsIG9wdGlvbnMuJyApOwoJZWNobyAnPC9kaXY+JzsKfQoKPz48YnI+
###PACKDATA,FILE_END,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
PHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCS5wYl9iYWNrdXBidWRkeV9yZWZyZXNoX3N0YXRzIHsKCQljdXJzb3I6IHBvaW50ZXI7Cgl9Cjwvc3R5bGU+CjxzY3JpcHQ+CmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CglmdW5jdGlvbiBiYl9pc051bWJlciggbiApIHsKCQlyZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pOwoJfTsKCQoJalF1ZXJ5KCcucGJfYmFja3VwYnVkZHlfdGVzdEVycm9yTG9nJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSggJy5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLnNob3coKTsKCQlqUXVlcnkucG9zdCggalF1ZXJ5KHRoaXMpLmF0dHIoICdyZWwnICksIHsgZnVuY3Rpb246ICd0ZXN0RXJyb3JMb2cnIH0sIAoJCQlmdW5jdGlvbihkYXRhKSB7CgkJCQlqUXVlcnkoICcucGJfYmFja3VwYnVkZHlfbG9hZGluZycgKS5oaWRlKCk7CgkJCQlhbGVydCggZGF0YSApOwoJCQl9CgkJKTsKCQlyZXR1cm4gZmFsc2U7Cgl9KTsKCQoJalF1ZXJ5KCAnLnBiX2JhY2t1cGJ1ZGR5X3Rlc3RQSFBSdW50aW1lJyApLmNsaWNrKCBmdW5jdGlvbihlKXsKCQlsb2FkaW5nID0galF1ZXJ5KHRoaXMpLmNoaWxkcmVuKCAnLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICk7CgkJc2VyaWFsaXplZEZvcm0gPSBqUXVlcnkodGhpcykuY2xvc2VzdCggJ2Zvcm0nICkuc2VyaWFsaXplKCk7CgkJCgkJdGVzdFBIUFJ1bnRpbWVJbnRlcnZhbCA9IHNldEludGVydmFsKCBmdW5jdGlvbigpewoJCQlsb2FkaW5nLnNob3coKTsKCQkJalF1ZXJ5LnBvc3QoCgkJCQknPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6YWpheF91cmwoICdydW5fcGhwX3J1bnRpbWVfdGVzdF9yZXN1bHRzJyApOyA/PicsCgkJCQlzZXJpYWxpemVkRm9ybSwgCgkJCQlmdW5jdGlvbihkYXRhKSB7CgkJCQkJbG9hZGluZy5oaWRlKCk7CgkJCQkJaWYgKCBiYl9pc051bWJlciggZGF0YSApICkgeyAvLyBGaW5pc2hlZAoJCQkJCQlyZXN1bHRfb2JqLmh0bWwoIGRhdGEgKyAnIDw/cGhwIF9lKCAic2VjcyIsICJpdC1sMTBuLWJhY2t1cGJ1ZGR5IiApOyA/PicgKTsKCQkJCQkJY2xlYXJJbnRlcnZhbCggdGVzdFBIUFJ1bnRpbWVJbnRlcnZhbCApOwoJCQkJCX0gZWxzZSB7IC8vIEluIHByb2dyZXNzLgoJCQkJCQlyZXN1bHRfb2JqLmh0bWwoIGRhdGEgKTsKCQkJCQl9CgkJCQl9CgkJCSk7CgkJfSwgNTAwMCApOwoJfSk7CgkKCWpRdWVyeSggJy5wYl9iYWNrdXBidWRkeV90ZXN0UEhQTWVtb3J5JyApLmNsaWNrKCBmdW5jdGlvbihlKXsKCQlsb2FkaW5nID0galF1ZXJ5KHRoaXMpLmNoaWxkcmVuKCAnLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICk7CgkJc2VyaWFsaXplZEZvcm0gPSBqUXVlcnkodGhpcykuY2xvc2VzdCggJ2Zvcm0nICkuc2VyaWFsaXplKCk7CgkJCgkJdGVzdFBIUE1lbW9yeUludGVydmFsID0gc2V0SW50ZXJ2YWwoIGZ1bmN0aW9uKCl7CgkJCWxvYWRpbmcuc2hvdygpOwoJCQlqUXVlcnkucG9zdCgKCQkJCSc8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjphamF4X3VybCggJ3J1bl9waHBfbWVtb3J5X3Rlc3RfcmVzdWx0cycgKTsgPz4nLAoJCQkJc2VyaWFsaXplZEZvcm0sIAoJCQkJZnVuY3Rpb24oZGF0YSkgewoJCQkJCWxvYWRpbmcuaGlkZSgpOwoJCQkJCWlmICggYmJfaXNOdW1iZXIoIGRhdGEgKSApIHsgLy8gRmluaXNoZWQKCQkJCQkJcmVzdWx0X29iai5odG1sKCBkYXRhICsgJyA8P3BocCBfZSggIk1CIiwgIml0LWwxMG4tYmFja3VwYnVkZHkiICk7ID8+JyApOwoJCQkJCQljbGVhckludGVydmFsKCB0ZXN0UEhQTWVtb3J5SW50ZXJ2YWwgKTsKCQkJCQl9IGVsc2UgeyAvLyBJbiBwcm9ncmVzcy4KCQkJCQkJcmVzdWx0X29iai5odG1sKCBkYXRhICk7CgkJCQkJfQoJCQkJfQoJCQkpOwoJCX0sIDUwMDAgKTsKCX0pOwoJCglqUXVlcnkoJy5wYl9iYWNrdXBidWRkeV9yZWZyZXNoX3N0YXRzJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWxvYWRpbmcgPSBqUXVlcnkodGhpcykuY2hpbGRyZW4oICcucGJfYmFja3VwYnVkZHlfbG9hZGluZycgKTsKCQlsb2FkaW5nLnNob3coKTsKCQkKCQlyZXN1bHRfb2JqID0galF1ZXJ5KCAnI3BiX3N0YXRzXycgKyBqUXVlcnkodGhpcykuYXR0ciggJ3JlbCcgKSApOwoJCQoJCWpRdWVyeS5wb3N0KCBqUXVlcnkodGhpcykuYXR0ciggJ2FsdCcgKSwgalF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICdmb3JtJyApLnNlcmlhbGl6ZSgpLCAKCQkJZnVuY3Rpb24oZGF0YSkgewoJCQkJLy9hbGVydChkYXRhKTsKCQkJCWxvYWRpbmcuaGlkZSgpOwoJCQkJcmVzdWx0X29iai5odG1sKCBkYXRhICk7CgkJCX0KCQkpOyAvLywianNvbiIpOwoJCQoJCXJldHVybiBmYWxzZTsKCX0pOwp9KTsKPC9zY3JpcHQ+Cjw/cGhwCgoKaW5jbHVkZSggJ19zZXJ2ZXJfdGVzdHMucGhwJyApOwoJCgkKCQo/PgoKCgo8dGFibGUgY2xhc3M9IndpZGVmYXQgc3RyaXBlZCI+Cgk8dGhlYWQ+CgkJPHRyIGNsYXNzPSJ0aGVhZCI+CgkJCTx0aCBzdHlsZT0id2lkdGg6IDE1cHg7Ij4mbmJzcDs8L3RoPgoJCQk8P3BocAoJCQkJZWNobyAnPHRoPicsIF9fKCdTZXJ2ZXIgQ29uZmlndXJhdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAnPHRoPicsIF9fKCdTdWdnZXN0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJICc8dGg+JywgX18oJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJIC8vJzx0aD4nLCBfXygnUmVzdWx0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJICc8dGggc3R5bGU9IndpZHRoOiA2MHB4OyI+JywgX18oJ1N0YXR1cycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nOwoJCQk/PgoJCTwvdHI+Cgk8L3RoZWFkPgoJPHRmb290PgoJCTx0ciBjbGFzcz0idGhlYWQiPgoJCQk8dGggc3R5bGU9IndpZHRoOiAxNXB4OyI+Jm5ic3A7PC90aD4KCQkJPD9waHAKCQkJCWVjaG8gJzx0aD4nLCBfXygnU2VydmVyIENvbmZpZ3VyYXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JywKCQkJCQkgJzx0aD4nLCBfXygnU3VnZ2VzdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAnPHRoPicsIF9fKCdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAvLyc8dGg+JywgX18oJ1Jlc3VsdCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAnPHRoIHN0eWxlPSJ3aWR0aDogMTVweDsiPicsIF9fKCdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JzsKCQkJPz4KCQk8L3RyPgoJPC90Zm9vdD4KCTx0Ym9keT4KCQk8P3BocAoJCWZvcmVhY2goICR0ZXN0cyBhcyAkcGFyZW50X2NsYXNzX3Rlc3QgKSB7CgkJCWVjaG8gJzx0ciBjbGFzcz0iZW50cnktcm93Ij4nOwoJCQllY2hvICcJPHRkPicgLiBwYl9iYWNrdXBidWRkeTo6dGlwKCAkcGFyZW50X2NsYXNzX3Rlc3RbJ3RpcCddLCAnJywgZmFsc2UgKSAuICc8L3RkPic7CgkJCWVjaG8gJwk8dGQ+JyAuICRwYXJlbnRfY2xhc3NfdGVzdFsndGl0bGUnXSAuICc8L3RkPic7CgkJCWVjaG8gJwk8dGQ+JyAuICRwYXJlbnRfY2xhc3NfdGVzdFsnc3VnZ2VzdGlvbiddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nIC4gJHBhcmVudF9jbGFzc190ZXN0Wyd2YWx1ZSddIC4gJzwvdGQ+JzsKCQkJLy9lY2hvICcJPHRkPicgLiAkcGFyZW50X2NsYXNzX3Rlc3RbJ3N0YXR1cyddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nOwoJCQlpZiAoICRwYXJlbnRfY2xhc3NfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ09LJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKSB7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtc3VjY2VzcyI+UGFzczwvc3Bhbj4nOwoJCQkJLy9lY2hvICc8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjJFRTVCOyBib3JkZXI6IDFweCBzb2xpZCAjRTJFMkUyOyI+Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9kaXY+JzsKCQkJfSBlbHNlaWYgKCAkcGFyZW50X2NsYXNzX3Rlc3RbJ3N0YXR1cyddID09IF9fKCdGQUlMJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKSB7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtaW1wb3J0YW50Ij5GYWlsPC9zcGFuPic7CgkJCQkvL2VjaG8gJzxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNDRjMzMzM7IGJvcmRlcjogMXB4IHNvbGlkICNFMkUyRTI7Ij4mbmJzcDsmbmJzcDsmbmJzcDs8L2Rpdj4nOwoJCQl9IGVsc2VpZiAoICRwYXJlbnRfY2xhc3NfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ1dBUk5JTkcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApIHsKCQkJCWVjaG8gJzxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC13YXJuaW5nIj5XYXJuaW5nPC9zcGFuPic7CgkJCQkvL2VjaG8gJzxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNGRUZGN0Y7IGJvcmRlcjogMXB4IHNvbGlkICNFMkUyRTI7Ij4mbmJzcDsmbmJzcDsmbmJzcDs8L2Rpdj4nOwoJCQl9CgkJCWVjaG8gJwk8L3RkPic7CgkJCWVjaG8gJzwvdHI+JzsKCQl9CgkJPz4KCTwvdGJvZHk+CjwvdGFibGU+Cjw/cGhwCmVjaG8gJzxicj4nOwplY2hvICc8Y2VudGVyPic7CgppZiAoICFkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgKSB7CgllY2hvICc8YSBocmVmPSIjVEJfaW5saW5lP3dpZHRoPTY0MCYjMDM4O2hlaWdodD02MDAmIzAzODtpbmxpbmVJZD1wYl9zZXJ2ZXJpbmZvdGV4dF9tb2RhbCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tc2Vjb25kYXJ5IGJ1dHRvbi10ZXJ0aWFyeSB0aGlja2JveCIgdGl0bGU9IlNlcnZlciBJbmZvcm1hdGlvbiBSZXN1bHRzIj5EaXNwbGF5IFNlcnZlciBDb25maWd1cmF0aW9uIGluIFRleHQgRm9ybWF0PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgJzsKCWVjaG8gJzxhIGhyZWY9IicgLiBwYl9iYWNrdXBidWRkeTo6YWpheF91cmwoICdwaW5mbycgKSAuICcmIzAzODtUQl9pZnJhbWU9MSYjMDM4O3dpZHRoPTY0MCYjMDM4O2hlaWdodD02MDAiIGNsYXNzPSJ0aGlja2JveCBidXR0b24gc2Vjb25kYXJ5LWJ1dHRvbiIgdGl0bGU9IicgLiBfXygnRGlzcGxheSBFeHRlbmRlZCBQSFAgU2V0dGluZ3MgdmlhIHBocGluZm8oKScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyI+JyAuIF9fKCdEaXNwbGF5IEV4dGVuZGVkIFBIUCBTZXR0aW5ncyB2aWEgcGhwaW5mbygpJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9hPic7Cn0gZWxzZSB7CgllY2hvICc8YSBpZD0ic2VydmVyaW5mb3RleHQiIGNsYXNzPSJidXR0b24gYnV0dG9uLXNlY29uZGFyeSBidXR0b24tdGVydGlhcnkgYnV0dG9uLXByaW1hcnkgdGhpY2tib3ggdG9nZ2xlIiB0aXRsZT0iU2VydmVyIEluZm9ybWF0aW9uIFJlc3VsdHMiPkRpc3BsYXkgUmVzdWx0cyBpbiBUZXh0IEZvcm1hdDwvYT4gJm5ic3A7Jm5ic3A7Jm5ic3A7ICc7Cn0KZWNobyAnPC9jZW50ZXI+JzsKPz48YnI+CgoKCjxkaXYKPD9waHAKaWYgKCAhZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICkgewoJZWNobyAnaWQ9InBiX3NlcnZlcmluZm90ZXh0X21vZGFsIic7Cn0gZWxzZSB7CgllY2hvICdpZD0idG9nZ2xlLXNlcnZlcmluZm90ZXh0Iic7Cn0KPz4gc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KCQk8P3BocAoJCWlmICggIWRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSApIHsKCQkJZWNobyAnPGgzPicgLiBfXyggJ1NlcnZlciBJbmZvcm1hdGlvbiBSZXN1bHRzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9oMz4nOwoJCQllY2hvICc8dGV4dGFyZWEgc3R5bGU9IndpZHRoOiAxMDAlOyBoZWlnaHQ6IDMwMHB4OyIgd3JhcD0ib2ZmIj4nOwoJCX0gZWxzZSB7CgkJCWVjaG8gJzx0ZXh0YXJlYSBzdHlsZT0id2lkdGg6IDk1JTsgaGVpZ2h0OiAzMDBweDsiIHdyYXA9Im9mZiI+JzsKCQl9CgkJZm9yZWFjaCggJHRlc3RzIGFzICR0ZXN0ICkgewoJCQllY2hvICdbJyAuICR0ZXN0WydzdGF0dXMnXSAuICddICAgICAnIC4gJHRlc3RbJ3RpdGxlJ10gLiAnICAgPSAgICcgLiBzdHJpcF90YWdzKCAkdGVzdFsndmFsdWUnXSApIC4gIlxuIjsgCgkJfQoJCT8+PC90ZXh0YXJlYT4KPC9kaXY+Cg==
###PACKDATA,FILE_END,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
###PACKDATA,FILE_START,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnaWNpY2xlLmpzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpY2ljbGVfc2V0dXAuanMnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnaml0X2Jhc2UuY3NzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zdHlsZSggJ2ppdF9pY2ljbGUuY3NzJyApOwo/Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CglqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCWpRdWVyeSgnI3BiX2ljaWNsZWxhdW5jaCcpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQkJalF1ZXJ5KCcjcGJfaW5mb3Zpc19jb250YWluZXInKS5zbGlkZVRvZ2dsZSgpOwoJCQlqUXVlcnkucG9zdCggJzw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OmFqYXhfdXJsKCAnaWNpY2xlJyApOyA/PicsIAoJCQkJZnVuY3Rpb24oIGRhdGEgKSB7CgkJCQkJalF1ZXJ5KCcjaW5mb3ZpcycpLmh0bWwoJycpOwoJCQkJCWljaWNsZV9pbml0KCBkYXRhICk7CgkJCQl9CgkJCSk7CgkJfSk7CgkJCgkJalF1ZXJ5KCAnLnBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2J1dHRvbicgKS5jbGljayggZnVuY3Rpb24oKSB7CgkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19pbnRybyA+IC5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLnNob3coKTsKCQkJalF1ZXJ5LnBvc3QoICc8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjphamF4X3VybCggJ3NpdGVfc2l6ZV9saXN0aW5nJyApOyA/PiZwcm9maWxlPScgKyBqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfZmlsZWxpc3Rpbmdwcm9maWxlJyApLnZhbCgpLCAKCQkJCWZ1bmN0aW9uKCBkYXRhICkgewoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19jb250ZW50JyApLmh0bWwoIGRhdGEgKTsKCQkJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8gPiAucGJfYmFja3VwYnVkZHlfbG9hZGluZycgKS5oaWRlKCk7CgkJCQkJLy9qUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8nICkuc2xpZGVVcCgpOwoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19jb250ZW50JyApLnNsaWRlRG93bigpOwoJCQkJfQoJCQkpOwoJCQlqUXVlcnkoICdwYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLmhpZGUoKTsKCQl9ICk7CgkJCgl9KTsKPC9zY3JpcHQ+CgoKPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCSNwYl9iYWNrdXBidWRkeV9zZXJ2ZXJpbmZvX2V4Y2x1c2lvbnM6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKCQktd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CgkJd2lkdGg6IDExcHg7CgkJaGVpZ2h0OiAxMXB4OwoJfQoJCgkKCSNwYl9iYWNrdXBidWRkeV9zZXJ2ZXJpbmZvX2V4Y2x1c2lvbnM6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsKCQlib3JkZXItcmFkaXVzOiA4cHg7CgkJYm9yZGVyOiAycHggc29saWQgd2hpdGU7IC8qIHNob3VsZCBtYXRjaCBiYWNrZ3JvdW5kLCBjYW4ndCBiZSB0cmFuc3BhcmVudCAqLwoJCWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpOwoJfeKAiwo8L3N0eWxlPgoKCgo8YnI+Cjw/cGhwCmVjaG8gJzxoMyBjbGFzcz0icGJfaHRpdGxlIj4nIC4gX18oJ0RpcmVjdG9yeSBTaXplIExpc3RpbmcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2gzPic7CmVjaG8gJzxhIG5hbWU9InBiX2JhY2t1cGJ1ZGR5X2Rpcl9zaXplX2xpc3RpbmciPiZuYnNwOzwvYT4nOwoKZWNobyAnPGRpdiBpZD0icGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8iPic7CmVjaG8gX18oJ0Rpc3BsYXkgYSBjb21wcmVoZW5zaXZlIGxpc3Rpbmcgb2YgZGlyZWN0b3JpZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHNpemUgb2YgYWxsIGNvbnRlbnRzIHdpdGhpbiwgaW5jbHVkaW5nIHN1YmRpcmVjdG9yaWVzLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGZpbmRpbmcgd2hlcmUgc3BhY2UgaXMgYmVpbmcgdXNlZC4gTm90ZSB0aGF0IHRoaXMgaXMgYSBDUFUgaW50ZW5zaXZlIHByb2Nlc3MgYW5kIG1heSB0YWtlIGEgd2hpbGUgdG8gbG9hZCBhbmQgZXZlbiB0aW1lIG91dCBvbiBzb21lIHNlcnZlcnMuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7CmVjaG8gJzxiciAvPjxiciAvPic7CgoKZWNobyAnPGI+QmFja3VwIHByb2ZpbGUgZm9yIGNhbGN1bGF0aW5nIGV4Y2x1c2lvbnM6PC9iPiAnOwplY2hvICc8c2VsZWN0IGlkPSJwYl9iYWNrdXBidWRkeV9maWxlbGlzdGluZ3Byb2ZpbGUiPic7CmZvcmVhY2goIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncHJvZmlsZXMnXSBhcyAkdGhpc19wcm9maWxlX2lkID0+ICRwcm9maWxlICkgewoJaWYgKCAnZGInID09ICRwcm9maWxlWyd0eXBlJ10gKSB7CgkJY29udGludWU7Cgl9Cgk/PgoJPG9wdGlvbiB2YWx1ZT0iPD9waHAgZWNobyAkdGhpc19wcm9maWxlX2lkOyA/PiIgPD9waHAgaWYgKCAkcHJvZmlsZV9pZCA9PSAkdGhpc19wcm9maWxlX2lkICkgeyBlY2hvICdzZWxlY3RlZCc7IH0gPz4+PD9waHAgZWNobyBodG1sZW50aXRpZXMoICRwcm9maWxlWyd0aXRsZSddICk7ID8+ICg8P3BocCBlY2hvICRwcm9maWxlWyd0eXBlJ107ID8+KTwvYT4KCTw/cGhwCn0KZWNobyAnPC9zZWxlY3Q+PGJyPic7CgoKZWNobyAnPGJyPjxhIGNsYXNzPSJwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19idXR0b24gYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiBzdHlsZT0ibWFyZ2luLXRvcDogM3B4OyI+JywgX18oJ0Rpc3BsYXkgRGlyZWN0b3J5IFNpemUgTGlzdGluZycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCc8L2E+ICc7CmVjaG8gJzxzcGFuIGNsYXNzPSJwYl9iYWNrdXBidWRkeV9sb2FkaW5nIiBzdHlsZT0iZGlzcGxheTogbm9uZTsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nLmdpZiIgYWx0PSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHRpdGxlPSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyIgLz48L3NwYW4+JzsKZWNobyAnPC9kaXY+PGJyPic7CmVjaG8gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+JzsKZWNobyAnPGJyPjxicj4nOwo/PgoKCgo8P3BocCBlY2hvICc8aDMgY2xhc3M9InBiX2h0aXRsZSI+JyAuIF9fKCAnSW50ZXJhY3RpdmUgR3JhcGhpY2FsIERpcmVjdG9yeSBTaXplIE1hcCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvaDM+Jzs/Pgo8YnI+Cjw/cGhwIF9lKCdEaXNwbGF5cyBhbiBpbnRlcmFjdGl2ZSBncmFwaGljYWwgcmVwcmVzZW50YXRpb24gb2YgZGlyZWN0b3JpZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHNpemUgb2YgYWxsIGNvbnRlbnRzIHdpdGhpbiwgaW5jbHVkaW5nIHN1YmRpcmVjdG9yaWVzLgpUaGlzIGlzIHVzZWZ1bCBmb3IgZmluZGluZyB3aGVyZSBzcGFjZSBpcyBiZWluZyB1c2VkLiBEaXJlY3RvcnkgYm94ZXMgYXJlIHNjYWxlZCBiYXNlZCBvbiBzaXplLiBDbGljayBvbiBhIGRpcmVjdG9yeSBib3ggdG8gbW92ZSBhcm91bmQuIE5vdGUgdGhhdCB0aGlzCmlzIGEgQ1BVIGludGVuc2l2ZSBwcm9jZXNzIGFuZCBtYXkgdGFrZSBhIHdoaWxlIHRvIGxvYWQgYW5kIGV2ZW4gdGltZSBvdXQgb24gc29tZSBzZXJ2ZXJzLiBTbG93ZXIgY29tcHV0ZXJzIG1heSBoYXZlIHRyb3VibGUgbmF2aWdhdGluZyB0aGUgaW50ZXJhY3RpdmUgbWFwLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwo/Pgo8YnI+CjxwPjxhIGlkPSJwYl9pY2ljbGVsYXVuY2giIGNsYXNzPSJidXR0b24gYnV0dG9uLXByaW1hcnkiIHN0eWxlPSJtYXJnaW4tdG9wOiAzcHg7Ij48P3BocCBfZSgnRGlzcGxheSBJbnRlcmFjdGl2ZSBHcmFwaGljYWwgRGlyZWN0b3J5IFNpemUgTWFwJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz48L2E+PC9wPgoKCjxsaW5rIHR5cGU9InRleHQvY3NzIiBocmVmPSI8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCk7ID8+L2Nzcy9qaXRfYmFzZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz4KPGxpbmsgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vY3NzL2ppdF9pY2ljbGUuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+CgoKPGRpdiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGlkPSJwYl9pbmZvdmlzX2NvbnRhaW5lciI+Cgk8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kOiAjMUExQTFBOyI+CgkJPGRpdiBpZD0iaW5mb3ZpcyI+CgkJCTxiciAvPjxiciAvPgoJCQk8ZGl2IHN0eWxlPSJtYXJnaW46IDMwcHg7Ij4KCQkJCTxoNCBzdHlsZT0iY29sb3I6ICNGRkZGRkY7Ij48aW1nIHNyYz0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9pbWFnZXMvbG9hZGluZ19sYXJnZV9kYXJrYmcuZ2lmIiBzdHlsZT0idmVydGljYWwtYWxpZ246IC05cHg7IiAvPiA8P3BocCBfZSgnTG9hZGluZyAuLi4gUGxlYXNlIHdhaXQgLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz48L2g0PgoJCQk8L2Rpdj4KCQk8L2Rpdj4KCTwvZGl2PgoJCgk8bGFiZWwgZm9yPSJzLW9yaWVudGF0aW9uIj48P3BocCBfZSgnT3JpZW50YXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjogPC9sYWJlbD4KCTxzZWxlY3QgbmFtZT0icy1vcmllbnRhdGlvbiIgaWQ9InMtb3JpZW50YXRpb24iPgoJCTxvcHRpb24gdmFsdWU9ImgiIHNlbGVjdGVkPjw/cGhwIF9lKCdob3Jpem9udGFsJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz48L29wdGlvbj4KCQk8b3B0aW9uIHZhbHVlPSJ2Ij48P3BocCBfZSgndmVydGljYWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/Pjwvb3B0aW9uPgoJPC9zZWxlY3Q+CgkKCTxsYWJlbCBmb3I9ImktbGV2ZWxzLXRvLXNob3ciPjw/cGhwIF9lKCdNYXggbGV2ZWxzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz46IDwvbGFiZWw+Cgk8c2VsZWN0ICBpZD0iaS1sZXZlbHMtdG8tc2hvdyIgbmFtZT0iaS1sZXZlbHMtdG8tc2hvdyIgc3R5bGU9IndpZHRoOiA1MHB4Ij4KCQk8b3B0aW9uPmFsbDwvb3B0aW9uPgoJCTxvcHRpb24+MTwvb3B0aW9uPgoJCTxvcHRpb24+Mjwvb3B0aW9uPgoJCTxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIj4zPC9vcHRpb24+CgkJPG9wdGlvbj40PC9vcHRpb24+CgkJPG9wdGlvbj41PC9vcHRpb24+Cgk8L3NlbGVjdD4KCgk8YSBpZD0idXBkYXRlIiBjbGFzcz0idGhlbWUgYnV0dG9uIHdoaXRlIj48P3BocCBfZSgnR28gVXAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjwvYT4KPC9kaXY+Cjxicj48YnI+CgoKPD9waHAKJGRpcl9hcnJheSA9IGFycmF5KCk7CiRpY2ljbGVfYXJyYXkgPSBhcnJheSgpOwokdGltZV9zdGFydCA9IG1pY3JvdGltZSh0cnVlKTsKCi8vZWNobyAnPHByZT4nIC4gJHRoaXMtPmJ1aWxkX2ljaWNsZSggQUJTUEFUSCwgQUJTUEFUSCwgJycgKSAuICc8L3ByZT4nOwoKCgoKCgoKCgoKCgo/Pgo=
###PACKDATA,FILE_END,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
###PACKDATA,FILE_START,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
PD9waHAKaWYgKCAhZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICkgeyAvLyBOT1QgSU4gSU1QT1JUQlVERFk6CgoJd3BfZW5xdWV1ZV9zY3JpcHQoICd0aGlja2JveCcgKTsKCXdwX3ByaW50X3NjcmlwdHMoICd0aGlja2JveCcgKTsKCXdwX3ByaW50X3N0eWxlcyggJ3RoaWNrYm94JyApOwoJPz4KCTxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CgkjYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYS5zaG93LXNldHRpbmdzIHsKCQlmbG9hdDogcmlnaHQ7CgkJbWFyZ2luOiAwIDAgMCA2cHg7Cgl9Cgkjc2NyZWVuLW1ldGEtbGlua3MgI2JhY2t1cGJ1ZGR5LW1ldGEtbGluay13cmFwIGEgewoJCWJhY2tncm91bmQ6IG5vbmU7Cgl9Cgkjc2NyZWVuLW1ldGEtbGlua3MgI2JhY2t1cGJ1ZGR5LW1ldGEtbGluay13cmFwIGE6YWZ0ZXIgewoJCWNvbnRlbnQ6ICcnOwoJCW1hcmdpbi1yaWdodDogNXB4OwoJfQoJPC9zdHlsZT4KCgk8P3BocAoKCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2FkbWluLmpzJyApOwoJCgkKCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+dGl0bGUoIF9fKCAnU2VydmVyIFRvb2xzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCWJhY2t1cGJ1ZGR5X2NvcmU6OnZlcnNpb25zX2NvbmZpcm0oKTsKCQoJJGRlZmF1bHRfdGFiID0gMDsKCWlmICggaXNfbnVtZXJpYyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICd0YWInICkgKSApIHsKCQkkZGVmYXVsdF90YWIgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3RhYicgKTsKCX0KCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFicygKCQknZ2V0dGluZ19zdGFydGVkJywKCQlhcnJheSgKCQkJYXJyYXkoCgkJCQkndGl0bGUnCQk9PgkJX18oICdTZXJ2ZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCSdzbHVnJwkJPT4JCSdzZXJ2ZXInLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ0RhdGFiYXNlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZGF0YWJhc2UnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1NpdGUgU2l6ZSBNYXBzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZmlsZXMnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1dvcmRQcmVzcyBTY2hlZHVsZXMgKENyb24pJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknY3JvbicsCgkJCSksCgkJKSwKCQknd2lkdGg6IDEwMCU7JywKCQl0cnVlLAoJCSRkZWZhdWx0X3RhYgoJKTsKCQoJCgkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ3NlcnZlcicgKTsKCQkKCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9zZXJ2ZXIucGhwJyApOwoJCQoJCQoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3Blcm1pc3Npb25zLnBocCcgKTsKCQkKCQkKCQkkd3BfdXBsb2FkX2RpciA9IHdwX3VwbG9hZF9kaXIoKTsKCQkkd3Bfc2V0dGluZ3MgPSBhcnJheSgpOwoJCQoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydwYXRoJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBGaWxlIFBhdGgnLCAkd3BfdXBsb2FkX2RpclsncGF0aCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsndXJsJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBVUkwnLCAkd3BfdXBsb2FkX2RpclsndXJsJ10sICd3cF91cGxvYWRfZGlyKCknICk7CgkJfQoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSApICkgewoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIFN1YmRpcmVjdG9yeScsICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSwgJ3dwX3VwbG9hZF9kaXIoKScpOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBVUkwnLCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBEaXJlY3RvcnknLCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnU2l0ZSBVUkwnLCBzaXRlX3VybCgpLCAnc2l0ZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnSG9tZSBVUkwnLCBob21lX3VybCgpLCAnaG9tZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnV29yZFByZXNzIFJvb3QgUGF0aCcsIEFCU1BBVEgsICdBQlNQQVRIJyApOwoJCQoJCS8vIE11bHRpc2l0ZSBleHRyYXM6CgkJJHdwX3NldHRpbmdzX211bHRpc2l0ZSA9IGFycmF5KCk7CgkJaWYgKCBpc19tdWx0aXNpdGUoKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ05ldHdvcmsgU2l0ZSBVUkwnLCBuZXR3b3JrX3NpdGVfdXJsKCksICduZXR3b3JrX3NpdGVfdXJsKCknICk7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdOZXR3b3JrIEhvbWUgVVJMJywgbmV0d29ya19ob21lX3VybCgpLCAnbmV0d29ya19ob21lX3VybCgpJyApOwoJCX0KCQkKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9jYWwgc3RvcmFnZScsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEJhY2t1cERpcmVjdG9yeSgpLCAnQmFja3VwQnVkZHkgU2V0dGluZ3MnICk7CgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ0JhY2t1cEJ1ZGR5IHRlbXBvcmFyeSBmaWxlcycsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldFRlbXBEaXJlY3RvcnkoKSwgJ0FCU1BBVEggKyBIYXJkY29kZWQgbG9jYXRpb24nICk7CgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ0JhY2t1cEJ1ZGR5IGxvZ3MnLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKSwgJ1VwbG9hZCBCYXNlICsgQmFja3VwQnVkZHknICk7CgkJCgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1RoZW1lcyByb290JywgYmFja3VwYnVkZHlfY29yZTo6Z2V0X3RoZW1lc19yb290KCksICdiYWNrdXBidWRkeV9jb3JlOjpnZXRfdGhlbWVzX3Jvb3QoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnUGx1Z2lucyByb290JywgYmFja3VwYnVkZHlfY29yZTo6Z2V0X3BsdWdpbnNfcm9vdCgpLCAnYmFja3VwYnVkZHlfY29yZTo6Z2V0X3BsdWdpbnNfcm9vdCgpJyApOwoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdNZWRpYSByb290JywgYmFja3VwYnVkZHlfY29yZTo6Z2V0X21lZGlhX3Jvb3QoKSwgJ2JhY2t1cGJ1ZGR5X2NvcmU6OmdldF9tZWRpYV9yb290KCknICk7CgkJCgkJLy8gRGlzcGxheSBXUCBzZXR0aW5ncy4uCgkJcGJfYmFja3VwYnVkZHk6OiR1aS0+bGlzdF90YWJsZSgKCQkJJHdwX3NldHRpbmdzLAoJCQlhcnJheSgKCQkJCSdhY3Rpb24nCQkJCQk9PglwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSwKCQkJCSdjb2x1bW5zJwkJCQkJPT4JYXJyYXkoCgkJCQkJCQkJCQkJCQlfXyggJ1VSTHMgJiBQYXRocycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdPYnRhaW5lZCB2aWEnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCQkJCQkJCQkJKSwKCQkJCSdjc3MnCQkJCQkJPT4JCSd3aWR0aDogMTAwJTsnLAoJCQkpCgkJKTsKCQkKCQkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsKCQoJCgkKCS8vIFRoaXMgcGFnZSBjYW4gdGFrZSBhIGJpdCB0byBydW4uCgkvLyBSdW5zIEFGVEVSIHNlcnZlciBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQgc28gd2UgY2FuIHZpZXcgdGhlIGRlZmF1bHQgbGltaXRzIGZvciB0aGUgc2VydmVyLgoJcGJfYmFja3VwYnVkZHk6OnNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cygpOwoJCgkKCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZGF0YWJhc2UnICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vZGF0YWJhc2UucGhwJyApOwoJCWVjaG8gJzxicj48YnI+PGEgbmFtZT0iZGF0YWJhc2VfcmVwbGFjZSI+PC9hPic7CgkJZWNobyAnPGRpdiBjbGFzcz0icGJfaHRpdGxlIj4nIC4gJ0FkdmFuY2VkOiAnIC4gX18oICdEYXRhYmFzZSBNYXNzIFRleHQgUmVwbGFjZW1lbnQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2Rpdj48YnI+JzsKCQlwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnX3NlcnZlcl90b29scy1kYXRhYmFzZV9yZXBsYWNlJyApOwoJCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoJCgkKCQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZmlsZXMnICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2l0ZV9zaXplLnBocCcgKTsKCQkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsKCQoJCgkKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ2Nyb24nICk7CgkJCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vY3Jvbi5waHAnICk7CgkJCglwYl9iYWNrdXBidWRkeTo6JHVpLT5lbmRfdGFiKCk7CgkKCQoJZWNobyAnPGJyIHN0eWxlPSJjbGVhcjogYm90aDsiPjxicj48YnI+JzsKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWJzKCk7CgkKCQoJCgkvLyBIYW5kbGVzIHRoaWNrYm94IGF1dG8tcmVzaXppbmcuIEtlZXAgYXQgYm90dG9tIG9mIHBhZ2UgdG8gYXZvaWQgaXNzdWVzLgoJaWYgKCAhd3Bfc2NyaXB0X2lzKCAnbWVkaWEtdXBsb2FkJyApICkgewoJCXdwX2VucXVldWVfc2NyaXB0KCAnbWVkaWEtdXBsb2FkJyApOwoJCXdwX3ByaW50X3NjcmlwdHMoICdtZWRpYS11cGxvYWQnICk7Cgl9CgkKfSBlbHNlIHsgLy8gSU5TSURFIElNUE9SVEJVRERZOgoJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3NraXBfc2VydmVyaW5mbycgKSA9PSAnJyApIHsgLy8gR2l2ZSBhIHdvcmthcm91bmQgdG8gc2tpcCB0aGlzLgoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3NlcnZlci5waHAnICk7Cgl9IGVsc2UgewoJCWVjaG8gJ3tTa2lwcGluZyBTZXJ2ZXIgSW5mby4gc2VjdGlvbiBiYXNlZCBvbiBxdWVyeXN0cmluZy59JzsKCX0KfQo/Pg==
###PACKDATA,FILE_END,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
###PACKDATA,FILE_START,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
PD9waHAKcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzcy5pdGNyZWQucGhwJyApOwoKY2xhc3MgSVRYQVBJX0hlbHBlcjIgewoJCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfcGhwYXNzX2hhc2hfcGFzc3dvcmQoICRwYXNzd29yZCApIHsKCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnUGFzc3dvcmRIYXNoJyApICkgewoJCQlyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzLXBocGFzcy5waHAnKTsKCQl9CgkJCgkJJGhhc2hlciA9IG5ldyBQYXNzd29yZEhhc2goOCwgdHJ1ZSk7CgkJJGhhc2ggPSAkaGFzaGVyLT5IYXNoUGFzc3dvcmQoJHBhc3N3b3JkKTsKCQkKCQlyZXR1cm4gJGhhc2g7CgkJCgl9CgkKCS8vIFdBUzogZ2V0X3dvcmRwcmVzc19waHBhc3MoKS4KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0X2FjY2Vzc190b2tlbigkdXNlciwgJHBhc3MsICRzaXRlLCAkd3ApIHsKCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnUGFzc3dvcmRIYXNoJyApICkgewoJCQlyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzLXBocGFzcy5waHAnKTsKCQl9CgkJCgkJJHNvdXJjZV9zdHJpbmcgPSAkcGFzcyAuICR1c2VyIC4gc3RyX3JlcGxhY2UoICd3d3cuJywgJycsICRzaXRlICkgLiAkd3A7CgkJJHNhbHRlZF9zdHJpbmcyID0gc3Vic3RyKCAkc291cmNlX3N0cmluZywgMCwgbWF4KCBzdHJsZW4oICRwYXNzICksIDUxMiApICk7ICAgICAvLyAgbmV3IGF1dGggd2l0aCBoYXNoZWQgcGFzc3dvcmRzCgkJCgkJcmV0dXJuIHNlbGY6Ol9waHBhc3NfaGFzaF9wYXNzd29yZCggJHNhbHRlZF9zdHJpbmcyICk7Cgl9CgkKfSAvLyBFbmQgY2xhc3Mu
###PACKDATA,FILE_END,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
###PACKDATA,FILE_START,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
PD9waHAKCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAKICAgIGNsYXNzIGlUaGVtZXNfQ3JlZGVudGlhbHMKICAgIHsKICAgIAogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJGhhc2ggICAgICAgICAgICAgPSAnc2hhMjU2JzsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJHNhbHRfcGFkZGluZyAgICAgPSAnd2RIVndVJkhjWWNXbmxsbyVrVFVVbnhwU2N5NCVJQ00yOSc7CiAgICAgICAgCiAgICAgICAgcHJvdGVjdGVkICRpdGVyYXRpb25fY291bnQgID0gMTMxMDcyOwogICAgICAgIAogICAgICAgIHByb3RlY3RlZCAka2V5X2xlbmd0aCAgICAgICA9IDY0OwogICAgICAgICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJHBhc3N3b3JkOwogICAgICAgIAogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAKICAgICAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHVzZXJuYW1lLCAkcGFzc3dvcmQsICRvcHRpb25zID0gYXJyYXkoKSkKICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAkdGhpcy0+dXNlcm5hbWUgPSAkdXNlcm5hbWU7CiAgICAgICAgICAgIAogICAgICAgICAgICAkdGhpcy0+cGFzc3dvcmQgPSAkcGFzc3dvcmQ7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydoYXNoJ10pKQogICAgICAgICAgICAgICAgJHRoaXMtPmhhc2ggICAgICAgICAgICAgPSBzdHJ0b2xvd2VyKHRyaW0oJG9wdGlvbnNbJ2hhc2gnXSkpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydpdGVyYXRpb25zJ10pKQogICAgICAgICAgICAgICAgJHRoaXMtPml0ZXJhdGlvbl9jb3VudCAgPSBpbnR2YWwoJG9wdGlvbnNbJ2l0ZXJhdGlvbnMnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCFlbXB0eSgkb3B0aW9uc1snc2FsdCddKSkKICAgICAgICAgICAgICAgICR0aGlzLT5zYWx0X3BhZGRpbmcgICAgID0gJG9wdGlvbnNbJ3NhbHQnXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCFlbXB0eSgkb3B0aW9uc1sna2V5X2xlbmd0aCddKSkKICAgICAgICAgICAgICAgICR0aGlzLT5rZXlfbGVuZ3RoICAgICAgID0gaW50dmFsKCRvcHRpb25zWydrZXlfbGVuZ3RoJ10pOwogICAgICAgIAogICAgICAgIH0gICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgCiAgICAgICAgCiAgICAgICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfcGFzc3dvcmRfaGFzaCgkdXNlcm5hbWUsICRwYXNzd29yZCwgJG9wdGlvbnMgPSBhcnJheSgpKQogICAgICAgIHsKICAgICAgICAgICAgJGhhc2hlciA9IG5ldyBpVGhlbWVzX0NyZWRlbnRpYWxzKCR1c2VybmFtZSwgJHBhc3N3b3JkLCAkb3B0aW9ucyk7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gJGhhc2hlci0+Z2V0X3Bia2RmMigpOwogICAgICAgICAgICAKICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldF9zYWx0KCkKICAgICAgICB7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gc3RydG9sb3dlcih0cmltKCR0aGlzLT51c2VybmFtZSkpIC4gJHRoaXMtPnNhbHRfcGFkZGluZzsgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfSAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldF9wYmtkZjIoKQogICAgICAgIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cGJrZGYyKCR0aGlzLT5oYXNoLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnBhc3N3b3JkLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmdldF9zYWx0KCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aXRlcmF0aW9uX2NvdW50LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmtleV9sZW5ndGggLyAyLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpOwogICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgCiAgICAgICAgCiAgICAgICAgLyoKICAgICAgICAgKiBQQktERjIga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gYXMgZGVmaW5lZCBieSBSU0EncyBQS0NTICM1OiBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMjg5OC50eHQKICAgICAgICAgKiAkYWxnb3JpdGhtIC0gVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gUmVjb21tZW5kZWQ6IFNIQTI1NgogICAgICAgICAqICRwYXNzd29yZCAtIFRoZSBwYXNzd29yZC4KICAgICAgICAgKiAkc2FsdCAtIEEgc2FsdCB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgcGFzc3dvcmQuCiAgICAgICAgICogJGNvdW50IC0gSXRlcmF0aW9uIGNvdW50LiBIaWdoZXIgaXMgYmV0dGVyLCBidXQgc2xvd2VyLiBSZWNvbW1lbmRlZDogQXQgbGVhc3QgMTAwMC4KICAgICAgICAgKiAka2V5X2xlbmd0aCAtIFRoZSBsZW5ndGggb2YgdGhlIGRlcml2ZWQga2V5IGluIGJ5dGVzLgogICAgICAgICAqICRyYXdfb3V0cHV0IC0gSWYgdHJ1ZSwgdGhlIGtleSBpcyByZXR1cm5lZCBpbiByYXcgYmluYXJ5IGZvcm1hdC4gSGV4IGVuY29kZWQgb3RoZXJ3aXNlLgogICAgICAgICAqIFJldHVybnM6IEEgJGtleV9sZW5ndGgtYnl0ZSBrZXkgZGVyaXZlZCBmcm9tIHRoZSBwYXNzd29yZCBhbmQgc2FsdC4KICAgICAgICAgKgogICAgICAgICAqIFRlc3QgdmVjdG9ycyBjYW4gYmUgZm91bmQgaGVyZTogaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzYwNzAudHh0CiAgICAgICAgICoKICAgICAgICAgKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIFBCS0RGMiB3YXMgb3JpZ2luYWxseSBjcmVhdGVkIGJ5IGh0dHBzOi8vZGVmdXNlLmNhCiAgICAgICAgICogV2l0aCBpbXByb3ZlbWVudHMgYnkgaHR0cDovL3d3dy52YXJpYXRpb25zLW9mLXNoYWRvdy5jb20KICAgICAgICAgKi8KICAgICAgICBwdWJsaWMgZnVuY3Rpb24gcGJrZGYyKCRhbGdvcml0aG0sICRwYXNzd29yZCwgJHNhbHQsICRjb3VudCwgJGtleV9sZW5ndGgsICRyYXdfb3V0cHV0ID0gZmFsc2UpCiAgICAgICAgewogICAgICAgICAgICAKICAgICAgICAgICAgJGFsZ29yaXRobSA9IHN0cnRvbG93ZXIoJGFsZ29yaXRobSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZighaW5fYXJyYXkoJGFsZ29yaXRobSwgaGFzaF9hbGdvcygpLCB0cnVlKSkKICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBoYXNoIGFsZ29yaXRobS4nLCBFX1VTRVJfRVJST1IpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJGNvdW50IDw9IDAgfHwgJGtleV9sZW5ndGggPD0gMCkKICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBwYXJhbWV0ZXJzLicsIEVfVVNFUl9FUlJPUik7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgICRoYXNoX2xlbmd0aCA9IHN0cmxlbihoYXNoKCRhbGdvcml0aG0sICcnLCB0cnVlKSk7CiAgICAgICAgICAgICRibG9ja19jb3VudCA9IGNlaWwoJGtleV9sZW5ndGggLyAkaGFzaF9sZW5ndGgpOwogICAgICAgIAogICAgICAgICAgICAkb3V0cHV0ID0gJyc7CiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IoJGkgPSAxOyAkaSA8PSAkYmxvY2tfY291bnQ7ICRpKyspIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vICRpIGVuY29kZWQgYXMgNCBieXRlcywgYmlnIGVuZGlhbi4KICAgICAgICAgICAgICAgICRsYXN0ID0gJHNhbHQgLiBwYWNrKCJOIiwgJGkpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBmaXJzdCBpdGVyYXRpb24KICAgICAgICAgICAgICAgICRsYXN0ID0gJHhvcnN1bSA9IGhhc2hfaG1hYygkYWxnb3JpdGhtLCAkbGFzdCwgJHBhc3N3b3JkLCB0cnVlKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gcGVyZm9ybSB0aGUgb3RoZXIgJGNvdW50IC0gMSBpdGVyYXRpb25zCiAgICAgICAgICAgICAgICBmb3IgKCRqID0gMTsgJGogPCAkY291bnQ7ICRqKyspIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICR4b3JzdW0gXj0gKCRsYXN0ID0gaGFzaF9obWFjKCRhbGdvcml0aG0sICRsYXN0LCAkcGFzc3dvcmQsIHRydWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJG91dHB1dCAuPSAkeG9yc3VtOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgaWYoJHJhd19vdXRwdXQpCiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic3RyKCRvdXRwdXQsIDAsICRrZXlfbGVuZ3RoKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIGJpbjJoZXgoc3Vic3RyKCRvdXRwdXQsIDAsICRrZXlfbGVuZ3RoKSk7CiAgICAgICAgICAgICAgICAKICAgICAgICB9CgogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIH0KICAgIAogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgCg==
###PACKDATA,FILE_END,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
###PACKDATA,FILE_START,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php

###PACKDATA,FILE_END,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
Q29weXJpZ2h0IChjKSAyMDA2LTIwMTAgUnlhbiBQYXJtYW4sIEZvbGVlbyBJbmMuLCBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoKUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlCnBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgoKCSogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YKCSAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgoKCSogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3QKCSAgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMKCSAgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKCSogTmVpdGhlciB0aGUgbmFtZSBvZiBSeWFuIFBhcm1hbiwgRm9sZWVvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvCgkgIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4KCSAgcGVybWlzc2lvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MKT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkKQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUlMKQU5EIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SCkNPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IKU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkKVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IKT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRQpQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4K
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
IyBSZXF1ZXN0Q29yZQoKUmVxdWVzdENvcmUgaXMgYSBsaWdodHdlaWdodCBjVVJMLWJhc2VkIEhUVFAgcmVxdWVzdC9yZXNwb25zZSBjbGFzcyB0aGF0IGxldmVyYWdlcyBNdWx0aUN1cmwgZm9yIHBhcmFsbGVsIHJlcXVlc3RzLgoKIyMjIFBFQVIgSFRUUF9SZXF1ZXN0PwoKUmVxdWVzdENvcmUgd2FzIHdyaXR0ZW4gYXMgYSByZXBsYWNlbWVudCBmb3IgW1BFQVIgSFRUUF9SZXF1ZXN0XShodHRwOi8vcGVhci5waHAubmV0L2h0dHBfcmVxdWVzdC8pLiBXaGlsZSBQRUFSIEhUVFBfUmVxdWVzdCBpcyBmdWxsLWZlYXR1cmVkIGFuZCBoZWF2eSwgUmVxdWVzdENvcmUgZmVhdHVyZXMgb25seSB0aGUgZXNzZW50aWFscyBhbmQgaXMgdmVyeSBsaWdodHdlaWdodC4gSXQgYWxzbyBsZXZlcmFnZXMgdGhlIGJhdGNoIHJlcXVlc3Qgc3VwcG9ydCBpbiBjVVJMJ3MgYGN1cmxfbXVsdGlfZXhlYygpYCB0byBlbmFibGUgbXVsdGktdGhyZWFkZWQgcmVxdWVzdHMgdGhhdCBmaXJlIGluIHBhcmFsbGVsLgoKIyMjIFJlZmVyZW5jZSBhbmQgRG93bmxvYWQKCllvdSBjYW4gZmluZCB0aGUgY2xhc3MgcmVmZXJlbmNlIGF0IDxodHRwOi8vc2t5enl4LmdpdGh1Yi5jb20vcmVxdWVzdGNvcmUvPi4gWW91IGNhbiBnZXQgdGhlIGNvZGUgZnJvbSA8aHR0cDovL2dpdGh1Yi5jb20vc2t5enl4L3JlcXVlc3Rjb3JlPi4KCiMjIyBMaWNlbnNlIGFuZCBDb3B5cmlnaHQKClRoaXMgY29kZSBpcyBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCwgUnlhbiBQYXJtYW4uIEhvd2V2ZXIsIEknbSBsaWNlbnNpbmcgdGhpcyBjb2RlIGZvciBvdGhlcnMgdG8gdXNlIHVuZGVyIHRoZSBbU2ltcGxpZmllZCBCU0QgbGljZW5zZV0oaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHApLgo=
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php
###PACKDATA,END
*/









